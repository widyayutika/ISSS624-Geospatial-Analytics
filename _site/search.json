[
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "",
    "text": "Urban mobility challenges encompass understanding the driving forces behind early morning commutes for city dwellers and evaluating the impact of removing public bus services along specific routes, presenting complex issues for transport operators and urban managers. Traditional commuter surveys, though effective, are costly and time-consuming. With the digitization of urban infrastructures, particularly public transportation, massive geospatial data sets are generated through technologies like GPS and SMART cards. However, the inability to efficiently utilize this data can hinder effective decision-making. This exercise aims to address two key issues: the lack of research on integrating diverse open data sources for policymaking and the insufficient exploration of geospatial data science for decision support."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#setting-the-scene",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "",
    "text": "Urban mobility challenges encompass understanding the driving forces behind early morning commutes for city dwellers and evaluating the impact of removing public bus services along specific routes, presenting complex issues for transport operators and urban managers. Traditional commuter surveys, though effective, are costly and time-consuming. With the digitization of urban infrastructures, particularly public transportation, massive geospatial data sets are generated through technologies like GPS and SMART cards. However, the inability to efficiently utilize this data can hinder effective decision-making. This exercise aims to address two key issues: the lack of research on integrating diverse open data sources for policymaking and the insufficient exploration of geospatial data science for decision support."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#objective",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#objective",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "2 Objective",
    "text": "2 Objective\nThe objective is to conduct a case study showcasing the potential of geospatial data science in integrating publicly available data to build spatial interaction models, explaining factors influencing urban mobility patterns in public bus."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#the-study-area-and-data",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#the-study-area-and-data",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "3 The Study Area and Data",
    "text": "3 The Study Area and Data\n\n3.1 Aspatial Data\n\nOpen Government Data\n\nPassenger Volume by Origin Destination Bus Stops from LTA DataMall.\nSchool Directory and Information from Data.gov.sg.\n\nInstructor-curated Datasets for Educational Purpose\n\nHDB: This data set is the geocoded version of HDB Property Information data from Data.gov.sg. The data set is prepared using September 2021 data.\n\n\n\n\n3.2 Geospatial Data\n\nOpen Government Data\n\nBus Stop Location, Train Station and Train Station Exit Point from LTA DataMall.\nMaster Plan 2019 Subzone Boundary from Data.gov.sg.\n\nInstructor-curated Datasets for Educational Purpose\n\nBusiness, entertn, F&B, FinServ, Leisure&Recreation and Retails consisting locations of business establishments, entertainments, food and beverage outlets, financial centres, leisure and recreation centres, retail and services stores/outlets."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#the-task",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#the-task",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "4 The Task",
    "text": "4 The Task\nThe specific tasks of this take-home exercise are as follows:\n\n4.1 Geospatial Data Science\n\nDerive an analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nWith reference to the time intervals provided in the table below, construct an O-D matrix of commuter flows for a time interval of your choice by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from LTA DataMall. The O-D matrix must be aggregated at the analytics hexagon level\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nDisplay the O-D flows of the passenger trips by using appropriate geovisualisation methods (not more than 5 maps).\nDescribe the spatial patterns revealed by the geovisualisation (not more than 100 words per visual).\nAssemble at least three propulsive and three attractiveness variables by using aspatial and geospatial from publicly available sources.\nCompute a distance matrix by using the analytical hexagon data derived earlier.\n\n\n\n4.2 Spatial Interaction Modelling\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows at the selected time interval.\nPresent the modelling results by using appropriate geovisualisation and graphical visualisation methods. (Not more than 5 visuals)\nWith reference to the Spatial Interaction Model output tables, maps and data visualisation prepared, describe the modelling results. (not more than 100 words per visual)."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#setting-the-analytical-tools",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#setting-the-analytical-tools",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "5 Setting the Analytical Tools",
    "text": "5 Setting the Analytical Tools\nBefore I get started, I need to ensure that sf, spdep, tmap, tidyverse, and knitr packages of R are currently installed in my R.\n\nsf : for importing and handling geospatial data in R,\nspdep : for computing spatial weights, global and local spatial autocorrelation statistics, and\ntmap : for preparing cartographic quality chropleth map\ntidyverse : for wrangling attribute data in R ; tidyverse has already included collection of packages such as readr, ggplot2, dplyr, tiblle, purr, etc.\nknitr: for facilitating dynamic report generation in R Markdown documents.\nsp: for handling spatial data in R\nreshape2: to reshape data frames in R, inclusing melt or cast for transforming data between wide and long format\nstplanr: for analysing and visualizing transportation data\nhttr: for making HTTP requests in T inclluding interacting with web APIs.\nperformance: for comparing the performance of the models\n\nThe code chunk below is used to ensure that the necessary R packages have been installed , if it is yet to be installed, it will then be installed and ready to be used in the R environment.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, sp, reshape2, stplanr, httr, performance)"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#working-with-aspatial-data-commuter-flow",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#working-with-aspatial-data-commuter-flow",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "6 Working with Aspatial Data (Commuter Flow)",
    "text": "6 Working with Aspatial Data (Commuter Flow)\n\n6.1 Importing OD Csv File into R Environment\nNext, I will import Passenger Volume by Origin Destination Bus Stops data set: origin_destination_bus_202310.csv downloaded from LTA Datamall for October 2023 into R by using st_read() of readr package. The output is R dataframe class. In total, there are 5,694,297 records with 7 columns.\n\n\nShow the code\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n\nThe code chunk below uses glimpse() of dplyr package to display the odbus tibble data tables.\n\n\nShow the code\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nFrom the glimpse() check above, it is shown that the ORIGIN_PT_CODE and DESTINATION_PT_CODE are in character type. Both of them need to be converted to factor type to work with categorical variables so that I can use them to georeference with bus stop location data.\n\n\nShow the code\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\nNext, I will confirm the data type changes using glimpse().\n\n\nShow the code\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n6.2 Checking for Duplicate Commuter Flow\n\n\nCode\nduplicate_rec &lt;- odbus %&gt;%   \n  group_by_all() %&gt;%   \n  filter(n()&gt;1) %&gt;%   \n  ungroup()\n\n\nThere is no duplicate record found on odbus dataset.\n\n\n6.3 Extracting the Study Data\nFor the purpose of this take-home exercise, I will extract commuting flows on Weekend/holiday morning peak which is between 11am to 2pm. In total, there are 222,154 records with origin and destination pair for Weekends/Holiday Morning Peak Hour.\n\n\nShow the code\nodbus11_14 &lt;- odbus %&gt;%      \n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%      \n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE,DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\n\n\nShow the code\nglimpse(odbus11_14)\n\n\nRows: 222,154\nColumns: 3\nGroups: ORIGIN_PT_CODE [5,012]\n$ ORIGIN_PT_CODE      &lt;fct&gt; 01012, 01012, 01012, 01012, 01012, 01012, 01012, 0…\n$ DESTINATION_PT_CODE &lt;fct&gt; 01112, 01113, 01121, 01211, 01311, 01549, 01559, 0…\n$ TRIPS               &lt;dbl&gt; 265, 189, 120, 141, 218, 1, 7, 16, 8, 8, 58, 21, 7…"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#working-with-geospatial-data",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#working-with-geospatial-data",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "7 Working with Geospatial Data",
    "text": "7 Working with Geospatial Data\n\n7.1 Importing Shapefile into R Environment\n\nBus Stop Location\n\nThe code chunk below uses st_read() of sf package to import BusStop shapefile into R. The imported shapefile will be simple features Object of sf. Then, I use st_transform of sp package to convert coordinates to EPSG code of 3414 for SVY21 (projected coordinate system for Singapore). There are 5,161 point coordinates of bus stops.\n\n\nShow the code\nbusstop &lt;- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n7.1.1 Checking Duplicate Bus Stop\n\n\nShow the code\nduplicate_bus_stop &lt;- busstop %&gt;%   \n  group_by(BUS_STOP_N) %&gt;%   \n  filter(n()&gt;1)\n\n\nThere are 32 duplicated records with same BUS_STOP_N but different geometry points. However, upon investigation, the coordinates are quite near to each other, this lead to the possibility of being a temporary bus stop. In view of this, I will remove the duplicated records and only keep the first occurrence using the code chunk below. In total, now there are 5,145 point coordinates.\n\n\nShow the code\nbusstop &lt;- busstop %&gt;%   \n  distinct(BUS_STOP_N, .keep_all =TRUE)\n\n\n\nMaster Plan 2019 Subzone Boundary\n\nThe code chunk below uses st_read() of sf package to import MPSZ-19 shapefile into R. The imported shapefile will be simple features Object of sf. Then, I use st_transform of sp package to convert coordinates to EPSG code of 3414 for SVY21 (projected coordinate system for Singapore).\n\n\nShow the code\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n7.2 Creating Honeycomb/Hexagon Layer\nHoneycomb layer are preferred to replace coarse and irregular Master Plan 2019 Sub-zone GIS data set of URA because hexagon reduce sampling bias due to its grid shape of low perimeter to are ratio and its ability to form evenly spaced grid. Honeycomb grids are well-suited for approximating circular areas, making them suitable for mapping Singapore edges with irregular shape.\nThe code chunk below uses st_make_grid of sf package to create a hexagonal or honeycomb grid with a 375m (perpendicular distance between the center of hexagon and its edges) to represent the traffic analysis zone (TAZ). According the the R documentation, the cellsize is the distance between opposite edges, which is 2 times the perpendicular distance between the center of hexagon and its edges. Thus, for the purpose of this exercise, I will use cellsize of 750m and indicate the square=FALSE for hexagonal grid. After doing do, I will create a grid_id for each hexagonal grid (2,541 hexagonal grid).\n\n\nShow the code\narea_honeycomb_grid = st_make_grid(busstop, cellsize=750, what = \"polygons\", square = FALSE)      \n# To sf and add grid ID    \nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %&gt;%\n  # add grid ID            \n  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))\n\n\nNext, I will change the data type of grid_id to factor and will only retain the hexagons with at least 1 bus stop in it.\n\n\nShow the code\nhoneycomb_grid_sf$grid_id &lt;- as.factor(honeycomb_grid_sf$grid_id)\n\nhoneycomb_grid_sf$busstop_count = lengths(st_intersects(honeycomb_grid_sf, busstop))\n\nhoneycomb_with_busstop = filter(honeycomb_grid_sf, busstop_count &gt; 0)\n\n\nThere are 834 hexagonal units with at least 1 busstop.\n\n\nShow the code\nsummary(honeycomb_with_busstop$busstop_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   3.000   6.000   6.169   9.000  19.000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+\ntm_shape(honeycomb_with_busstop%&gt;% filter(busstop_count&gt;0)) +\n  tm_borders() +\n  tm_fill(\"busstop_count\", palette = \"Blues\",\n          title = \"Bus Stop Count\",\n          breaks= c(1,5,10,15,19),\n          legend.show = TRUE,\n          alpha=0.7) +\n  tm_view(set.zoom.limits =c(11,17))+\n  tm_layout(main.title = 'Bus Stop on Hexagonal Grid' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nSome hexagonal grids are highly packed with a maximum of 19 bus stops shown in dark blue color above like Bukit Panjang, Downtown Area and Sembawang.\n\n\n7.3 Data Wrangling with Geospatial Data\nIn this section, I uses st_intersection() from sp package to overlap the bus stop points and hexagonal grids.\n\n\nShow the code\nbusstop_honeycomb &lt;- st_intersection(busstop, honeycomb_with_busstop) %&gt;%\n  select(BUS_STOP_N, LOC_DESC, grid_id) %&gt;%\n  st_drop_geometry()"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#build-an-od-matrix-of-commuter-flows-for-weekendsholiday-morning-peak-hour",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#build-an-od-matrix-of-commuter-flows-for-weekendsholiday-morning-peak-hour",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "8 Build an OD Matrix of Commuter Flows for Weekends/Holiday Morning Peak Hour",
    "text": "8 Build an OD Matrix of Commuter Flows for Weekends/Holiday Morning Peak Hour\nIn this section, I will construct a matrix for Origin and Destination with the Trips counts on each combinations.\nFirst, I will append “ORIGIN_GRID_ID” and “ORIGIN_LOC_DESC” from busstop_honeycomb data frame onto odbus11_14 data frame using the code chunk below.\n\n\nShow the code\nod_data &lt;- left_join(odbus11_14 , busstop_honeycomb,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_GRID_ID = grid_id,\n         DESTIN_BS = DESTINATION_PT_CODE,\n         ORIGIN_LOC_DESC = LOC_DESC)\n\n\nNext, I will check for duplicated records on od_data using the chunk code below.\n\n\nShow the code\nduplicate_od_data &lt;- od_data %&gt;%   \n  group_by_all() %&gt;%   \n  filter(n()&gt;1) %&gt;%   \n  ungroup()\n\n\nThe above code chunk shows that there are no duplicate record found.\nNext, I will update od_data data frame by performing another left join with busstop_honeycomb to get the “DESTIN_GRID_ID” and “DESTIN_LOC_DESC”.\n\n\nShow the code\nod_data &lt;- left_join(od_data , busstop_honeycomb,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) %&gt;%\n  rename(DESTIN_GRID_ID = grid_id,\n         DESTIN_LOC_DESC = LOC_DESC)\n\n\n\n\nShow the code\nmissing_values &lt;- colSums(is.na(od_data))\n\n# Print the columns with missing values\nprint(missing_values)\n\n\n      ORIGIN_BS       DESTIN_BS           TRIPS ORIGIN_LOC_DESC  ORIGIN_GRID_ID \n              0               0               0            2720            2199 \nDESTIN_LOC_DESC  DESTIN_GRID_ID \n           2849            2257 \n\n\nThe missing grid_id for origin and destination bus stop may be due to the outdated Bus Stop Location Data which is uploaded on July 2023 as compared to the Passenger Volume by Origin Destination Bus Stops data collected in October 2023.\nSo, I will remove the rows with NA (in total, now there are 216,644 records) and calculate the number of trips on weekends/holiday morning peak hour by using the group_by “ORIGIN_GRID_ID” and “DESTIN_GRID_ID” and sum all the trips between each combination of hexagonal grid ids using the code chunk below.\n\n\nShow the code\nod_data &lt;- od_data %&gt;%\n  drop_na()\n\n\n\n\nShow the code\nod_data1 &lt;- od_data %&gt;%\n  group_by(ORIGIN_GRID_ID, DESTIN_GRID_ID) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nI will check the distribution of the Morning Peak trips using summary as shown below.\n\n\nShow the code\nsummary(od_data1$MORNING_PEAK)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       4      14     120      58   43418 \n\n\nI will save the output into an rds file format.\n\n\nShow the code\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\n\n\nShow the code\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#computing-distance-matrix-by-analytics-hexagon-level",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#computing-distance-matrix-by-analytics-hexagon-level",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "9 Computing Distance Matrix by Analytics Hexagon Level",
    "text": "9 Computing Distance Matrix by Analytics Hexagon Level\nFirst as.Spatial() from sp package will be used to convert honeycomb_with_busstop from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below. This method is used because it is faster to compute distance matrix using sp than sf package.\n\n\nShow the code\nhoneycomb_with_busstop_sp &lt;- as(honeycomb_with_busstop, \"Spatial\") \nhoneycomb_with_busstop_sp\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 834 \nextent      : 3595.122, 48595.12, 26049.09, 53545.39  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       : grid_id, busstop_count \nmin values  :    1001,             1 \nmax values  :     999,            19 \n\n\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the hexagons. When longlat is set to FALSE, spDists will return a full matrix of distances in the metric of points. While longlat is set to TRUE, it will return in kilometers. In my case, since there are 834 hexagon, amtrix of 834 x 834 will be created and I will print out the first 8 rows using head().\n\n\nShow the code\ndist &lt;- spDists(honeycomb_with_busstop_sp, \n                longlat = FALSE)\nhead(dist, n=c(8, 8))\n\n\n         [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n[1,]    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n[2,]  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n[3,] 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n[4,] 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n[5,] 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n[6,] 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n[7,] 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n[8,] 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n\n\nFrom the matrix above, it is noticed that both the column and row headers are not labelled by grid_id. So, I label the headers by first creating a list sorted according to the distance matrix by grid_id and followed by attaching the grid_id to row and column for distance matrix matching.\n\n\nShow the code\ngrid_id_desc &lt;- honeycomb_with_busstop$grid_id\n\ncolnames(dist) &lt;- paste0(grid_id_desc)\nrownames(dist) &lt;- paste0(grid_id_desc)\nhead(dist, n=c(8,8))\n\n\n         23       44       46       66       67       68       86       87\n23    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n44  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n46 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n66 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n67 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n68 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n86 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n87 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n\n\nNext, I will pivot the distance matrix into a long table by using the row and column grid_id using melt() of reshape2 package to convert wide-format data to long-format data.\nFor reference : https://www.statology.org/long-vs-wide-data/\n\n\n\nWide Long Format\n\n\n\n\nShow the code\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n\n   Var1 Var2     dist\n1    23   23    0.000\n2    44   23  750.000\n3    46   23 3269.174\n4    66   23 1500.000\n5    67   23 2704.163\n6    68   23 3968.627\n7    86   23 1299.038\n8    87   23 2250.000\n9    88   23 3436.932\n10   89   23 4683.748\n\n\nThere are 695556 rows of distPair as the number of possible pair of hexagon permutations.\n\n\nShow the code\nsummary(distPair$dist)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0    8250   13332   14145   18929   44680 \n\n\nFrom the summary of “dist” above, it is noticed that there are 0 distance, this refer to intra-zonal distance meaning that the trips are taken on the same grid id.\nNext, I will rename var1 and var 2 into origin and destination grid_id.\n\n\nShow the code\ndistPair &lt;- distPair %&gt;%\n  rename(ORIGIN_GRID_ID = Var1,\n         DESTIN_GRID_ID = Var2)"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#preparing-flow-data",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#preparing-flow-data",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "10 Preparing Flow Data",
    "text": "10 Preparing Flow Data\nIn this section, I will rename my od_data1 to flow_data.\n\n\nShow the code\nflow_data &lt;- od_data1\n\nprint(head(flow_data))\n\n\n# A tibble: 6 × 3\n# Groups:   ORIGIN_GRID_ID [2]\n  ORIGIN_GRID_ID DESTIN_GRID_ID MORNING_PEAK\n  &lt;fct&gt;          &lt;fct&gt;                 &lt;dbl&gt;\n1 44             128                       4\n2 44             129                       2\n3 44             175                      20\n4 46             67                        2\n5 46             111                       6\n6 46             134                      73\n\n\n\n10.1 Separating Intra-Flow and Inter-Flow\nThe code chunk below is used to add a new field in flow_data dataframe.\n\n‘isinter’ : 0 for intra-zonal flow and MORNING_PEAK for inter-zonal flow\n\n\n\nShow the code\nflow_data$isinter &lt;- ifelse(\n  flow_data$ORIGIN_GRID_ID == flow_data$DESTIN_GRID_ID, \n  0, flow_data$MORNING_PEAK)\n\n\nI will create 2 separate data frames for intra and inter zonal flow.\n\n\nShow the code\nintra_zonal_flow &lt;- flow_data %&gt;% \n  filter(isinter ==0)\n\ninter_zonal_flow &lt;- flow_data %&gt;% \n  filter(isinter &gt;0)\n\n\nFrom a total of 62176 flow data, there are 568 intra-zonal flow and 61,608 inter-zonal flow.\n\n\nShow the code\nintra_zonal_flow\n\n\n# A tibble: 568 × 4\n# Groups:   ORIGIN_GRID_ID [568]\n   ORIGIN_GRID_ID DESTIN_GRID_ID MORNING_PEAK isinter\n   &lt;fct&gt;          &lt;fct&gt;                 &lt;dbl&gt;   &lt;dbl&gt;\n 1 111            111                       1       0\n 2 133            133                       4       0\n 3 150            150                       1       0\n 4 154            154                       9       0\n 5 175            175                       8       0\n 6 176            176                      13       0\n 7 216            216                      19       0\n 8 217            217                      13       0\n 9 237            237                       1       0\n10 278            278                       1       0\n# ℹ 558 more rows\n\n\n\n\nShow the code\ninter_zonal_flow\n\n\n# A tibble: 61,608 × 4\n# Groups:   ORIGIN_GRID_ID [821]\n   ORIGIN_GRID_ID DESTIN_GRID_ID MORNING_PEAK isinter\n   &lt;fct&gt;          &lt;fct&gt;                 &lt;dbl&gt;   &lt;dbl&gt;\n 1 44             128                       4       4\n 2 44             129                       2       2\n 3 44             175                      20      20\n 4 46             67                        2       2\n 5 46             111                       6       6\n 6 46             134                      73      73\n 7 46             155                      12      12\n 8 46             406                      35      35\n 9 66             44                        2       2\n10 66             134                       1       1\n# ℹ 61,598 more rows\n\n\n\n\n10.2 Combining Passenger Volume Data (Inter-Zonal Flow Data) with Distance Value\nBefore we can join “inter_zonal_flow” and “distPair”, I will convert data value type of ORIGIN_GRID_ID and DESTIN_GRID_ID fields of distPair into factor data type.\n\n\nShow the code\ndistPair$ORIGIN_GRID_ID  &lt;- as.factor(distPair$ORIGIN_GRID_ID)\ndistPair$DESTIN_GRID_ID  &lt;- as.factor(distPair$DESTIN_GRID_ID )\n\n\nNow, left_join() of dplyr will be used to combine “inter_zonal_flow” dataframe and distPair dataframe. The output is called flow_data1.\n\n\nShow the code\nflow_data1 &lt;- inter_zonal_flow %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_GRID_ID\" = \"ORIGIN_GRID_ID\",\n                    \"DESTIN_GRID_ID\" = \"DESTIN_GRID_ID\"))\nprint(head(flow_data1))\n\n\n# A tibble: 6 × 5\n# Groups:   ORIGIN_GRID_ID [2]\n  ORIGIN_GRID_ID DESTIN_GRID_ID MORNING_PEAK isinter  dist\n  &lt;fct&gt;          &lt;fct&gt;                 &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 44             128                       4       4 1500 \n2 44             129                       2       2 1984.\n3 44             175                      20      20 6874.\n4 46             67                        2       2  750.\n5 46             111                       6       6 2250.\n6 46             134                      73      73 5408."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#visualising-o-d-flows-of-weekendsholiday-morning-peak-hour",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#visualising-o-d-flows-of-weekendsholiday-morning-peak-hour",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "11 Visualising O-D Flows of Weekends/Holiday Morning Peak Hour",
    "text": "11 Visualising O-D Flows of Weekends/Holiday Morning Peak Hour\nIn this section, I will create a desire line of inter-zonal flow (flow_data1) by using od2line of stplanr package.\n\n\nShow the code\nflowLine &lt;- od2line(flow = flow_data1, zones = honeycomb_with_busstop, zone_code = \"grid_id\") \n\n\nTo visualise the resulting desire lines, the code chunk below is used. In the map below, I have filtered out the trips of less than 5000 for my analysis. Thicker line width refers to the flow with more trips while the length of the desire lines refers to the distance of each inter-zonal flow.\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"plot\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.5)+\n  #tm_text(text = \"SUBZONE_N\", size = 0.2) +\ntm_shape(honeycomb_with_busstop) +\n  tm_polygons(col = \"lightblue\", alpha=0.5) +    \n  flowLine %&gt;%   filter(MORNING_PEAK &gt;= 5000) %&gt;%   \n  tm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",                        \n           style = \"quantile\", \n           scale = c(0.5, 2, 4, 6, 8, 10, 12),                        \n           n = 6,                        \n           alpha = 0.3,\n           col=\"red\")+   \n  tm_layout(main.title = 'Static Map: OD Flow On Weekends/Holiday Morning Peak Hour' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.width=1)\n\n\n\n\n\nFrom the map above, I observed a noticeable concentration of public bus flow in the Woodlands Area and Johor Bahru (hexagon outside of Singapore boundary) as indicated by a thick bank extending between the two for weekends/holiday morning peak hour. We will further analyse whether the flow is from Singapore or from Johor Bahru.\n\n\nShow the code\nflowLine %&gt;% filter(MORNING_PEAK &gt;= 30000)\n\n\nSimple feature collection with 2 features and 5 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 20470.12 ymin: 47266.71 xmax: 20845.12 ymax: 49215.27\nProjected CRS: SVY21 / Singapore TM\n  ORIGIN_GRID_ID DESTIN_GRID_ID MORNING_PEAK isinter     dist\n1            962            984        43418   43418 1984.313\n2            984            983        31087   31087 1299.038\n                        geometry\n1 LINESTRING (20470.12 47266....\n2 LINESTRING (20845.12 49215....\n\n\nThe public bus flow suggest that the predominant movement is from Woodlands Checkpoint to Johor Bahru Checkpoint with around 43k trips. The flow from Johor Bahru Checkpoint to Singapore is also comparably high with around 31k trips. This public bus commuter flow could be attributed to individuals engaging in leisure activities, entertainment, tourism, family/friend visit in Johor/Singapore, some even take advantage of cost-effective grocery shopping in Johor.\n\n\nShow the code\nsummary((flowLine %&gt;% filter(MORNING_PEAK &gt;= 5000))$dist)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    750     750     750    1056    1299    2704 \n\n\nFurthermore, I observed that during weekend morning, the predominant public bus flow spans a relatively short distance with a maximum of 2.7 kilometers. This phenomenon may be attributed to the fact that weekends are typically considered rest days, leading to shorter commutes or more localized activities within a confined radius. Alternatively, individuals may opt for different modes of transport like MRT longer transfers. In the view of activities in confined radius, I will also analyse intra-zonal flows.\n\n\nShow the code\nintra_flow_map &lt;- honeycomb_with_busstop %&gt;%\n  inner_join(intra_zonal_flow, by = c(\"grid_id\" = \"ORIGIN_GRID_ID\")) %&gt;%\n  select(\"grid_id\",\"MORNING_PEAK\",\"busstop_count\",\"area_honeycomb_grid\")\n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.5)+ \ntm_shape(intra_flow_map) +\n  tm_borders() +\n  tm_fill(\"MORNING_PEAK\", palette = \"Blues\",\n          title = \"Morning Peak\",\n          breaks= c(1,1000,5000,8000,11000,14500),\n          legend.show = TRUE,\n          popup.vars = c(\"Trips Count\"=\"MORNING_PEAK\",\n                         \"Bus Stop Count\"=\"busstop_count\"\n                         )) +\n  tm_view(set.zoom.limits =c(11,17))+\n  tm_layout(main.title = 'Intra Flow On Weekends/Holiday Morning Peak Hour' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, the intra public bus flow occurs in the vicinity of Admiralty Int, and along Bukit Merah and Tiong Bahru Area. This suggested that there is a significant volume occurring within a short distance in the specified areas.\nThe below code chunk is for the interactive maps to get more insights.\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.5)+\ntm_shape(honeycomb_with_busstop) +\n  tm_polygons(col = \"lightblue\", alpha=0.5) +    \n  flowLine %&gt;%   filter(MORNING_PEAK &gt;= 5000) %&gt;%   \n  tm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",                        \n           style = \"quantile\", \n           scale = c(2, 6, 8, 10, 8, 12, 14),                        \n           n = 6,                        \n           alpha = 0.3,\n           col=\"red\",\n           popup.vars=c(\"Trips Count\" =\"MORNING_PEAK\"))+   \n  tm_view(set.zoom.limits =c(11,17))+\n  tm_layout(main.title = 'Static Map: OD Flow On Weekends/Holiday Morning Peak Hour' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold')\n\n\n\n\n\n\n\nFrom the map above, I also noticed that there are some great volume to hexagonal grid with bus interchanges or MRT/LRT stations such as Boonlay, Choa Chu Kang, Bukit Panjang, Yee Tew, Clementi, Bishan, Ang Mo Kio, Serangoon, Toa Payoh, Sengkang, Bedok, Tampines, Pasir Ris, which can be one of the factor to be considered for my Spatial Interaction Model later on."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#assemble-propulsiveorigin-and-attractivenessdestination-variables-for-spatial-interaction-model",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#assemble-propulsiveorigin-and-attractivenessdestination-variables-for-spatial-interaction-model",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "12 Assemble Propulsive(Origin) and Attractiveness(Destination) Variables for Spatial Interaction Model",
    "text": "12 Assemble Propulsive(Origin) and Attractiveness(Destination) Variables for Spatial Interaction Model\n\n12.1 Aspatial Data 1 : School Location\nFirst, I will import the School General Information in csv format which is downloaded from data.gov.sg for School Directory and Information. This dataset consist of school name and postal code for MOE Kindergartens, Primary Schools, Secondary Schools, Junior College, Mixed Levels and Centralized Institute for pre-university. In total, there are 346 records. Since the data set does not include polytechnics and ITE, I will collate the information from moe.gov.sg. Currently, there are 8 polytechnics/ITE. Next, I will merge the 2 dasasets and so in total there are 354 schools.\n\n\nShow the code\nschool &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npoly_ite &lt;- read_csv(\"data/aspatial/poly_ite.csv\")\n\npoly_ite &lt;- poly_ite %&gt;% \n  rename(school_name = poly_ite_name) %&gt;% \n  mutate(postal_code = as.character(postal_code))\n\nmerged_school &lt;- bind_rows(school, poly_ite)\n\n\nNext, I will use OneMap API to geocode the school locations by retriving the longitude and latitude coordinates using the postal_code field.\n\n\nShow the code\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\npostcodes &lt;- merged_school$'postal_code'\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes){\n  query &lt;- list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;-GET(url, query=query)\n  \n  if((content(res)$found)!=0){\n    found &lt;-rbind(found, data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nmerged = merge(merged_school, found, by.x='postal_code', by.y='results.POSTAL', all=TRUE)\n\n\nIt is noticed that the number of rows are increasing, there may be duplicated rows and upon checking, there are 8 duplicated rows so I will remove the duplicated rows.\n\n\nShow the code\nduplicate_school &lt;- merged %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n\n\nShow the code\nmerged &lt;- merged %&gt;%\n  distinct(across(everything()), .keep_all = TRUE)\n\n\nThen , I will check wehther there is any postal code that cannot be geocode using the code chunk below.\n\n\nShow the code\nnot_found\n\n\nThere is 1 postal code that cannot be geocode which is 677741. In this case, I will manually extract the longitude (103.7651) and latitude(1.389279) for this specific postal code and fill the NA values with the code chunk below\n\n\nShow the code\nmerged &lt;- merged %&gt;%\n  mutate(results.LATITUDE = ifelse(postal_code == \"677741\", 1.389279, results.LATITUDE)) %&gt;%\n  mutate(results.LONGITUDE = ifelse(postal_code == \"677741\", 103.7651, results.LONGITUDE))\n\n\nI will then write the merged file into a csv file.\n\n\nShow the code\nwrite.csv (merged, file='data/aspatial/schools.csv')\nwrite.csv (not_found, file ='data/aspatial/not_found.csv')\n\n\nNext, I will import the schools final data set and tidy it up (i.e. renaming the column headers) and only extract necessary fields using the code chunk below.\n\n\nShow the code\nschools &lt;- read_csv(\"data/aspatial/schools.csv\") %&gt;%\n  rename(latitude='results.LATITUDE', longitude='results.LONGITUDE')%&gt;%\n  select(postal_code, school_name, latitude,longitude)\n\n\nThen, I will convert the school coordinates into Singapore Projected Coordinate System SVY21 after converting to sf object.\n\n\nShow the code\nschools_sf &lt;- st_as_sf(schools, \n                       coords=c('longitude', 'latitude'),\n                       crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nAfter that, I will count the number of schools in each heaxgon using the st_intersects() of sp package.\n\n\nShow the code\nhoneycomb_with_busstop$'SCHOOL_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, schools_sf))\n\n\nNext, I will check the school_count distributions using summary().\n\n\nShow the code\nsummary(honeycomb_with_busstop$SCHOOL_COUNT)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.4185  1.0000  4.0000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+\ntm_shape(honeycomb_with_busstop%&gt;% filter(SCHOOL_COUNT&gt;0)) +\n  tm_borders() +\n  tm_fill(\"SCHOOL_COUNT\", palette = \"Blues\",\n          title = \"School Count\",\n          breaks= c(1,2,3,4,4),\n          legend.show = TRUE,\n          alpha=0.7) +\n  tm_view(set.zoom.limits =c(11,14))+\n  tm_layout(main.title = 'SCHOOL COUNT on Hexagonal Grid' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the above map, it is noticeable that schools are spread across Singapore and some area like Punggol, Sengkang have more schools as compared to other areas and the CBD and Tuas area has fewer schools.\n\n\n12.2 Aspatial Data 2 : HDB Location\nI will import the hdb in csv format provided and collated by Prof. Kam. This data set is the geocoded version of HDB Property Information data from Data.gov.sg. The data set is prepared using September 2021 data, consisting of 12,442 records with 37 columns.\n\n\nShow the code\nhdb &lt;- read_csv(\"data/aspatial/hdb.csv\")\n\n\nNext, I will convert the longitude and latitude from WSG84 to Singapore Projected Coordinate System SVY21 using st_transform().\n\n\nShow the code\nhdb_sf &lt;- st_as_sf(hdb,                         \n                       coords=c('lng', 'lat'),                        \n                       crs=4326) %&gt;%   \n  st_transform(crs=3414)\n\n\nNext, I will check for duplicated hdb.\n\n\nShow the code\nduplicate_hdb &lt;- hdb_sf %&gt;%   \n  group_by(blk_no,street) %&gt;%   \n  filter(n()&gt;1) %&gt;%   \n  ungroup()\n\n\nThere are no duplicated hdb, so next, I will count the dwelling units in each hexagonal grid.\n\n\nShow the code\ndwelling_units_count &lt;- st_intersection(honeycomb_with_busstop, hdb_sf) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(HDB_DWELLING_UNIT=sum(total_dwelling_units)) %&gt;%\n  st_drop_geometry()\n\n\n\n\nShow the code\nhoneycomb_with_busstop = left_join(honeycomb_with_busstop, dwelling_units_count)\n\n\nNext, I will check the distribution of dwelling units in Singapore.\n\n\nShow the code\nsummary(honeycomb_with_busstop$HDB_DWELLING_UNIT)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     955    2364    2727    4077    7946     436 \n\n\nNext, I will NA with 0, meaning there is the hexagonal grid is not a residential area.\n\n\nShow the code\nhoneycomb_with_busstop &lt;- honeycomb_with_busstop %&gt;%\n  mutate(HDB_DWELLING_UNIT = replace_na(HDB_DWELLING_UNIT, 0))\n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+\ntm_shape(honeycomb_with_busstop%&gt;% filter(HDB_DWELLING_UNIT&gt;0)) +\n  tm_borders() +\n  tm_fill(\"HDB_DWELLING_UNIT\", palette = \"Blues\",\n          title = \"HDB Dwelling Units Count\",\n          breaks= c(1,1000,2000,4000,6000,7946),\n          legend.show = TRUE,\n          alpha=0.7) +\n  tm_view(set.zoom.limits =c(11,14))+\n  tm_layout(main.title = 'HDB Dwelling Units on Hexagonal Grid' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, the HDB spread across Singapore with high concentration on Punggol, Sengkang, Tampine, Bedok, Woodlands, Yishun, Choa Chu Kang, Jurong West.\n\n\n12.3 Geospatial Data 1 : Business\nThis business data is curated by Prof. Kam, consisting locations of business establishments in Singapore. It consists of 6,550 point coordinates of business location in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nbusiness_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Business\")\n\n\nReading layer `Business' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated business.\n\n\nShow the code\nduplicate_business &lt;- business_sf %&gt;%   \n  group_by_all() %&gt;%   \n  filter(n()&gt;1) %&gt;%   \n  ungroup()\n\n\nApparently there are 2 duplicate businesses, so I will remove the duplicated records and keep the first occurrence.\n\n\nShow the code\nbusiness_sf&lt;- unique(business_sf)\n\n\nNext, I will count the number of businesses in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'BUSINESS_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, business_sf))\n\n\nNext, I will check the distribution of BUSINESS_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'BUSINESS_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   7.272   7.000  97.000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+\ntm_shape(honeycomb_with_busstop%&gt;% filter(BUSINESS_COUNT&gt;0)) +\n  tm_borders() +\n  tm_fill(\"BUSINESS_COUNT\", palette = \"Blues\",\n          title = \"Business Count\",\n          breaks= c(1,10,20,30,50,97),\n          legend.show = TRUE,\n          alpha=0.7) +\n  tm_view(set.zoom.limits =c(11,14))+\n  tm_layout(main.title = 'BUSINESS COUNT on Hexagonal Grid' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, for business, it is observed that certain regions especially industrial area like Jurong West to Tuas Area, Woodlands Industrial Area, Kaki Bukit Industrial Estate, Loyang Industrial Estate, exhibits a higher concentration of businesses. The CBD/ Downtown area also has high number of businesses as it is the main commercial area in Singapore.\n\n\n12.4 Geospatial Data 2 : Entertainment\nThis entertainment data is curated by Prof. Kam, consisting of 114 point coordinates of entertainment area like cinema, theatre, art centers in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nentertainment_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"entertn\")\n\n\nReading layer `entertn' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated entertainment.\n\n\nShow the code\nduplicate_entertn &lt;- entertainment_sf %&gt;%   \n  group_by_all() %&gt;%   \n  filter(n()&gt;1) %&gt;%   \n  ungroup()\n\n\nApparently there are 2 duplicate entertainments, so I will remove the duplicated records and keep the first occurrence.\n\n\nShow the code\nentertainment_sf&lt;- unique(entertainment_sf)\n\n\nNext, I will count the number of entertainments in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'ENTERTAINMENT_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, entertainment_sf))\n\n\nNext, I will check the distribution of ENTERTAINMENT_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'ENTERTAINMENT_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1319  0.0000  9.0000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE) \ntmap_mode(\"view\") \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+\ntm_shape(honeycomb_with_busstop%&gt;% filter(ENTERTAINMENT_COUNT&gt;0)) +\n  tm_borders() +\n  tm_fill(\"ENTERTAINMENT_COUNT\", palette = \"Blues\",\n          title = \"Entertainment Count\",\n          breaks= c(1,3,5,7,9),\n          legend.show = TRUE,\n          alpha=0.7) +\n  tm_view(set.zoom.limits =c(11,14))+\n  tm_layout(main.title = 'ENTERTAINMENT COUNT on Hexagonal Grid' ,\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            main.title.fontface = 'bold',\n            legend.width=1)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, it is observed that CBD area especially city hall to bugis area exhibits a higher concentration of entertainment in Singapore.\n\n\n12.5 Geospatial Data 3 : F&B\nThis F&B data is curated by Prof. Kam, consisting of 1,919 point coordinates of F&B area like cafe, restaurant, bar, club, karaoke, pub in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nfnb_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"F&B\")\n\n\nReading layer `F&B' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated F&B.\n\n\nShow the code\nduplicate_fnb &lt;- fnb_sf %&gt;%      \n  group_by_all() %&gt;%      \n  filter(n()&gt;1) %&gt;%      \n  ungroup()\n\n\nThere are no duplicated F&B so next, I will count the number of F&B in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'FNB_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, fnb_sf))\n\n\nNext, I will check the distribution of FNB_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'FNB_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   2.204   1.000 133.000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)  \ntmap_mode(\"view\")  \ntm_shape(mpsz)+      \n  tm_polygons(alpha=0.3)+ \n  tm_shape(honeycomb_with_busstop%&gt;% \n             filter(FNB_COUNT&gt;0)) +   \n  tm_borders() +   \n  tm_fill(\"FNB_COUNT\", \n          palette = \"Blues\",           \n          title = \"FNB Count\",           \n          breaks= c(1,10,20,30,50,70,100,133),           \n          legend.show = TRUE,           \n          alpha=0.7) +   \n  tm_view(set.zoom.limits =c(11,14))+   \n  tm_layout(main.title = 'FNB COUNT on Hexagonal Grid' ,             \n            main.title.position = \"center\",             \n            main.title.size = 1.0,             \n            main.title.fontface = 'bold',             \n            legend.width=1) \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, similar to entertainment, it is observed that CBD area especially tanjong pagar to bugis area exhibits a higher concentration of F&Bin Singapore.\n\n\n12.6 Geospatial Data 4 : Financial Service\nThis Financial Service data is curated by Prof. Kam, consisting ]of 3,320 point coordinates of financial service area like bank, money changer in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nfinserv_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"FinServ\")\n\n\nReading layer `FinServ' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated financial services.\n\n\nShow the code\nduplicate_finserv &lt;- finserv_sf %&gt;%         \n  group_by_all() %&gt;%         \n  filter(n()&gt;1) %&gt;%         \n  ungroup()\n\n\nApparently there are 524 duplicate financial services, so I will remove the duplicated records and keep the first occurrence. So, in total there are 3,058 financial services.\n\n\nShow the code\nfinserv_sf&lt;- unique(finserv_sf)\n\n\nNext, I will count the number of financial services in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'FINSERV_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, finserv_sf))\n\n\nNext, I will check the distribution of FINSERV_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'FINSERV_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   3.613   4.000 130.000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)   \ntmap_mode(\"view\")   \ntm_shape(mpsz)+\n  tm_polygons(alpha=0.3)+    \n  tm_shape(honeycomb_with_busstop%&gt;%               \n             filter(FINSERV_COUNT&gt;0)) + \n  tm_borders() +      \n  tm_fill(\"FINSERV_COUNT\",            \n          palette = \"Blues\",                      \n          title = \"Financial Service Count\",                      \n          breaks= c(1,10,20,30,50,70,100,133),                      \n          legend.show = TRUE,                      \n          alpha=0.7) +      \n  tm_view(set.zoom.limits =c(11,14))+      \n  tm_layout(main.title = 'Financial Service COUNT on Hexagonal Grid' ,      \n            main.title.position = \"center\",                          \n            main.title.size = 1.0,                          \n            main.title.fontface = 'bold',                          \n            legend.width=1)  \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, similar to f&b, it is observed that CBD area especially Tanjong Pagar to Bugis area exhibits a higher concentration of Financial Services in Singapore.\n\n\n12.7 Geospatial Data 5 : Leisure and Recreation\nThis Leisure and Recreation data is curated by Prof. Kam, consisting of 1,217 point coordinates of Leisure and Recreation area like gallery, museum, sport center, park, fitness, playground, studio in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nlei_rec_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Liesure&Recreation\")\n\n\nReading layer `Liesure&Recreation' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated Leisure and Recreation.\n\n\nShow the code\nduplicate_lei_rec &lt;- lei_rec_sf %&gt;%            \n  group_by_all() %&gt;%            \n  filter(n()&gt;1) %&gt;%            \n  ungroup()\n\n\nThere is no duplicated Leisure and Recreation so next, I will count the number of Leisure and Recreation in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'LEIREC_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, lei_rec_sf))\n\n\nNext, I will check the distribution of LEIREC_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'LEIREC_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.307   1.000  41.000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)    \ntmap_mode(\"view\")    \ntm_shape(mpsz)+   \n  tm_polygons(alpha=0.3)+       \n  tm_shape(honeycomb_with_busstop%&gt;%                             \n             filter(LEIREC_COUNT&gt;0)) +    \n  tm_borders() +         \n  tm_fill(\"LEIREC_COUNT\",                       \n          palette = \"Blues\",                                 \n          title = \"Leisure and Recreation Count\",                                 \n          breaks= c(1,10,20,30,41),                                 \n          legend.show = TRUE,                                 \n          alpha=0.7) +         \n  tm_view(set.zoom.limits =c(11,14))+         \n  tm_layout(main.title = 'Leisure and Recreation Count on Hexagonal Grid' ,        \n            main.title.position = \"center\",                                      \n            main.title.size = 1.0,                                       \n            main.title.fontface = 'bold',                                       \n            legend.width=1)   \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, it is observed that Downtown area exhibits a higher concentration of Leisure and Recreation in Singapore.\n\n\n12.8 Geospatial Data 6 : Retails\nThis Retails data is curated by Prof. Kam, consisting of 37,635 point coordinates of Retails area like retail shops in Singapore. The shapefile is already in SVY21 form so there is no need to do st_transform().\n\n\nShow the code\nretail_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Retails\")\n\n\nReading layer `Retails' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, I will check for duplicated Retails.\n\n\nShow the code\nduplicate_retail &lt;- retail_sf %&gt;%               \n  group_by_all() %&gt;%               \n  filter(n()&gt;1) %&gt;%               \n  ungroup()\n\n\nApparently there are 347 duplicate Retails, so I will remove the duplicated records and keep the first occurrence. So, in total there are 37,460 Retails.\n\n\nShow the code\nretail_sf&lt;- unique(retail_sf)\n\n\nNext, I will count the number of Retails in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'RETAILS_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, retail_sf))\n\n\nNext, I will check the distribution of RETAILS_COUNT.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'RETAILS_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    1.00    8.00   43.83   36.00 1669.00 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)     \ntmap_mode(\"view\")     \ntm_shape(mpsz)+      \n  tm_polygons(alpha=0.3)+          \n  tm_shape(honeycomb_with_busstop%&gt;%                                           filter(RETAILS_COUNT&gt;0)) +       \n  tm_borders() +            \n  tm_fill(\"RETAILS_COUNT\",                                  \n          palette = \"Blues\",                                            \n          title = \"Retails  Count\",                                            breaks= c(1,100,500,1000,1500,1669),                                            \n          legend.show = TRUE,                                            \n          alpha=0.7) +            \n  tm_view(set.zoom.limits =c(11,14))+            \n  tm_layout(main.title = 'Retails Count on Hexagonal Grid' ,   \n            main.title.position = \"center\",                                       \n            main.title.size = 1.0,                                              \n            main.title.fontface = 'bold',                                         \n            legend.width=1)    \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, it is observed that Bugis area exhibits a higher concentration of Retails in Singapore.\n\n\n12.9 Geospatial Data 7: MRT Station EXIT\nThis MRT Station Exit data is downloaded from LTA DataMall, consisting of 565 point coordinates of MRT Exits in Singapore. Then, I use st_transform of sp package to convert coordinates to EPSG code of 3414 for SVY21 (projected coordinate system for Singapore).\n\n\nShow the code\nMRT_exit_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Train_Station_Exit_Layer\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `Train_Station_Exit_Layer' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 565 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6134.086 ymin: 27499.7 xmax: 45356.36 ymax: 47865.92\nProjected CRS: SVY21\n\n\nNext, I will check for duplicated MRT Exits.\n\n\nShow the code\nduplicate_MRT_exit &lt;- MRT_exit_sf %&gt;%                  \n  group_by(stn_name,exit_code) %&gt;%                  \n  filter(n()&gt;1) %&gt;%                  \n  ungroup()\n\n\nApparently there are 17 duplicate MRT Exits, so I will remove the duplicated records and keep the first occurrence. So, in total there are 556 MRT Exits.\n\n\nShow the code\nMRT_exit_sf&lt;- MRT_exit_sf %&gt;%\n  distinct(stn_name, exit_code, .keep_all=TRUE)\n\n\nNext, I will count the number of MRT Exits in each hexagonal grid.\n\n\nShow the code\nhoneycomb_with_busstop$'MRT_EXIT_COUNT' &lt;- lengths(st_intersects(honeycomb_with_busstop, MRT_exit_sf))\n\n\nNext, I will check the distribution of MRT Exits.\n\n\nShow the code\nsummary(honeycomb_with_busstop$'MRT_EXIT_COUNT')\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.6619  0.0000 13.0000 \n\n\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)     \ntmap_mode(\"view\")     \ntm_shape(mpsz)+      \n  tm_polygons(alpha=0.3)+          \n  tm_shape(honeycomb_with_busstop%&gt;%                                           filter(MRT_EXIT_COUNT&gt;0)) +       \n  tm_borders() +            \n  tm_fill(\"MRT_EXIT_COUNT\",                                  \n          palette = \"Blues\",                                            \n          title = \"MRT Exit Count\",                                            breaks= c(1,4,7,10,13),                                            \n          legend.show = TRUE,                                            \n          alpha=0.7) +            \n  tm_view(set.zoom.limits =c(11,14))+            \n  tm_layout(main.title = 'MRT Exits Count on Hexagonal Grid' ,   \n            main.title.position = \"center\",                                       \n            main.title.size = 1.0,                                              \n            main.title.fontface = 'bold',                                         \n            legend.width=1)    \n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\") \n\n\nFrom the map above, it is observed that Downtown area exhibits a higher concentration of MRT Exits with a maximum of 13."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#flow_data_tidy",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#flow_data_tidy",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "13 Flow_Data_Tidy",
    "text": "13 Flow_Data_Tidy\nIn this section, I will append all propulsive(origin) and attraction(destination) variables to my flow_data1 and create new df flow_data_tidy.\nI will tidy up flow_data1.\n\n\nShow the code\nflow_data1 &lt;- flow_data1 %&gt;%\n  select(c(\"ORIGIN_GRID_ID\",\"DESTIN_GRID_ID\",\n           \"MORNING_PEAK\", \"dist\"))\n\n\n\n\nShow the code\nflow_data_tidy &lt;- flow_data1 %&gt;%\n  left_join(honeycomb_with_busstop,\n            by = c('ORIGIN_GRID_ID' = 'grid_id')) %&gt;%\n  rename(ORIGIN_SCHOOL_COUNT=SCHOOL_COUNT,\n         ORIGIN_HDB_DWELLING_UNIT=HDB_DWELLING_UNIT,\n         ORIGIN_BUSINESS_COUNT=BUSINESS_COUNT,\n         ORIGIN_ENTERTAINMENT_COUNT=ENTERTAINMENT_COUNT,\n         ORIGIN_FNB_COUNT=FNB_COUNT,\n         ORIGIN_FINSERV_COUNT=FINSERV_COUNT,\n         ORIGIN_LEIREC_COUNT=LEIREC_COUNT,\n         ORIGIN_RETAILS_COUNT=RETAILS_COUNT,\n         ORIGIN_MRT_EXIT_COUNT=MRT_EXIT_COUNT)%&gt;%\n  select(-c(busstop_count,area_honeycomb_grid))\n\nflow_data_tidy &lt;- flow_data_tidy %&gt;%\n  left_join(honeycomb_with_busstop,\n            by = c('DESTIN_GRID_ID' = 'grid_id')) %&gt;%\n  rename(DESTIN_SCHOOL_COUNT=SCHOOL_COUNT,\n         DESTIN_HDB_DWELLING_UNIT=HDB_DWELLING_UNIT,\n         DESTIN_BUSINESS_COUNT=BUSINESS_COUNT,\n         DESTIN_ENTERTAINMENT_COUNT=ENTERTAINMENT_COUNT,\n         DESTIN_FNB_COUNT=FNB_COUNT,\n         DESTIN_FINSERV_COUNT=FINSERV_COUNT,\n         DESTIN_LEIREC_COUNT=LEIREC_COUNT,\n         DESTIN_RETAILS_COUNT=RETAILS_COUNT,\n         DESTIN_MRT_EXIT_COUNT=MRT_EXIT_COUNT)%&gt;%\n  select(-c(busstop_count,area_honeycomb_grid))\n\n\nI will write flow_data_tidy into local disk.\n\n\nShow the code\nwrite_rds(flow_data_tidy,\"data/rds/flow_data_tidy.rds\")"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#calibrating-spatial-interaction-models",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#calibrating-spatial-interaction-models",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "14 Calibrating Spatial Interaction Models",
    "text": "14 Calibrating Spatial Interaction Models\nIn this section, I will calibrate Spatial Interaction Models by using log based Poisson Regression Gravity Model using glm() function. Ther e are 4 components in the models:\n\nNumber of Trips (MORNING_PEAK), as the target variable of the model\nDistance. The underlying idea is that the longer the distance, the less appealing the journey is.\nAttractiveness Variables, as factors that lead bus passengers to disembark at particular bus stop\nPropulsiveness Variables, as factors that lead bus passengers to board from particular bus stop\n\nThere are several reasons why Poisson Regression is chosen as follows:\n\nMy dependent variable , MORNING_PEAK represent count of trips making it suitable for a count-base model like Poisson Regression which is a type of generalised linear model (GLM) designed for count data\nMy dependent variables only takes positive values and the concept of negative counts is not meaning, so Poisson regression is preferable over linear regression which allows for negative values.\nthe choice of Poisson regression is supported by the consideration that residuals may exhibit an asymmetric distribution around the mean. In other words, outcomes on either side of the mean are not equally likely, emphasizing the need for a model that accommodates such characteristics. Therefore, Poisson regression emerges as a sensible and statistically appropriate choice for capturing the unique nature of our count-based and positively constrained MORNIGN_PEAK variable.\n\n\n14.1 Importing the Modelling Data\nFirst, I will import the flow_data_tidy back into R.\n\nflow_data_tidy &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\n\n14.2 Visualising the Dependent Variables\n\n14.2.1 Distribution of Weekends/Holiday Morning Peak Trips\n\nggplot(data = flow_data_tidy,\n       aes(x = MORNING_PEAK)) +\n  geom_histogram(fill=\"lightblue\")+\n  labs(y= \"Count of Trips\", x= \"Trips\")+\n  ggtitle(\"Distribution of Weekends/Holiday Morning Peak Trips\")\n\n\n\n\nFrom the above plot, it is noted that the distribution of weekends/holiday morning peak hour is highly skewed to the right.\nNext, I will visualize the relation between dependent variable and one of the key independent variable in Spatial Interaction Model which is distance\n\n\n14.2.2 Trips vs Distance\n\nggplot(data = flow_data_tidy,\n       aes(x = dist,\n           y = MORNING_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)+\n  labs(y= 'MORNING_PEAK', x='dist') +\n  ggtitle('Relationship between MORNING_PEAK Trips and Distance')\n\n\n\n\nIt is noticed that the relationship hardly resemble linear relationship. I will try to plot the scatter plot again using the log transformed of both variables and whether I can get a more linear relationship.\n\n\n14.2.3 Log(Morning Peak Trips) vs Log(Distance)\n\nggplot(data = flow_data_tidy,\n       aes(x = log(dist),\n           y = log(MORNING_PEAK))) +\n  geom_point() +\n  geom_smooth(method = lm)+\n  labs(y= 'log(MORNING_PEAK)', x='log(dist)') +\n  ggtitle('Relationship between log(MORNING_PEAK Trips) and log(Distance)')\n\n\n\n\nFrom the scatter plot above, I can see that the relationship is more resemble linear relationship.\n\n\n\n14.3 Checking for Variables with Zero Values\nSince Poisson Regression is based on log and log 0 is undefined, it is important to ensure that there are no 0 value in the explanatory variables.\n\nsummary(flow_data_tidy)\n\n ORIGIN_GRID_ID  DESTIN_GRID_ID   MORNING_PEAK          dist      \n 1474   :  319   1474   :  317   Min.   :    1.0   Min.   :  750  \n 1960   :  299   1516   :  305   1st Qu.:    4.0   1st Qu.: 3000  \n 1496   :  292   1960   :  301   Median :   14.0   Median : 5408  \n 1477   :  288   1496   :  299   Mean   :  116.3   Mean   : 6280  \n 1431   :  278   1477   :  291   3rd Qu.:   56.0   3rd Qu.: 8649  \n 1749   :  277   1370   :  281   Max.   :43418.0   Max.   :24784  \n (Other):59855   (Other):59814                                    \n ORIGIN_SCHOOL_COUNT ORIGIN_HDB_DWELLING_UNIT ORIGIN_BUSINESS_COUNT\n Min.   :0.0000      Min.   :   0             Min.   : 0.000       \n 1st Qu.:0.0000      1st Qu.:   0             1st Qu.: 0.000       \n Median :0.0000      Median : 924             Median : 1.000       \n Mean   :0.5593      Mean   :1830             Mean   : 6.572       \n 3rd Qu.:1.0000      3rd Qu.:3311             3rd Qu.: 6.000       \n Max.   :4.0000      Max.   :7946             Max.   :97.000       \n                                                                   \n ORIGIN_ENTERTAINMENT_COUNT ORIGIN_FNB_COUNT  ORIGIN_FINSERV_COUNT\n Min.   :0.0000             Min.   :  0.000   Min.   :  0.000     \n 1st Qu.:0.0000             1st Qu.:  0.000   1st Qu.:  1.000     \n Median :0.0000             Median :  0.000   Median :  3.000     \n Mean   :0.3231             Mean   :  5.542   Mean   :  7.727     \n 3rd Qu.:0.0000             3rd Qu.:  2.000   3rd Qu.:  9.000     \n Max.   :9.0000             Max.   :133.000   Max.   :130.000     \n                                                                  \n ORIGIN_LEIREC_COUNT ORIGIN_RETAILS_COUNT ORIGIN_MRT_EXIT_COUNT\n Min.   : 0.00       Min.   :   0.00      Min.   : 0.000       \n 1st Qu.: 0.00       1st Qu.:   7.00      1st Qu.: 0.000       \n Median : 1.00       Median :  30.00      Median : 0.000       \n Mean   : 2.29       Mean   :  95.17      Mean   : 1.319       \n 3rd Qu.: 3.00       3rd Qu.: 104.00      3rd Qu.: 2.000       \n Max.   :41.00       Max.   :1669.00      Max.   :13.000       \n                                                               \n DESTIN_SCHOOL_COUNT DESTIN_HDB_DWELLING_UNIT DESTIN_BUSINESS_COUNT\n Min.   :0.0000      Min.   :   0             Min.   : 0.000       \n 1st Qu.:0.0000      1st Qu.:   0             1st Qu.: 0.000       \n Median :0.0000      Median : 932             Median : 1.000       \n Mean   :0.5562      Mean   :1838             Mean   : 6.689       \n 3rd Qu.:1.0000      3rd Qu.:3311             3rd Qu.: 6.000       \n Max.   :4.0000      Max.   :7946             Max.   :97.000       \n                                                                   \n DESTIN_ENTERTAINMENT_COUNT DESTIN_FNB_COUNT DESTIN_FINSERV_COUNT\n Min.   :0.0000             Min.   :  0.00   Min.   :  0.000     \n 1st Qu.:0.0000             1st Qu.:  0.00   1st Qu.:  1.000     \n Median :0.0000             Median :  0.00   Median :  3.000     \n Mean   :0.3344             Mean   :  5.59   Mean   :  7.882     \n 3rd Qu.:0.0000             3rd Qu.:  2.00   3rd Qu.:  9.000     \n Max.   :9.0000             Max.   :133.00   Max.   :130.000     \n                                                                 \n DESTIN_LEIREC_COUNT DESTIN_RETAILS_COUNT DESTIN_MRT_EXIT_COUNT\n Min.   : 0.000      Min.   :   0.00      Min.   : 0.000       \n 1st Qu.: 0.000      1st Qu.:   7.00      1st Qu.: 0.000       \n Median : 1.000      Median :  30.00      Median : 0.000       \n Mean   : 2.312      Mean   :  96.55      Mean   : 1.337       \n 3rd Qu.: 3.000      3rd Qu.: 106.00      3rd Qu.: 2.000       \n Max.   :41.000      Max.   :1669.00      Max.   :13.000       \n                                                               \n\n\nThe print report above reveals that some variables consists of 0 values:\n\nORIGIN_SCHOOL_COUNT and DESTIN_SCHOOL_COUNT\nORIGIN_HDB_DWELLING_UNIT, DESTIN_HDB_DWELLING_UNIT\nORIGIN_BUSINESS_COUNT, DESTIN_BUSINESS_COUNT\nORIGIN_ENTERTAINMENT_COUNT, DESTIN_ENTERTAINMENT_COUNT\nORIGIN_FNB_COUNT, DESTIN_FNB_COUNT\nORIGIN_FINSERV_COUNT, DESTIN_FINSERV_COUNT\nORIGIN_LEIREC_COUNT, DESTIN_LEIREC_COUNT\nORIGIN_RETAILS_COUNT, DESTIN_RETAILS_COUNT\nORIGIN_MRT_EXIT_COUNT, DESTIN_MRT_EXIT_COUNT\n\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nflow_data_tidy &lt;- flow_data_tidy %&gt;% mutate_all(~ ifelse(. == 0, 0.99, .))\n\n\nsummary(flow_data_tidy)\n\n ORIGIN_GRID_ID  DESTIN_GRID_ID  MORNING_PEAK          dist      \n 1474   :  319   Min.   :  44   Min.   :    1.0   Min.   :  750  \n 1960   :  299   1st Qu.:1119   1st Qu.:    4.0   1st Qu.: 3000  \n 1496   :  292   Median :1435   Median :   14.0   Median : 5408  \n 1477   :  288   Mean   :1424   Mean   :  116.3   Mean   : 6280  \n 1431   :  278   3rd Qu.:1727   3rd Qu.:   56.0   3rd Qu.: 8649  \n 1749   :  277   Max.   :2505   Max.   :43418.0   Max.   :24784  \n (Other):59855                                                   \n ORIGIN_SCHOOL_COUNT ORIGIN_HDB_DWELLING_UNIT ORIGIN_BUSINESS_COUNT\n Min.   :0.99        Min.   :   0.99          Min.   : 0.990       \n 1st Qu.:0.99        1st Qu.:   0.99          1st Qu.: 0.990       \n Median :0.99        Median : 924.00          Median : 1.000       \n Mean   :1.18        Mean   :1830.60          Mean   : 7.012       \n 3rd Qu.:1.00        3rd Qu.:3311.00          3rd Qu.: 6.000       \n Max.   :4.00        Max.   :7946.00          Max.   :97.000       \n                                                                   \n ORIGIN_ENTERTAINMENT_COUNT ORIGIN_FNB_COUNT  ORIGIN_FINSERV_COUNT\n Min.   :0.990              Min.   :  0.990   Min.   :  0.990     \n 1st Qu.:0.990              1st Qu.:  0.990   1st Qu.:  1.000     \n Median :0.990              Median :  0.990   Median :  3.000     \n Mean   :1.172              Mean   :  6.067   Mean   :  7.952     \n 3rd Qu.:0.990              3rd Qu.:  2.000   3rd Qu.:  9.000     \n Max.   :9.000              Max.   :133.000   Max.   :130.000     \n                                                                  \n ORIGIN_LEIREC_COUNT ORIGIN_RETAILS_COUNT ORIGIN_MRT_EXIT_COUNT\n Min.   : 0.990      Min.   :   0.99      Min.   : 0.990       \n 1st Qu.: 0.990      1st Qu.:   7.00      1st Qu.: 0.990       \n Median : 1.000      Median :  30.00      Median : 0.990       \n Mean   : 2.683      Mean   :  95.24      Mean   : 1.933       \n 3rd Qu.: 3.000      3rd Qu.: 104.00      3rd Qu.: 2.000       \n Max.   :41.000      Max.   :1669.00      Max.   :13.000       \n                                                               \n DESTIN_SCHOOL_COUNT DESTIN_HDB_DWELLING_UNIT DESTIN_BUSINESS_COUNT\n Min.   :0.990       Min.   :   0.99          Min.   : 0.990       \n 1st Qu.:0.990       1st Qu.:   0.99          1st Qu.: 0.990       \n Median :0.990       Median : 932.00          Median : 1.000       \n Mean   :1.178       Mean   :1838.01          Mean   : 7.128       \n 3rd Qu.:1.000       3rd Qu.:3311.00          3rd Qu.: 6.000       \n Max.   :4.000       Max.   :7946.00          Max.   :97.000       \n                                                                   \n DESTIN_ENTERTAINMENT_COUNT DESTIN_FNB_COUNT DESTIN_FINSERV_COUNT\n Min.   :0.99               Min.   :  0.99   Min.   :  0.990     \n 1st Qu.:0.99               1st Qu.:  0.99   1st Qu.:  1.000     \n Median :0.99               Median :  0.99   Median :  3.000     \n Mean   :1.18               Mean   :  6.11   Mean   :  8.105     \n 3rd Qu.:0.99               3rd Qu.:  2.00   3rd Qu.:  9.000     \n Max.   :9.00               Max.   :133.00   Max.   :130.000     \n                                                                 \n DESTIN_LEIREC_COUNT DESTIN_RETAILS_COUNT DESTIN_MRT_EXIT_COUNT\n Min.   : 0.990      Min.   :   0.99      Min.   : 0.990       \n 1st Qu.: 0.990      1st Qu.:   7.00      1st Qu.: 0.990       \n Median : 1.000      Median :  30.00      Median : 0.990       \n Mean   : 2.703      Mean   :  96.61      Mean   : 1.949       \n 3rd Qu.: 3.000      3rd Qu.: 106.00      3rd Qu.: 2.000       \n Max.   :41.000      Max.   :1669.00      Max.   :13.000       \n                                                               \n\n\n\n\n14.4 R-squared function\nI will use the goodness of fit or R-squared function below to identify how well the observed data fits the model by comparing the observed bales to the values generated by the models.\n\nCalcRSquared &lt;- function(observed,estimated){   \n  r &lt;- cor(observed,estimated)   \n  R2 &lt;- r^2   \n  R2 \n  }\n\n\n\n14.5 Unconstrained Spatial Interaction Model\nIn this section, I will calibrate an unconstrained spatial interaction model by using glm() of Base Stats.\nUnconstrained spatial interaction uses all independent variables: propulsive(origin), attractive(destination), and distance.\n\n\n\nUnconstrained\n\n\n\nuncSIM &lt;- glm(formula = MORNING_PEAK ~ \n                log(ORIGIN_SCHOOL_COUNT)+\n                log(ORIGIN_HDB_DWELLING_UNIT) +\n                log(ORIGIN_BUSINESS_COUNT)+\n                log(ORIGIN_ENTERTAINMENT_COUNT)+\n                log(ORIGIN_FNB_COUNT)+\n                log(ORIGIN_FINSERV_COUNT)+\n                log(ORIGIN_LEIREC_COUNT)+\n                log(ORIGIN_RETAILS_COUNT)+\n                log(ORIGIN_MRT_EXIT_COUNT)+\n                log(DESTIN_SCHOOL_COUNT)+\n                log(DESTIN_HDB_DWELLING_UNIT) +\n                log(DESTIN_BUSINESS_COUNT)+\n                log(DESTIN_ENTERTAINMENT_COUNT)+\n                log(DESTIN_FNB_COUNT)+\n                log(DESTIN_FINSERV_COUNT)+\n                log(DESTIN_LEIREC_COUNT)+\n                log(DESTIN_RETAILS_COUNT)+\n                log(DESTIN_MRT_EXIT_COUNT)+\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(uncSIM, \"data/rds/uncSIM.rds\")\n\n\nuncSIM &lt;- read_rds(\"data/rds/uncSIM.rds\")\nsummary(uncSIM)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ log(ORIGIN_SCHOOL_COUNT) + log(ORIGIN_HDB_DWELLING_UNIT) + \n    log(ORIGIN_BUSINESS_COUNT) + log(ORIGIN_ENTERTAINMENT_COUNT) + \n    log(ORIGIN_FNB_COUNT) + log(ORIGIN_FINSERV_COUNT) + log(ORIGIN_LEIREC_COUNT) + \n    log(ORIGIN_RETAILS_COUNT) + log(ORIGIN_MRT_EXIT_COUNT) + \n    log(DESTIN_SCHOOL_COUNT) + log(DESTIN_HDB_DWELLING_UNIT) + \n    log(DESTIN_BUSINESS_COUNT) + log(DESTIN_ENTERTAINMENT_COUNT) + \n    log(DESTIN_FNB_COUNT) + log(DESTIN_FINSERV_COUNT) + log(DESTIN_LEIREC_COUNT) + \n    log(DESTIN_RETAILS_COUNT) + log(DESTIN_MRT_EXIT_COUNT) + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                                  Estimate Std. Error  z value Pr(&gt;|z|)    \n(Intercept)                     14.6017272  0.0037998  3842.77   &lt;2e-16 ***\nlog(ORIGIN_SCHOOL_COUNT)        -0.0348253  0.0012170   -28.61   &lt;2e-16 ***\nlog(ORIGIN_HDB_DWELLING_UNIT)    0.0783311  0.0001448   540.90   &lt;2e-16 ***\nlog(ORIGIN_BUSINESS_COUNT)      -0.1410675  0.0004331  -325.74   &lt;2e-16 ***\nlog(ORIGIN_ENTERTAINMENT_COUNT)  0.1008795  0.0014054    71.78   &lt;2e-16 ***\nlog(ORIGIN_FNB_COUNT)           -0.0812181  0.0005293  -153.44   &lt;2e-16 ***\nlog(ORIGIN_FINSERV_COUNT)        0.2554167  0.0006937   368.20   &lt;2e-16 ***\nlog(ORIGIN_LEIREC_COUNT)        -0.1362295  0.0006891  -197.70   &lt;2e-16 ***\nlog(ORIGIN_RETAILS_COUNT)        0.0594141  0.0004389   135.37   &lt;2e-16 ***\nlog(ORIGIN_MRT_EXIT_COUNT)       0.2554255  0.0007182   355.64   &lt;2e-16 ***\nlog(DESTIN_SCHOOL_COUNT)         0.0292703  0.0012280    23.84   &lt;2e-16 ***\nlog(DESTIN_HDB_DWELLING_UNIT)    0.0559484  0.0001426   392.31   &lt;2e-16 ***\nlog(DESTIN_BUSINESS_COUNT)      -0.1705303  0.0004394  -388.13   &lt;2e-16 ***\nlog(DESTIN_ENTERTAINMENT_COUNT)  0.1146628  0.0012990    88.27   &lt;2e-16 ***\nlog(DESTIN_FNB_COUNT)           -0.0698330  0.0005093  -137.12   &lt;2e-16 ***\nlog(DESTIN_FINSERV_COUNT)        0.3345663  0.0007071   473.17   &lt;2e-16 ***\nlog(DESTIN_LEIREC_COUNT)        -0.1069908  0.0006857  -156.04   &lt;2e-16 ***\nlog(DESTIN_RETAILS_COUNT)        0.0549610  0.0004463   123.16   &lt;2e-16 ***\nlog(DESTIN_MRT_EXIT_COUNT)       0.3696761  0.0006983   529.41   &lt;2e-16 ***\nlog(dist)                       -1.4622311  0.0004613 -3170.09   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance: 11214706  on 61588  degrees of freedom\nAIC: 11502401\n\nNumber of Fisher Scoring iterations: 6\n\n\nFrom the above results, I notice that all explanatory variables are statistically significant(p-value&lt; 0.05) and some variables show positive coefficient which is desirable for all variables except distance which should be inversely proportionate. The most influential variables are distance, destination mrt exit count, destination finserv count with -1.46 , 0.37 , and 0.33 respectively.\n\nORIGIN_HDB_DWELLING_UNIT, ORIGIN_ENTERTAINMENT_COUNT, ORIGIN_FINSERV_COUNT, ORIGIN_RETAILS_COUNT, ORIGIN_MRT_EXIT_COUNT\nDESTIN_SCHOOL_COUNT, DESTIN_HDB_DWELLING_UNIT, DESTIN_ENTERTAINMENT_COUNT, DESTIN_FINSERV_COUNT, DESTIN_RETAILS_COUNT, DESTIN_MRT_EXIT_COUNT\ndist (inversely)\n\nNext, I will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$MORNING_PEAK, uncSIM$fitted.values)\n\n[1] 0.3059525\n\n\nThe R-squared value of 0.31 indicates that 31% of the variability in the MORNING_PEAK dependent variable can be accounted for by the explanatory variables in the model.\nNext, I will run another model with only positive coefficient for origin and destination variables and negative coefficient for distance.\n\nuncSIM1 &lt;- glm(formula = MORNING_PEAK ~ \n                log(ORIGIN_HDB_DWELLING_UNIT) +\n                log(ORIGIN_ENTERTAINMENT_COUNT)+\n                log(ORIGIN_FINSERV_COUNT)+\n                log(ORIGIN_RETAILS_COUNT)+\n                log(ORIGIN_MRT_EXIT_COUNT)+\n                log(DESTIN_SCHOOL_COUNT)+\n                log(DESTIN_HDB_DWELLING_UNIT) +\n                log(DESTIN_ENTERTAINMENT_COUNT)+\n                log(DESTIN_FINSERV_COUNT)+\n                log(DESTIN_RETAILS_COUNT)+\n                log(DESTIN_MRT_EXIT_COUNT)+\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(uncSIM1, \"data/rds/uncSIM1.rds\")\n\n\nuncSIM1 &lt;- read_rds(\"data/rds/uncSIM1.rds\")\nsummary(uncSIM1)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ log(ORIGIN_HDB_DWELLING_UNIT) + \n    log(ORIGIN_ENTERTAINMENT_COUNT) + log(ORIGIN_FINSERV_COUNT) + \n    log(ORIGIN_RETAILS_COUNT) + log(ORIGIN_MRT_EXIT_COUNT) + \n    log(DESTIN_SCHOOL_COUNT) + log(DESTIN_HDB_DWELLING_UNIT) + \n    log(DESTIN_ENTERTAINMENT_COUNT) + log(DESTIN_FINSERV_COUNT) + \n    log(DESTIN_RETAILS_COUNT) + log(DESTIN_MRT_EXIT_COUNT) + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                                  Estimate Std. Error  z value Pr(&gt;|z|)    \n(Intercept)                     14.3501247  0.0037867  3789.61   &lt;2e-16 ***\nlog(ORIGIN_HDB_DWELLING_UNIT)    0.1083567  0.0001334   812.23   &lt;2e-16 ***\nlog(ORIGIN_ENTERTAINMENT_COUNT) -0.2634514  0.0012520  -210.43   &lt;2e-16 ***\nlog(ORIGIN_FINSERV_COUNT)        0.2378170  0.0006475   367.31   &lt;2e-16 ***\nlog(ORIGIN_RETAILS_COUNT)       -0.0302974  0.0003950   -76.69   &lt;2e-16 ***\nlog(ORIGIN_MRT_EXIT_COUNT)       0.2318132  0.0007060   328.37   &lt;2e-16 ***\nlog(DESTIN_SCHOOL_COUNT)         0.1370622  0.0012160   112.72   &lt;2e-16 ***\nlog(DESTIN_HDB_DWELLING_UNIT)    0.0872081  0.0001347   647.51   &lt;2e-16 ***\nlog(DESTIN_ENTERTAINMENT_COUNT) -0.2257577  0.0011544  -195.57   &lt;2e-16 ***\nlog(DESTIN_FINSERV_COUNT)        0.3248828  0.0006573   494.25   &lt;2e-16 ***\nlog(DESTIN_RETAILS_COUNT)       -0.0354779  0.0004046   -87.70   &lt;2e-16 ***\nlog(DESTIN_MRT_EXIT_COUNT)       0.3444931  0.0006876   501.01   &lt;2e-16 ***\nlog(dist)                       -1.4447947  0.0004599 -3141.41   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance: 11906138  on 61595  degrees of freedom\nAIC: 12193819\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nCalcRSquared(uncSIM1$data$MORNING_PEAK, uncSIM1$fitted.values)\n\n[1] 0.2465118\n\n\nFrom the above results, I notice that all explanatory variables are statistically significant(p-value&lt; 0.05) but some variables still show negative coefficient which is not desirable for all variables except distance. In view of this, I will run another model although the R-squared reduces. This reduction does not necessarily mean the model is performing worse, instead it reflects the trade-off between model simplicity and the ability to explain variance.\n\nuncSIM2 &lt;- glm(formula = MORNING_PEAK ~ \n                log(ORIGIN_HDB_DWELLING_UNIT) +\n                log(ORIGIN_FINSERV_COUNT)+\n                log(ORIGIN_MRT_EXIT_COUNT)+\n                log(DESTIN_SCHOOL_COUNT)+\n                log(DESTIN_HDB_DWELLING_UNIT) +\n                log(DESTIN_FINSERV_COUNT)+\n                log(DESTIN_MRT_EXIT_COUNT)+\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(uncSIM2, \"data/rds/uncSIM2.rds\")\n\n\nuncSIM2 &lt;- read_rds(\"data/rds/uncSIM2.rds\")\nsummary(uncSIM2)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ log(ORIGIN_HDB_DWELLING_UNIT) + \n    log(ORIGIN_FINSERV_COUNT) + log(ORIGIN_MRT_EXIT_COUNT) + \n    log(DESTIN_SCHOOL_COUNT) + log(DESTIN_HDB_DWELLING_UNIT) + \n    log(DESTIN_FINSERV_COUNT) + log(DESTIN_MRT_EXIT_COUNT) + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                                Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)                   14.2384876  0.0037315  3815.8   &lt;2e-16 ***\nlog(ORIGIN_HDB_DWELLING_UNIT)  0.1127902  0.0001321   853.5   &lt;2e-16 ***\nlog(ORIGIN_FINSERV_COUNT)      0.1676838  0.0004203   398.9   &lt;2e-16 ***\nlog(ORIGIN_MRT_EXIT_COUNT)     0.2075413  0.0006796   305.4   &lt;2e-16 ***\nlog(DESTIN_SCHOOL_COUNT)       0.1683334  0.0012116   138.9   &lt;2e-16 ***\nlog(DESTIN_HDB_DWELLING_UNIT)  0.0905424  0.0001332   679.6   &lt;2e-16 ***\nlog(DESTIN_FINSERV_COUNT)      0.2503174  0.0004283   584.5   &lt;2e-16 ***\nlog(DESTIN_MRT_EXIT_COUNT)     0.3240154  0.0006623   489.2   &lt;2e-16 ***\nlog(dist)                     -1.4407044  0.0004593 -3136.9   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance: 12032909  on 61599  degrees of freedom\nAIC: 12320582\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nCalcRSquared(uncSIM2$data$MORNING_PEAK, uncSIM2$fitted.values)\n\n[1] 0.2398473\n\n\nFrom the above results, I notice that all explanatory variables are statistically significant(p-value&lt; 0.05) but all coefficient are as desired although the Rsquared for uncSIM2 is lower as compared to uncSIM and uncSIM1.\nThe most influential variables are distance, destination mrt exit count, destination finserv count with -1.44 , 0.32 , and 0.25 respectively.\n\n\n14.6 Origin(Production) constrained SIM\nOrigin-constrained spatial interaction models focus on understanding the factors that influence the flow or movement of entities from specific starting points or origins to various destinations. These models emphasize the characteristics and constraints at the points of origin that shape the spatial interactions.\n\n\n\nOrigin Constrained\n\n\n\norcSIM &lt;- glm(formula = MORNING_PEAK ~ \n                ORIGIN_GRID_ID +\n                log(DESTIN_SCHOOL_COUNT) +\n                log(DESTIN_HDB_DWELLING_UNIT) +\n                log(DESTIN_FINSERV_COUNT)+\n                log(DESTIN_MRT_EXIT_COUNT)+\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(orcSIM, \"data/rds/orcSIM.rds\")\n\n\norcSIM &lt;- read_rds(\"data/rds/orcSIM.rds\")\nsummary(orcSIM)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ ORIGIN_GRID_ID + log(DESTIN_SCHOOL_COUNT) + \n    log(DESTIN_HDB_DWELLING_UNIT) + log(DESTIN_FINSERV_COUNT) + \n    log(DESTIN_MRT_EXIT_COUNT) + log(dist), family = poisson(link = \"log\"), \n    data = flow_data_tidy, na.action = na.exclude)\n\nCoefficients:\n                                Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)                   13.7052639  0.1961497    69.871  &lt; 2e-16 ***\nORIGIN_GRID_ID46               0.7936457  0.2151141     3.689 0.000225 ***\nORIGIN_GRID_ID66              -0.7609728  0.2933950    -2.594 0.009495 ** \nORIGIN_GRID_ID67               1.4750696  0.2007564     7.348 2.02e-13 ***\nORIGIN_GRID_ID68              -0.0485729  0.2463407    -0.197 0.843689    \nORIGIN_GRID_ID86               0.7966782  0.2093030     3.806 0.000141 ***\nORIGIN_GRID_ID87               2.2768843  0.2305812     9.875  &lt; 2e-16 ***\nORIGIN_GRID_ID88               2.4298735  0.1974499    12.306  &lt; 2e-16 ***\nORIGIN_GRID_ID89              -1.2123508  0.2659316    -4.559 5.14e-06 ***\nORIGIN_GRID_ID90               0.9213244  0.2203692     4.181 2.90e-05 ***\nORIGIN_GRID_ID109              1.2083398  0.2215851     5.453 4.95e-08 ***\nORIGIN_GRID_ID110              1.7308192  0.2108307     8.210 2.22e-16 ***\nORIGIN_GRID_ID111              3.4264148  0.1966146    17.427  &lt; 2e-16 ***\nORIGIN_GRID_ID112             -0.6015263  0.2559075    -2.351 0.018745 *  \nORIGIN_GRID_ID128              2.8259022  0.1983863    14.244  &lt; 2e-16 ***\nORIGIN_GRID_ID129              1.9282619  0.2659322     7.251 4.14e-13 ***\nORIGIN_GRID_ID130              0.6325043  0.2091711     3.024 0.002496 ** \nORIGIN_GRID_ID131              1.0675776  0.2037638     5.239 1.61e-07 ***\nORIGIN_GRID_ID132              0.0768907  0.2121262     0.362 0.716996    \nORIGIN_GRID_ID133              0.1772501  0.2063007     0.859 0.390240    \nORIGIN_GRID_ID134             -0.0087662  0.2164832    -0.040 0.967700    \nORIGIN_GRID_ID150              3.8182538  0.1981325    19.271  &lt; 2e-16 ***\nORIGIN_GRID_ID151              1.2623676  0.2112686     5.975 2.30e-09 ***\nORIGIN_GRID_ID152              0.8709572  0.2264554     3.846 0.000120 ***\nORIGIN_GRID_ID153              0.9753375  0.2018403     4.832 1.35e-06 ***\nORIGIN_GRID_ID154              1.7698920  0.1976731     8.954  &lt; 2e-16 ***\nORIGIN_GRID_ID155             -1.2983843  0.2223749    -5.839 5.26e-09 ***\nORIGIN_GRID_ID156              0.1180525  0.2136723     0.552 0.580610    \nORIGIN_GRID_ID172              1.7318896  0.2178775     7.949 1.88e-15 ***\nORIGIN_GRID_ID174             -0.0519518  0.2120264    -0.245 0.806437    \nORIGIN_GRID_ID175             -0.3120778  0.2071378    -1.507 0.131908    \nORIGIN_GRID_ID176              1.6084555  0.1973898     8.149 3.68e-16 ***\nORIGIN_GRID_ID195              0.7646770  0.2048669     3.733 0.000190 ***\nORIGIN_GRID_ID196              0.1246247  0.2022391     0.616 0.537746    \nORIGIN_GRID_ID197             -0.7049558  0.2605252    -2.706 0.006812 ** \nORIGIN_GRID_ID215              0.6738901  0.2053755     3.281 0.001033 ** \nORIGIN_GRID_ID216              0.5728179  0.1999708     2.865 0.004177 ** \nORIGIN_GRID_ID217              1.1317742  0.1986904     5.696 1.23e-08 ***\nORIGIN_GRID_ID237             -0.2395699  0.2394358    -1.001 0.317040    \nORIGIN_GRID_ID238             -0.0242764  0.2136726    -0.114 0.909543    \nORIGIN_GRID_ID239             -0.2373468  0.2507026    -0.947 0.343778    \nORIGIN_GRID_ID257              1.3740219  0.2011014     6.832 8.35e-12 ***\nORIGIN_GRID_ID258             -0.7848317  0.2146981    -3.656 0.000257 ***\nORIGIN_GRID_ID259              0.5514828  0.2029444     2.717 0.006580 ** \nORIGIN_GRID_ID278              2.4601063  0.1986621    12.383  &lt; 2e-16 ***\nORIGIN_GRID_ID279              0.9099471  0.2006574     4.535 5.77e-06 ***\nORIGIN_GRID_ID280              0.6772696  0.2016299     3.359 0.000782 ***\nORIGIN_GRID_ID298             -0.0696750  0.4043042    -0.172 0.863176    \nORIGIN_GRID_ID299              0.1822468  0.2093752     0.870 0.384065    \nORIGIN_GRID_ID300              0.0552525  0.2039520     0.271 0.786461    \nORIGIN_GRID_ID320              0.9568971  0.2034555     4.703 2.56e-06 ***\nORIGIN_GRID_ID321              1.2732357  0.2173330     5.858 4.67e-09 ***\nORIGIN_GRID_ID322              0.8218604  0.2123312     3.871 0.000109 ***\nORIGIN_GRID_ID340              2.3091735  0.1993416    11.584  &lt; 2e-16 ***\nORIGIN_GRID_ID341              0.9961969  0.2007821     4.962 6.99e-07 ***\nORIGIN_GRID_ID342              0.7200834  0.2034346     3.540 0.000401 ***\nORIGIN_GRID_ID363              1.7904745  0.2006175     8.925  &lt; 2e-16 ***\nORIGIN_GRID_ID364              0.8599221  0.2016427     4.265 2.00e-05 ***\nORIGIN_GRID_ID383              1.5075436  0.1990185     7.575 3.59e-14 ***\nORIGIN_GRID_ID384              0.3745281  0.2055472     1.822 0.068439 .  \nORIGIN_GRID_ID385             -0.7164341  0.2426319    -2.953 0.003149 ** \nORIGIN_GRID_ID404              1.7846295  0.2015478     8.855  &lt; 2e-16 ***\nORIGIN_GRID_ID405              1.8747975  0.2025483     9.256  &lt; 2e-16 ***\nORIGIN_GRID_ID406              2.3873375  0.1963785    12.157  &lt; 2e-16 ***\nORIGIN_GRID_ID407              1.4660429  0.1986487     7.380 1.58e-13 ***\nORIGIN_GRID_ID408              2.1568709  0.1969516    10.951  &lt; 2e-16 ***\nORIGIN_GRID_ID425             -0.5715313  0.2196945    -2.601 0.009282 ** \nORIGIN_GRID_ID426              0.8580590  0.2015712     4.257 2.07e-05 ***\nORIGIN_GRID_ID427              0.3500832  0.1989619     1.760 0.078484 .  \nORIGIN_GRID_ID428              1.6298997  0.1982101     8.223  &lt; 2e-16 ***\nORIGIN_GRID_ID429              1.4747211  0.1982840     7.437 1.03e-13 ***\nORIGIN_GRID_ID446              0.8651970  0.2053759     4.213 2.52e-05 ***\nORIGIN_GRID_ID447             -0.3928684  0.2132010    -1.843 0.065371 .  \nORIGIN_GRID_ID448              0.0263018  0.2028372     0.130 0.896828    \nORIGIN_GRID_ID449              1.9342166  0.1966238     9.837  &lt; 2e-16 ***\nORIGIN_GRID_ID450              1.2774575  0.1974849     6.469 9.89e-11 ***\nORIGIN_GRID_ID468              1.2598031  0.1993795     6.319 2.64e-10 ***\nORIGIN_GRID_ID469              0.0727527  0.1992034     0.365 0.714949    \nORIGIN_GRID_ID470              2.5388895  0.1963161    12.933  &lt; 2e-16 ***\nORIGIN_GRID_ID471              2.3759079  0.1969333    12.065  &lt; 2e-16 ***\nORIGIN_GRID_ID488              0.3416573  0.2101038     1.626 0.103921    \nORIGIN_GRID_ID489             -2.0677891  0.3314976    -6.238 4.44e-10 ***\nORIGIN_GRID_ID490              1.4698705  0.1973603     7.448 9.50e-14 ***\nORIGIN_GRID_ID491              1.3091133  0.1967555     6.654 2.86e-11 ***\nORIGIN_GRID_ID493             -1.7489508  0.2830709    -6.178 6.47e-10 ***\nORIGIN_GRID_ID494              1.6077164  0.1991653     8.072 6.90e-16 ***\nORIGIN_GRID_ID509              0.8108614  0.2019992     4.014 5.97e-05 ***\nORIGIN_GRID_ID510              1.5917007  0.1983572     8.024 1.02e-15 ***\nORIGIN_GRID_ID511              0.3096653  0.1980413     1.564 0.117902    \nORIGIN_GRID_ID512              2.8679087  0.1962271    14.615  &lt; 2e-16 ***\nORIGIN_GRID_ID513              0.0206063  0.2032713     0.101 0.919254    \nORIGIN_GRID_ID514              1.2450656  0.2014150     6.182 6.35e-10 ***\nORIGIN_GRID_ID515             -0.6054713  0.2235085    -2.709 0.006750 ** \nORIGIN_GRID_ID530              0.3295126  0.2109165     1.562 0.118220    \nORIGIN_GRID_ID531              0.7376662  0.1992857     3.702 0.000214 ***\nORIGIN_GRID_ID532              0.6013980  0.1983296     3.032 0.002427 ** \nORIGIN_GRID_ID533              2.7879770  0.1962229    14.208  &lt; 2e-16 ***\nORIGIN_GRID_ID534              2.9456519  0.1962518    15.010  &lt; 2e-16 ***\nORIGIN_GRID_ID536              0.5916957  0.2006742     2.949 0.003193 ** \nORIGIN_GRID_ID537             -0.5813725  0.2519175    -2.308 0.021011 *  \nORIGIN_GRID_ID538             -1.4937992  0.2862520    -5.218 1.80e-07 ***\nORIGIN_GRID_ID551             -0.2925535  0.2126463    -1.376 0.168891    \nORIGIN_GRID_ID552              0.9528746  0.2033331     4.686 2.78e-06 ***\nORIGIN_GRID_ID553              0.1478058  0.1980796     0.746 0.455550    \nORIGIN_GRID_ID554              2.4122445  0.1962686    12.291  &lt; 2e-16 ***\nORIGIN_GRID_ID555              1.9488220  0.1968897     9.898  &lt; 2e-16 ***\nORIGIN_GRID_ID559              0.8836760  0.2107492     4.193 2.75e-05 ***\nORIGIN_GRID_ID560              0.3449947  0.2163226     1.595 0.110753    \nORIGIN_GRID_ID572             -0.4486129  0.2463416    -1.821 0.068592 .  \nORIGIN_GRID_ID573              0.4780303  0.2019454     2.367 0.017927 *  \nORIGIN_GRID_ID574              1.4449154  0.2128636     6.788 1.14e-11 ***\nORIGIN_GRID_ID575              3.9629023  0.1961424    20.204  &lt; 2e-16 ***\nORIGIN_GRID_ID576              2.1184289  0.1963599    10.789  &lt; 2e-16 ***\nORIGIN_GRID_ID578             -1.8441479  0.2830710    -6.515 7.28e-11 ***\nORIGIN_GRID_ID582              0.3332514  0.2275885     1.464 0.143120    \nORIGIN_GRID_ID583              0.4637839  0.2331018     1.990 0.046633 *  \nORIGIN_GRID_ID584              1.5645942  0.2097335     7.460 8.66e-14 ***\nORIGIN_GRID_ID593             -0.6639184  0.2250719    -2.950 0.003180 ** \nORIGIN_GRID_ID594              0.8607307  0.2020410     4.260 2.04e-05 ***\nORIGIN_GRID_ID595              0.6978507  0.1974762     3.534 0.000410 ***\nORIGIN_GRID_ID596              1.9082149  0.1963184     9.720  &lt; 2e-16 ***\nORIGIN_GRID_ID597             -0.6827198  0.2186517    -3.122 0.001794 ** \nORIGIN_GRID_ID603             -0.1331496  0.2380011    -0.559 0.575855    \nORIGIN_GRID_ID604              0.0896676  0.2426344     0.370 0.711711    \nORIGIN_GRID_ID615             -0.5693680  0.2093075    -2.720 0.006523 ** \nORIGIN_GRID_ID616              0.3885537  0.1996966     1.946 0.051688 .  \nORIGIN_GRID_ID617             -0.2776459  0.1995117    -1.392 0.164035    \nORIGIN_GRID_ID618              2.5954461  0.1962432    13.226  &lt; 2e-16 ***\nORIGIN_GRID_ID620             -0.4711341  0.2107476    -2.236 0.025382 *  \nORIGIN_GRID_ID637             -0.1039207  0.2011035    -0.517 0.605329    \nORIGIN_GRID_ID638              2.3429294  0.1962449    11.939  &lt; 2e-16 ***\nORIGIN_GRID_ID657              0.8760707  0.1980959     4.422 9.76e-06 ***\nORIGIN_GRID_ID658              1.2663872  0.1966553     6.440 1.20e-10 ***\nORIGIN_GRID_ID659              1.7686557  0.1964016     9.005  &lt; 2e-16 ***\nORIGIN_GRID_ID660              3.1033849  0.1961791    15.819  &lt; 2e-16 ***\nORIGIN_GRID_ID662              3.0272521  0.1964466    15.410  &lt; 2e-16 ***\nORIGIN_GRID_ID677              1.3597464  0.1986655     6.844 7.68e-12 ***\nORIGIN_GRID_ID678             -0.7793633  0.2062213    -3.779 0.000157 ***\nORIGIN_GRID_ID679              2.6820756  0.1962309    13.668  &lt; 2e-16 ***\nORIGIN_GRID_ID680              2.7432103  0.1962124    13.981  &lt; 2e-16 ***\nORIGIN_GRID_ID681              1.2403263  0.1970750     6.294 3.10e-10 ***\nORIGIN_GRID_ID699              1.1343245  0.1979110     5.731 9.96e-09 ***\nORIGIN_GRID_ID700              2.0470535  0.1963798    10.424  &lt; 2e-16 ***\nORIGIN_GRID_ID701              1.4420341  0.1966015     7.335 2.22e-13 ***\nORIGIN_GRID_ID702              2.7328908  0.1962065    13.929  &lt; 2e-16 ***\nORIGIN_GRID_ID704              0.3036054  0.2009797     1.511 0.130884    \nORIGIN_GRID_ID722              0.1365260  0.1979054     0.690 0.490285    \nORIGIN_GRID_ID725              0.0236213  0.2011832     0.117 0.906534    \nORIGIN_GRID_ID730              0.3308075  0.2146980     1.541 0.123365    \nORIGIN_GRID_ID741              0.6294011  0.1985375     3.170 0.001523 ** \nORIGIN_GRID_ID743             -0.1576847  0.1979356    -0.797 0.425656    \nORIGIN_GRID_ID744              2.1434465  0.1962808    10.920  &lt; 2e-16 ***\nORIGIN_GRID_ID752              1.6551941  0.2002998     8.264  &lt; 2e-16 ***\nORIGIN_GRID_ID761              1.2897543  0.1983282     6.503 7.87e-11 ***\nORIGIN_GRID_ID762              1.9325315  0.1966037     9.830  &lt; 2e-16 ***\nORIGIN_GRID_ID763             -0.8061963  0.1999673    -4.032 5.54e-05 ***\nORIGIN_GRID_ID764              2.8136432  0.1961902    14.341  &lt; 2e-16 ***\nORIGIN_GRID_ID765              1.4250822  0.1968165     7.241 4.46e-13 ***\nORIGIN_GRID_ID767              2.8234014  0.1962719    14.385  &lt; 2e-16 ***\nORIGIN_GRID_ID772              1.2163391  0.1992276     6.105 1.03e-09 ***\nORIGIN_GRID_ID784             -0.8375538  0.2005644    -4.176 2.97e-05 ***\nORIGIN_GRID_ID785              1.7699479  0.1962989     9.017  &lt; 2e-16 ***\nORIGIN_GRID_ID786              1.1541979  0.1965061     5.874 4.26e-09 ***\nORIGIN_GRID_ID787              1.7364990  0.1966875     8.829  &lt; 2e-16 ***\nORIGIN_GRID_ID788              2.0376065  0.1964635    10.371  &lt; 2e-16 ***\nORIGIN_GRID_ID789              0.8730295  0.1972757     4.425 9.63e-06 ***\nORIGIN_GRID_ID803             -0.3430797  0.2068161    -1.659 0.097143 .  \nORIGIN_GRID_ID804              2.5977482  0.1963009    13.233  &lt; 2e-16 ***\nORIGIN_GRID_ID805              2.7173140  0.1961926    13.850  &lt; 2e-16 ***\nORIGIN_GRID_ID806              1.8503358  0.1962993     9.426  &lt; 2e-16 ***\nORIGIN_GRID_ID807              2.4083688  0.1963061    12.268  &lt; 2e-16 ***\nORIGIN_GRID_ID808              0.6987693  0.1979071     3.531 0.000414 ***\nORIGIN_GRID_ID809              2.5047944  0.1962284    12.765  &lt; 2e-16 ***\nORIGIN_GRID_ID810              1.8383148  0.1964369     9.358  &lt; 2e-16 ***\nORIGIN_GRID_ID814              0.8412791  0.1993499     4.220 2.44e-05 ***\nORIGIN_GRID_ID819              5.4805720  0.1971859    27.794  &lt; 2e-16 ***\nORIGIN_GRID_ID824              0.3985463  0.2011622     1.981 0.047567 *  \nORIGIN_GRID_ID826             -0.0483727  0.1976274    -0.245 0.806637    \nORIGIN_GRID_ID827              2.1410788  0.1962715    10.909  &lt; 2e-16 ***\nORIGIN_GRID_ID828              2.2801211  0.1962345    11.619  &lt; 2e-16 ***\nORIGIN_GRID_ID829              1.9889215  0.1963582    10.129  &lt; 2e-16 ***\nORIGIN_GRID_ID830              1.8226755  0.1964680     9.277  &lt; 2e-16 ***\nORIGIN_GRID_ID831              3.5129248  0.1961585    17.909  &lt; 2e-16 ***\nORIGIN_GRID_ID832              3.2447792  0.1962393    16.535  &lt; 2e-16 ***\nORIGIN_GRID_ID835             -0.6243826  0.2110906    -2.958 0.003098 ** \nORIGIN_GRID_ID844             -0.5655412  0.2158540    -2.620 0.008793 ** \nORIGIN_GRID_ID846              1.8191210  0.1963748     9.264  &lt; 2e-16 ***\nORIGIN_GRID_ID847              1.8279117  0.1963593     9.309  &lt; 2e-16 ***\nORIGIN_GRID_ID848              1.7137646  0.1963422     8.728  &lt; 2e-16 ***\nORIGIN_GRID_ID849              0.8020293  0.1967120     4.077 4.56e-05 ***\nORIGIN_GRID_ID850              2.0903785  0.1962998    10.649  &lt; 2e-16 ***\nORIGIN_GRID_ID851              2.1918358  0.1962576    11.168  &lt; 2e-16 ***\nORIGIN_GRID_ID852              1.6688193  0.1964291     8.496  &lt; 2e-16 ***\nORIGIN_GRID_ID853              3.2337284  0.1962519    16.477  &lt; 2e-16 ***\nORIGIN_GRID_ID854             -0.1608702  0.2062606    -0.780 0.435428    \nORIGIN_GRID_ID855             -0.7104226  0.2133167    -3.330 0.000867 ***\nORIGIN_GRID_ID856              1.3527738  0.1987629     6.806 1.00e-11 ***\nORIGIN_GRID_ID866              1.1183290  0.1983943     5.637 1.73e-08 ***\nORIGIN_GRID_ID867              1.0048226  0.1969447     5.102 3.36e-07 ***\nORIGIN_GRID_ID868              1.2051833  0.1968380     6.123 9.20e-10 ***\nORIGIN_GRID_ID869              2.2138387  0.1965507    11.263  &lt; 2e-16 ***\nORIGIN_GRID_ID870              2.9871467  0.1961723    15.227  &lt; 2e-16 ***\nORIGIN_GRID_ID871              2.8779060  0.1962951    14.661  &lt; 2e-16 ***\nORIGIN_GRID_ID872              0.3291890  0.1973136     1.668 0.095245 .  \nORIGIN_GRID_ID873              0.7391612  0.1969053     3.754 0.000174 ***\nORIGIN_GRID_ID874              0.7819061  0.1969562     3.970 7.19e-05 ***\nORIGIN_GRID_ID875             -0.8966651  0.2190566    -4.093 4.25e-05 ***\nORIGIN_GRID_ID876             -0.9381908  0.2126466    -4.412 1.02e-05 ***\nORIGIN_GRID_ID877              1.2412395  0.1982263     6.262 3.81e-10 ***\nORIGIN_GRID_ID887              0.5610469  0.1974785     2.841 0.004496 ** \nORIGIN_GRID_ID888              1.1566340  0.1966961     5.880 4.09e-09 ***\nORIGIN_GRID_ID889             -0.8109493  0.2032520    -3.990 6.61e-05 ***\nORIGIN_GRID_ID890              2.3241763  0.1962400    11.844  &lt; 2e-16 ***\nORIGIN_GRID_ID891              0.9258009  0.1973183     4.692 2.71e-06 ***\nORIGIN_GRID_ID893              2.3551052  0.1962339    12.002  &lt; 2e-16 ***\nORIGIN_GRID_ID894              0.0735916  0.1977475     0.372 0.709782    \nORIGIN_GRID_ID895              0.4880723  0.1980948     2.464 0.013746 *  \nORIGIN_GRID_ID896             -0.4929757  0.2053763    -2.400 0.016379 *  \nORIGIN_GRID_ID897             -0.6337752  0.2073327    -3.057 0.002237 ** \nORIGIN_GRID_ID898              0.6222113  0.2002865     3.107 0.001892 ** \nORIGIN_GRID_ID908              1.5205737  0.1978844     7.684 1.54e-14 ***\nORIGIN_GRID_ID909              1.5288524  0.1963905     7.785 6.98e-15 ***\nORIGIN_GRID_ID910             -1.1381538  0.2043325    -5.570 2.55e-08 ***\nORIGIN_GRID_ID911              1.5968803  0.1965091     8.126 4.43e-16 ***\nORIGIN_GRID_ID912              2.2621039  0.1962574    11.526  &lt; 2e-16 ***\nORIGIN_GRID_ID915              2.0208808  0.1962905    10.295  &lt; 2e-16 ***\nORIGIN_GRID_ID917              2.2968301  0.1964339    11.693  &lt; 2e-16 ***\nORIGIN_GRID_ID918             -0.0274234  0.2010540    -0.136 0.891506    \nORIGIN_GRID_ID919              0.8961066  0.1978425     4.529 5.92e-06 ***\nORIGIN_GRID_ID928              0.9495748  0.1974013     4.810 1.51e-06 ***\nORIGIN_GRID_ID929              1.7846779  0.1963216     9.091  &lt; 2e-16 ***\nORIGIN_GRID_ID930              2.8123016  0.1961754    14.336  &lt; 2e-16 ***\nORIGIN_GRID_ID931             -0.4978945  0.2005335    -2.483 0.013034 *  \nORIGIN_GRID_ID932              0.1077244  0.2006345     0.537 0.591324    \nORIGIN_GRID_ID933              1.8247970  0.1964661     9.288  &lt; 2e-16 ***\nORIGIN_GRID_ID934             -0.9632928  0.2014924    -4.781 1.75e-06 ***\nORIGIN_GRID_ID935              3.5110720  0.1961547    17.900  &lt; 2e-16 ***\nORIGIN_GRID_ID938             -1.0551548  0.2679464    -3.938 8.22e-05 ***\nORIGIN_GRID_ID939              3.3312924  0.1962214    16.977  &lt; 2e-16 ***\nORIGIN_GRID_ID940             -0.3728981  0.2310567    -1.614 0.106553    \nORIGIN_GRID_ID949              1.0968249  0.1970521     5.566 2.60e-08 ***\nORIGIN_GRID_ID950              2.9263400  0.1962312    14.913  &lt; 2e-16 ***\nORIGIN_GRID_ID951              3.2157073  0.1961624    16.393  &lt; 2e-16 ***\nORIGIN_GRID_ID952              0.5016132  0.1985869     2.526 0.011540 *  \nORIGIN_GRID_ID953              1.2482200  0.1970016     6.336 2.36e-10 ***\nORIGIN_GRID_ID954             -0.3134919  0.1988610    -1.576 0.114925    \nORIGIN_GRID_ID955              2.1684018  0.1963157    11.045  &lt; 2e-16 ***\nORIGIN_GRID_ID956              0.1241202  0.1974625     0.629 0.529627    \nORIGIN_GRID_ID957              2.1108851  0.1963493    10.751  &lt; 2e-16 ***\nORIGIN_GRID_ID959              0.1204560  0.2076888     0.580 0.561926    \nORIGIN_GRID_ID961             -0.4074120  0.2011530    -2.025 0.042828 *  \nORIGIN_GRID_ID962              8.4240700  0.1961749    42.942  &lt; 2e-16 ***\nORIGIN_GRID_ID970              1.3898712  0.1965163     7.073 1.52e-12 ***\nORIGIN_GRID_ID971              2.0476591  0.1962392    10.435  &lt; 2e-16 ***\nORIGIN_GRID_ID972              1.8389481  0.1963102     9.368  &lt; 2e-16 ***\nORIGIN_GRID_ID974              1.3659085  0.1966279     6.947 3.74e-12 ***\nORIGIN_GRID_ID975              0.7573099  0.1970846     3.843 0.000122 ***\nORIGIN_GRID_ID976              0.6915144  0.1970788     3.509 0.000450 ***\nORIGIN_GRID_ID977              2.3902181  0.1962369    12.180  &lt; 2e-16 ***\nORIGIN_GRID_ID978              1.9783132  0.1965545    10.065  &lt; 2e-16 ***\nORIGIN_GRID_ID982             -0.1375747  0.1989470    -0.692 0.489242    \nORIGIN_GRID_ID983              4.1207786  0.1962286    21.000  &lt; 2e-16 ***\nORIGIN_GRID_ID984              5.7199583  0.1961974    29.154  &lt; 2e-16 ***\nORIGIN_GRID_ID991              1.5229788  0.1965451     7.749 9.28e-15 ***\nORIGIN_GRID_ID992              1.6137465  0.1964157     8.216  &lt; 2e-16 ***\nORIGIN_GRID_ID993              0.7527292  0.1966763     3.827 0.000130 ***\nORIGIN_GRID_ID994              0.5723198  0.1969696     2.906 0.003665 ** \nORIGIN_GRID_ID995              2.3432421  0.1962800    11.938  &lt; 2e-16 ***\nORIGIN_GRID_ID996              1.2537646  0.1967030     6.374 1.84e-10 ***\nORIGIN_GRID_ID997              0.4840917  0.2009149     2.409 0.015977 *  \nORIGIN_GRID_ID998              2.5459523  0.1962516    12.973  &lt; 2e-16 ***\nORIGIN_GRID_ID999              2.4303429  0.1963591    12.377  &lt; 2e-16 ***\nORIGIN_GRID_ID1001             0.3876107  0.2019192     1.920 0.054904 .  \nORIGIN_GRID_ID1003             2.9546786  0.1962257    15.058  &lt; 2e-16 ***\nORIGIN_GRID_ID1004             3.1362685  0.1962225    15.983  &lt; 2e-16 ***\nORIGIN_GRID_ID1011             0.4651663  0.1995106     2.332 0.019725 *  \nORIGIN_GRID_ID1012             0.9471824  0.1975461     4.795 1.63e-06 ***\nORIGIN_GRID_ID1013             0.5173291  0.1970956     2.625 0.008671 ** \nORIGIN_GRID_ID1014             0.6170956  0.1969511     3.133 0.001729 ** \nORIGIN_GRID_ID1015             0.0722020  0.1978636     0.365 0.715180    \nORIGIN_GRID_ID1016             2.1786164  0.1963031    11.098  &lt; 2e-16 ***\nORIGIN_GRID_ID1018             1.5043229  0.1971168     7.632 2.32e-14 ***\nORIGIN_GRID_ID1019             3.0705795  0.1962601    15.645  &lt; 2e-16 ***\nORIGIN_GRID_ID1023             1.2930377  0.1970261     6.563 5.28e-11 ***\nORIGIN_GRID_ID1024             2.5453821  0.1963006    12.967  &lt; 2e-16 ***\nORIGIN_GRID_ID1025            -0.3347263  0.2046067    -1.636 0.101850    \nORIGIN_GRID_ID1033             1.0008564  0.1968487     5.084 3.69e-07 ***\nORIGIN_GRID_ID1034             1.3981183  0.1964635     7.116 1.11e-12 ***\nORIGIN_GRID_ID1035             1.5831734  0.1963915     8.061 7.55e-16 ***\nORIGIN_GRID_ID1036             1.7565601  0.1963979     8.944  &lt; 2e-16 ***\nORIGIN_GRID_ID1037             1.7427752  0.1963535     8.876  &lt; 2e-16 ***\nORIGIN_GRID_ID1043             1.9744516  0.1971685    10.014  &lt; 2e-16 ***\nORIGIN_GRID_ID1045             2.5210353  0.1962487    12.846  &lt; 2e-16 ***\nORIGIN_GRID_ID1046             2.5193129  0.1963307    12.832  &lt; 2e-16 ***\nORIGIN_GRID_ID1053             1.4015561  0.1965504     7.131 9.98e-13 ***\nORIGIN_GRID_ID1054             0.6103616  0.1969167     3.100 0.001938 ** \nORIGIN_GRID_ID1055             1.7744988  0.1963324     9.038  &lt; 2e-16 ***\nORIGIN_GRID_ID1056             0.9729741  0.1967038     4.946 7.56e-07 ***\nORIGIN_GRID_ID1064            -0.4739584  0.2659326    -1.782 0.074709 .  \nORIGIN_GRID_ID1066             2.7015162  0.1962351    13.767  &lt; 2e-16 ***\nORIGIN_GRID_ID1067            -2.4630631  0.2605263    -9.454  &lt; 2e-16 ***\nORIGIN_GRID_ID1074             1.3947247  0.1965951     7.094 1.30e-12 ***\nORIGIN_GRID_ID1075            -0.4038723  0.1992483    -2.027 0.042664 *  \nORIGIN_GRID_ID1076             0.6619419  0.1966817     3.366 0.000764 ***\nORIGIN_GRID_ID1077             0.5914987  0.1969996     3.003 0.002677 ** \nORIGIN_GRID_ID1079             1.7315035  0.1963914     8.817  &lt; 2e-16 ***\nORIGIN_GRID_ID1085            -0.5456760  0.2221066    -2.457 0.014017 *  \nORIGIN_GRID_ID1087             1.7683493  0.1964682     9.001  &lt; 2e-16 ***\nORIGIN_GRID_ID1088             0.6320636  0.1974756     3.201 0.001371 ** \nORIGIN_GRID_ID1094            -0.2950632  0.2127549    -1.387 0.165482    \nORIGIN_GRID_ID1095            -0.2073035  0.2032710    -1.020 0.307805    \nORIGIN_GRID_ID1096            -0.4419893  0.2026333    -2.181 0.029167 *  \nORIGIN_GRID_ID1097             2.2102167  0.1962242    11.264  &lt; 2e-16 ***\nORIGIN_GRID_ID1098            -0.1271885  0.1986414    -0.640 0.521983    \nORIGIN_GRID_ID1099             1.4800346  0.1964502     7.534 4.92e-14 ***\nORIGIN_GRID_ID1105             2.5719687  0.1970423    13.053  &lt; 2e-16 ***\nORIGIN_GRID_ID1106            -1.3859617  0.2453587    -5.649 1.62e-08 ***\nORIGIN_GRID_ID1107             0.3967897  0.1997862     1.986 0.047025 *  \nORIGIN_GRID_ID1108             3.9473866  0.1961442    20.125  &lt; 2e-16 ***\nORIGIN_GRID_ID1109            -0.1467699  0.2015960    -0.728 0.466589    \nORIGIN_GRID_ID1116             0.6856825  0.1970971     3.479 0.000503 ***\nORIGIN_GRID_ID1117             0.2239675  0.1975336     1.134 0.256870    \nORIGIN_GRID_ID1118            -0.6910266  0.1993488    -3.466 0.000527 ***\nORIGIN_GRID_ID1119             0.9290988  0.1965655     4.727 2.28e-06 ***\nORIGIN_GRID_ID1120             0.5011065  0.1974994     2.537 0.011173 *  \nORIGIN_GRID_ID1129             2.3441083  0.1963251    11.940  &lt; 2e-16 ***\nORIGIN_GRID_ID1130             2.4485151  0.1962751    12.475  &lt; 2e-16 ***\nORIGIN_GRID_ID1131             1.8366740  0.1971403     9.317  &lt; 2e-16 ***\nORIGIN_GRID_ID1136             0.3610869  0.1974181     1.829 0.067393 .  \nORIGIN_GRID_ID1138            -0.5622073  0.2004588    -2.805 0.005038 ** \nORIGIN_GRID_ID1139             1.6410506  0.1963039     8.360  &lt; 2e-16 ***\nORIGIN_GRID_ID1141             1.4275327  0.1964851     7.265 3.72e-13 ***\nORIGIN_GRID_ID1148            -0.0727201  0.2072835    -0.351 0.725720    \nORIGIN_GRID_ID1149             1.1660521  0.1974327     5.906 3.50e-09 ***\nORIGIN_GRID_ID1150             2.4072498  0.1962502    12.266  &lt; 2e-16 ***\nORIGIN_GRID_ID1151             1.7207982  0.1965557     8.755  &lt; 2e-16 ***\nORIGIN_GRID_ID1158             0.2734760  0.1971787     1.387 0.165459    \nORIGIN_GRID_ID1159             1.2288151  0.1963980     6.257 3.93e-10 ***\nORIGIN_GRID_ID1160             2.0740656  0.1962278    10.570  &lt; 2e-16 ***\nORIGIN_GRID_ID1171             2.6565894  0.1962674    13.536  &lt; 2e-16 ***\nORIGIN_GRID_ID1172             2.8924138  0.1962207    14.741  &lt; 2e-16 ***\nORIGIN_GRID_ID1173             0.9441775  0.1974401     4.782 1.73e-06 ***\nORIGIN_GRID_ID1174            -1.5457065  0.3177450    -4.865 1.15e-06 ***\nORIGIN_GRID_ID1178             1.0498015  0.1965614     5.341 9.25e-08 ***\nORIGIN_GRID_ID1179             1.4400178  0.1963518     7.334 2.24e-13 ***\nORIGIN_GRID_ID1180             2.0316699  0.1962312    10.353  &lt; 2e-16 ***\nORIGIN_GRID_ID1181             0.9972669  0.1964605     5.076 3.85e-07 ***\nORIGIN_GRID_ID1183             0.5843471  0.1970869     2.965 0.003028 ** \nORIGIN_GRID_ID1190            -0.3931651  0.2086575    -1.884 0.059530 .  \nORIGIN_GRID_ID1192             2.3440941  0.1963671    11.937  &lt; 2e-16 ***\nORIGIN_GRID_ID1193             1.9709863  0.1964190    10.035  &lt; 2e-16 ***\nORIGIN_GRID_ID1194             1.0555531  0.1976447     5.341 9.26e-08 ***\nORIGIN_GRID_ID1200             0.9561173  0.1966021     4.863 1.15e-06 ***\nORIGIN_GRID_ID1201             1.4966341  0.1963547     7.622 2.50e-14 ***\nORIGIN_GRID_ID1203             1.5963592  0.1963680     8.129 4.31e-16 ***\nORIGIN_GRID_ID1204             0.6776216  0.1968929     3.442 0.000578 ***\nORIGIN_GRID_ID1211             1.0935183  0.2014909     5.427 5.73e-08 ***\nORIGIN_GRID_ID1214             2.3418979  0.1963023    11.930  &lt; 2e-16 ***\nORIGIN_GRID_ID1215             0.1628229  0.2042035     0.797 0.425244    \nORIGIN_GRID_ID1216             0.6441222  0.2002072     3.217 0.001294 ** \nORIGIN_GRID_ID1220             1.8351975  0.1963021     9.349  &lt; 2e-16 ***\nORIGIN_GRID_ID1221             1.6213919  0.1962847     8.260  &lt; 2e-16 ***\nORIGIN_GRID_ID1222             1.1805934  0.1969477     5.994 2.04e-09 ***\nORIGIN_GRID_ID1223             0.4796497  0.1969784     2.435 0.014890 *  \nORIGIN_GRID_ID1224             0.8032342  0.1967323     4.083 4.45e-05 ***\nORIGIN_GRID_ID1231             0.0249028  0.2069970     0.120 0.904241    \nORIGIN_GRID_ID1232             0.7407810  0.2045503     3.622 0.000293 ***\nORIGIN_GRID_ID1235             0.3020795  0.1976732     1.528 0.126469    \nORIGIN_GRID_ID1236             1.3186798  0.1971391     6.689 2.25e-11 ***\nORIGIN_GRID_ID1241             0.7988557  0.1967022     4.061 4.88e-05 ***\nORIGIN_GRID_ID1242             0.9735436  0.1965150     4.954 7.27e-07 ***\nORIGIN_GRID_ID1243             1.6345206  0.1962811     8.327  &lt; 2e-16 ***\nORIGIN_GRID_ID1246             1.3710592  0.1964369     6.980 2.96e-12 ***\nORIGIN_GRID_ID1256             1.1636656  0.1967852     5.913 3.35e-09 ***\nORIGIN_GRID_ID1257             2.3155931  0.1964123    11.789  &lt; 2e-16 ***\nORIGIN_GRID_ID1258             1.4545667  0.1971155     7.379 1.59e-13 ***\nORIGIN_GRID_ID1262             0.5020729  0.1968704     2.550 0.010764 *  \nORIGIN_GRID_ID1263             1.9481893  0.1962296     9.928  &lt; 2e-16 ***\nORIGIN_GRID_ID1264             0.7639228  0.1967501     3.883 0.000103 ***\nORIGIN_GRID_ID1265             0.7750494  0.1967489     3.939 8.17e-05 ***\nORIGIN_GRID_ID1266             1.2228192  0.1965904     6.220 4.97e-10 ***\nORIGIN_GRID_ID1267             0.7888286  0.1975677     3.993 6.53e-05 ***\nORIGIN_GRID_ID1272            -1.4101419  0.2247446    -6.274 3.51e-10 ***\nORIGIN_GRID_ID1273             1.0480524  0.1972465     5.313 1.08e-07 ***\nORIGIN_GRID_ID1277             2.4922928  0.1962645    12.699  &lt; 2e-16 ***\nORIGIN_GRID_ID1278             0.9912411  0.1971129     5.029 4.94e-07 ***\nORIGIN_GRID_ID1283             2.6952276  0.1961955    13.737  &lt; 2e-16 ***\nORIGIN_GRID_ID1284             1.6758639  0.1962816     8.538  &lt; 2e-16 ***\nORIGIN_GRID_ID1285             2.2562440  0.1962061    11.499  &lt; 2e-16 ***\nORIGIN_GRID_ID1286             0.9457494  0.1967492     4.807 1.53e-06 ***\nORIGIN_GRID_ID1289             0.0011930  0.2001426     0.006 0.995244    \nORIGIN_GRID_ID1293            -0.2942408  0.2101048    -1.400 0.161379    \nORIGIN_GRID_ID1294             1.9896986  0.1965798    10.122  &lt; 2e-16 ***\nORIGIN_GRID_ID1295             0.7070552  0.1977861     3.575 0.000350 ***\nORIGIN_GRID_ID1298             1.1948758  0.1966385     6.077 1.23e-09 ***\nORIGIN_GRID_ID1299             2.0630464  0.1964769    10.500  &lt; 2e-16 ***\nORIGIN_GRID_ID1304             2.0551319  0.1962533    10.472  &lt; 2e-16 ***\nORIGIN_GRID_ID1305             1.6935394  0.1962397     8.630  &lt; 2e-16 ***\nORIGIN_GRID_ID1307            -0.7302734  0.2000692    -3.650 0.000262 ***\nORIGIN_GRID_ID1308             1.4656724  0.1964129     7.462 8.51e-14 ***\nORIGIN_GRID_ID1310            -1.3839593  0.2257481    -6.131 8.76e-10 ***\nORIGIN_GRID_ID1316            -0.6611436  0.2018811    -3.275 0.001057 ** \nORIGIN_GRID_ID1317             0.2836091  0.1976451     1.435 0.151304    \nORIGIN_GRID_ID1318            -0.4924373  0.1997850    -2.465 0.013708 *  \nORIGIN_GRID_ID1319             2.9147601  0.1962165    14.855  &lt; 2e-16 ***\nORIGIN_GRID_ID1320             1.4671315  0.1969386     7.450 9.36e-14 ***\nORIGIN_GRID_ID1325            -0.1652717  0.1976350    -0.836 0.403016    \nORIGIN_GRID_ID1326             1.5886960  0.1962705     8.094 5.75e-16 ***\nORIGIN_GRID_ID1327             1.4610715  0.1962812     7.444 9.79e-14 ***\nORIGIN_GRID_ID1328             0.9145296  0.1964738     4.655 3.24e-06 ***\nORIGIN_GRID_ID1329             1.2766567  0.1966772     6.491 8.52e-11 ***\nORIGIN_GRID_ID1330             0.8989530  0.1970009     4.563 5.04e-06 ***\nORIGIN_GRID_ID1331            -2.2011273  0.2700829    -8.150 3.64e-16 ***\nORIGIN_GRID_ID1333             0.4455035  0.1972590     2.258 0.023916 *  \nORIGIN_GRID_ID1334             0.9129079  0.1970499     4.633 3.61e-06 ***\nORIGIN_GRID_ID1335             1.0777163  0.1970800     5.468 4.54e-08 ***\nORIGIN_GRID_ID1336            -0.9259203  0.2264572    -4.089 4.34e-05 ***\nORIGIN_GRID_ID1337            -1.1084544  0.2062623    -5.374 7.70e-08 ***\nORIGIN_GRID_ID1338            -1.9661736  0.2135546    -9.207  &lt; 2e-16 ***\nORIGIN_GRID_ID1339             3.0535229  0.1961869    15.564  &lt; 2e-16 ***\nORIGIN_GRID_ID1340             1.8796729  0.1964427     9.569  &lt; 2e-16 ***\nORIGIN_GRID_ID1341            -2.8827561  0.7338003    -3.929 8.55e-05 ***\nORIGIN_GRID_ID1346             1.5685446  0.1963841     7.987 1.38e-15 ***\nORIGIN_GRID_ID1347             2.4875023  0.1961831    12.679  &lt; 2e-16 ***\nORIGIN_GRID_ID1348             1.3057063  0.1962860     6.652 2.89e-11 ***\nORIGIN_GRID_ID1349             1.8558884  0.1962634     9.456  &lt; 2e-16 ***\nORIGIN_GRID_ID1350             0.5946801  0.1973199     3.014 0.002580 ** \nORIGIN_GRID_ID1353             0.9745954  0.1966181     4.957 7.17e-07 ***\nORIGIN_GRID_ID1354             0.1657885  0.1975083     0.839 0.401245    \nORIGIN_GRID_ID1355             1.1639915  0.1966821     5.918 3.26e-09 ***\nORIGIN_GRID_ID1357            -0.3820535  0.2013598    -1.897 0.057779 .  \nORIGIN_GRID_ID1358             1.4064267  0.1965363     7.156 8.30e-13 ***\nORIGIN_GRID_ID1359             1.7015630  0.1963786     8.665  &lt; 2e-16 ***\nORIGIN_GRID_ID1360             1.6534543  0.1964308     8.417  &lt; 2e-16 ***\nORIGIN_GRID_ID1361             2.6142488  0.1962998    13.318  &lt; 2e-16 ***\nORIGIN_GRID_ID1362            -0.6649948  0.2139193    -3.109 0.001880 ** \nORIGIN_GRID_ID1368             0.4139657  0.1965477     2.106 0.035188 *  \nORIGIN_GRID_ID1369             0.0973074  0.1966888     0.495 0.620792    \nORIGIN_GRID_ID1370             2.3398023  0.1961828    11.927  &lt; 2e-16 ***\nORIGIN_GRID_ID1371             0.9544653  0.1967621     4.851 1.23e-06 ***\nORIGIN_GRID_ID1372            -0.3136056  0.1984080    -1.581 0.113967    \nORIGIN_GRID_ID1373            -1.0167336  0.2046348    -4.969 6.75e-07 ***\nORIGIN_GRID_ID1374             0.1404524  0.1970881     0.713 0.476070    \nORIGIN_GRID_ID1375             1.3249870  0.1966438     6.738 1.61e-11 ***\nORIGIN_GRID_ID1376             0.5787242  0.1975129     2.930 0.003389 ** \nORIGIN_GRID_ID1379            -0.8990987  0.2058746    -4.367 1.26e-05 ***\nORIGIN_GRID_ID1380             2.8796047  0.1961857    14.678  &lt; 2e-16 ***\nORIGIN_GRID_ID1381             2.7659303  0.1962008    14.097  &lt; 2e-16 ***\nORIGIN_GRID_ID1382             2.0868181  0.1964207    10.624  &lt; 2e-16 ***\nORIGIN_GRID_ID1383            -0.0841941  0.2006756    -0.420 0.674812    \nORIGIN_GRID_ID1388             0.7926849  0.1964360     4.035 5.45e-05 ***\nORIGIN_GRID_ID1389             0.3085730  0.1965070     1.570 0.116348    \nORIGIN_GRID_ID1390             1.0436073  0.1963443     5.315 1.07e-07 ***\nORIGIN_GRID_ID1391             1.0400889  0.1964251     5.295 1.19e-07 ***\nORIGIN_GRID_ID1392             0.7185455  0.1972713     3.642 0.000270 ***\nORIGIN_GRID_ID1393            -0.6413601  0.1983155    -3.234 0.001221 ** \nORIGIN_GRID_ID1394             1.2691689  0.1963811     6.463 1.03e-10 ***\nORIGIN_GRID_ID1395             1.3035737  0.1963767     6.638 3.18e-11 ***\nORIGIN_GRID_ID1396             1.9145033  0.1962990     9.753  &lt; 2e-16 ***\nORIGIN_GRID_ID1397             1.5649358  0.1964324     7.967 1.63e-15 ***\nORIGIN_GRID_ID1398             0.7446893  0.1974536     3.771 0.000162 ***\nORIGIN_GRID_ID1400             1.3442792  0.1967724     6.832 8.39e-12 ***\nORIGIN_GRID_ID1401             2.2267683  0.1962388    11.347  &lt; 2e-16 ***\nORIGIN_GRID_ID1402             2.4413817  0.1962610    12.439  &lt; 2e-16 ***\nORIGIN_GRID_ID1404             2.5966427  0.1972446    13.165  &lt; 2e-16 ***\nORIGIN_GRID_ID1410             0.5254683  0.1964306     2.675 0.007471 ** \nORIGIN_GRID_ID1411             0.4939236  0.1964722     2.514 0.011938 *  \nORIGIN_GRID_ID1412             1.9771910  0.1961962    10.078  &lt; 2e-16 ***\nORIGIN_GRID_ID1413             1.7225282  0.1962651     8.777  &lt; 2e-16 ***\nORIGIN_GRID_ID1414             0.9485680  0.1964264     4.829 1.37e-06 ***\nORIGIN_GRID_ID1415             0.6658233  0.1966370     3.386 0.000709 ***\nORIGIN_GRID_ID1416             0.7797282  0.1966037     3.966 7.31e-05 ***\nORIGIN_GRID_ID1417             1.2190908  0.1963840     6.208 5.38e-10 ***\nORIGIN_GRID_ID1418             1.7669379  0.1963101     9.001  &lt; 2e-16 ***\nORIGIN_GRID_ID1419             1.1524774  0.1965828     5.863 4.56e-09 ***\nORIGIN_GRID_ID1422             1.9379377  0.1963983     9.867  &lt; 2e-16 ***\nORIGIN_GRID_ID1423             2.9085023  0.1962192    14.823  &lt; 2e-16 ***\nORIGIN_GRID_ID1430             1.0203816  0.1963520     5.197 2.03e-07 ***\nORIGIN_GRID_ID1431             2.2370907  0.1961682    11.404  &lt; 2e-16 ***\nORIGIN_GRID_ID1432             1.5633320  0.1962188     7.967 1.62e-15 ***\nORIGIN_GRID_ID1433            -0.0286372  0.1975663    -0.145 0.884750    \nORIGIN_GRID_ID1434             1.9179093  0.1962361     9.773  &lt; 2e-16 ***\nORIGIN_GRID_ID1435             1.5465682  0.1962806     7.879 3.29e-15 ***\nORIGIN_GRID_ID1436            -0.6872197  0.1988853    -3.455 0.000550 ***\nORIGIN_GRID_ID1437             1.9665932  0.1962582    10.020  &lt; 2e-16 ***\nORIGIN_GRID_ID1438             2.0860874  0.1962125    10.632  &lt; 2e-16 ***\nORIGIN_GRID_ID1439             2.2455995  0.1962324    11.444  &lt; 2e-16 ***\nORIGIN_GRID_ID1440            -0.1559724  0.1987214    -0.785 0.432524    \nORIGIN_GRID_ID1442             1.4026262  0.1967206     7.130 1.00e-12 ***\nORIGIN_GRID_ID1443             2.6298973  0.1962510    13.401  &lt; 2e-16 ***\nORIGIN_GRID_ID1444             2.2101152  0.1965153    11.247  &lt; 2e-16 ***\nORIGIN_GRID_ID1452             0.9669993  0.1963139     4.926 8.40e-07 ***\nORIGIN_GRID_ID1453             1.1319191  0.1962920     5.767 8.09e-09 ***\nORIGIN_GRID_ID1454             0.5612014  0.1967381     2.853 0.004337 ** \nORIGIN_GRID_ID1455             0.7059898  0.1965645     3.592 0.000329 ***\nORIGIN_GRID_ID1456             1.7378105  0.1962763     8.854  &lt; 2e-16 ***\nORIGIN_GRID_ID1457             1.9769140  0.1962525    10.073  &lt; 2e-16 ***\nORIGIN_GRID_ID1458             2.6556218  0.1961772    13.537  &lt; 2e-16 ***\nORIGIN_GRID_ID1459             1.5716327  0.1963004     8.006 1.18e-15 ***\nORIGIN_GRID_ID1460             1.4650501  0.1963241     7.462 8.50e-14 ***\nORIGIN_GRID_ID1461             0.3225925  0.1974990     1.633 0.102387    \nORIGIN_GRID_ID1464             2.6444377  0.1962655    13.474  &lt; 2e-16 ***\nORIGIN_GRID_ID1465             2.3629513  0.1963817    12.032  &lt; 2e-16 ***\nORIGIN_GRID_ID1472            -0.8840065  0.1978114    -4.469 7.86e-06 ***\nORIGIN_GRID_ID1473             0.2081551  0.1965277     1.059 0.289525    \nORIGIN_GRID_ID1474             1.8201484  0.1961916     9.277  &lt; 2e-16 ***\nORIGIN_GRID_ID1475             2.3701102  0.1961803    12.081  &lt; 2e-16 ***\nORIGIN_GRID_ID1476             1.2893729  0.1963883     6.565 5.19e-11 ***\nORIGIN_GRID_ID1477             3.0284874  0.1961496    15.440  &lt; 2e-16 ***\nORIGIN_GRID_ID1478             0.8219424  0.1964941     4.183 2.88e-05 ***\nORIGIN_GRID_ID1479             1.0654392  0.1964179     5.424 5.82e-08 ***\nORIGIN_GRID_ID1480             3.1497151  0.1961524    16.057  &lt; 2e-16 ***\nORIGIN_GRID_ID1481             0.1707924  0.1972485     0.866 0.386559    \nORIGIN_GRID_ID1482             0.3308107  0.1978835     1.672 0.094575 .  \nORIGIN_GRID_ID1485             2.2711410  0.1964092    11.563  &lt; 2e-16 ***\nORIGIN_GRID_ID1494            -0.1070788  0.1971615    -0.543 0.587060    \nORIGIN_GRID_ID1495             0.8504520  0.1963191     4.332 1.48e-05 ***\nORIGIN_GRID_ID1496             2.2818008  0.1961654    11.632  &lt; 2e-16 ***\nORIGIN_GRID_ID1497             1.8368912  0.1962514     9.360  &lt; 2e-16 ***\nORIGIN_GRID_ID1498             1.8631246  0.1962437     9.494  &lt; 2e-16 ***\nORIGIN_GRID_ID1499             2.0768919  0.1962190    10.585  &lt; 2e-16 ***\nORIGIN_GRID_ID1500             1.9286218  0.1963726     9.821  &lt; 2e-16 ***\nORIGIN_GRID_ID1501             2.2078050  0.1962111    11.252  &lt; 2e-16 ***\nORIGIN_GRID_ID1502             1.7050875  0.1963062     8.686  &lt; 2e-16 ***\nORIGIN_GRID_ID1506            -1.9752022  0.2545163    -7.761 8.45e-15 ***\nORIGIN_GRID_ID1514            -4.5735333  1.0190501    -4.488 7.19e-06 ***\nORIGIN_GRID_ID1515             0.1669724  0.1971645     0.847 0.397068    \nORIGIN_GRID_ID1516             1.7283588  0.1962096     8.809  &lt; 2e-16 ***\nORIGIN_GRID_ID1517             1.2561879  0.1963108     6.399 1.56e-10 ***\nORIGIN_GRID_ID1518             1.1464210  0.1964335     5.836 5.34e-09 ***\nORIGIN_GRID_ID1519             2.0491372  0.1963360    10.437  &lt; 2e-16 ***\nORIGIN_GRID_ID1520             0.7291625  0.1965832     3.709 0.000208 ***\nORIGIN_GRID_ID1521            -0.4529381  0.1980455    -2.287 0.022193 *  \nORIGIN_GRID_ID1522             2.2740027  0.1962212    11.589  &lt; 2e-16 ***\nORIGIN_GRID_ID1523             1.2065786  0.1975764     6.107 1.02e-09 ***\nORIGIN_GRID_ID1524             1.0229146  0.1970004     5.192 2.08e-07 ***\nORIGIN_GRID_ID1527             0.3731328  0.1998711     1.867 0.061920 .  \nORIGIN_GRID_ID1535             0.7402744  0.1982885     3.733 0.000189 ***\nORIGIN_GRID_ID1536             0.2573982  0.1971679     1.305 0.191730    \nORIGIN_GRID_ID1537             0.5823928  0.1964846     2.964 0.003036 ** \nORIGIN_GRID_ID1538             1.3858899  0.1962446     7.062 1.64e-12 ***\nORIGIN_GRID_ID1539             1.4377502  0.1962545     7.326 2.37e-13 ***\nORIGIN_GRID_ID1540             1.5774206  0.1962828     8.036 9.25e-16 ***\nORIGIN_GRID_ID1541             2.7312704  0.1963286    13.912  &lt; 2e-16 ***\nORIGIN_GRID_ID1542             0.1696223  0.1977382     0.858 0.390996    \nORIGIN_GRID_ID1543             0.6123938  0.1996773     3.067 0.002163 ** \nORIGIN_GRID_ID1544             1.5625839  0.1965084     7.952 1.84e-15 ***\nORIGIN_GRID_ID1547            -0.5289436  0.2085971    -2.536 0.011222 *  \nORIGIN_GRID_ID1556            -0.3607187  0.2037451    -1.770 0.076654 .  \nORIGIN_GRID_ID1557             0.4140366  0.1970927     2.101 0.035666 *  \nORIGIN_GRID_ID1558            -0.5773793  0.1986735    -2.906 0.003659 ** \nORIGIN_GRID_ID1559             1.7279542  0.1962160     8.806  &lt; 2e-16 ***\nORIGIN_GRID_ID1560             2.1230940  0.1962035    10.821  &lt; 2e-16 ***\nORIGIN_GRID_ID1561             1.8651092  0.1963519     9.499  &lt; 2e-16 ***\nORIGIN_GRID_ID1562            -0.3633170  0.1982167    -1.833 0.066813 .  \nORIGIN_GRID_ID1563             0.8077381  0.1965596     4.109 3.97e-05 ***\nORIGIN_GRID_ID1564             0.2854558  0.1972468     1.447 0.147841    \nORIGIN_GRID_ID1565             0.0857793  0.1976390     0.434 0.664274    \nORIGIN_GRID_ID1566            -0.1439454  0.1988947    -0.724 0.469233    \nORIGIN_GRID_ID1567            -1.4172216  0.2336475    -6.066 1.31e-09 ***\nORIGIN_GRID_ID1568            -0.6567702  0.2070441    -3.172 0.001513 ** \nORIGIN_GRID_ID1578            -2.4327734  0.2531878    -9.609  &lt; 2e-16 ***\nORIGIN_GRID_ID1580             0.4636200  0.1972004     2.351 0.018723 *  \nORIGIN_GRID_ID1581            -0.7614534  0.1978063    -3.849 0.000118 ***\nORIGIN_GRID_ID1582             1.7820550  0.1962337     9.081  &lt; 2e-16 ***\nORIGIN_GRID_ID1583             0.3310131  0.1998556     1.656 0.097669 .  \nORIGIN_GRID_ID1584             0.4985218  0.1970105     2.530 0.011392 *  \nORIGIN_GRID_ID1585             1.9282085  0.1963621     9.820  &lt; 2e-16 ***\nORIGIN_GRID_ID1586             0.2676499  0.1973220     1.356 0.174968    \nORIGIN_GRID_ID1589            -0.9506855  0.2145646    -4.431 9.39e-06 ***\nORIGIN_GRID_ID1590            -0.8252879  0.2129765    -3.875 0.000107 ***\nORIGIN_GRID_ID1600             2.0222819  0.1967554    10.278  &lt; 2e-16 ***\nORIGIN_GRID_ID1601             1.0054803  0.1963501     5.121 3.04e-07 ***\nORIGIN_GRID_ID1602             1.4989427  0.1963499     7.634 2.28e-14 ***\nORIGIN_GRID_ID1603             2.0421965  0.1962377    10.407  &lt; 2e-16 ***\nORIGIN_GRID_ID1604             0.7381109  0.1965642     3.755 0.000173 ***\nORIGIN_GRID_ID1605             1.9536435  0.1962466     9.955  &lt; 2e-16 ***\nORIGIN_GRID_ID1606             1.8694263  0.1967043     9.504  &lt; 2e-16 ***\nORIGIN_GRID_ID1607             0.4710302  0.1969992     2.391 0.016801 *  \nORIGIN_GRID_ID1608             2.1478753  0.1962932    10.942  &lt; 2e-16 ***\nORIGIN_GRID_ID1609             1.8707237  0.1964187     9.524  &lt; 2e-16 ***\nORIGIN_GRID_ID1610            -0.7828322  0.2175130    -3.599 0.000319 ***\nORIGIN_GRID_ID1622             1.8709447  0.1972256     9.486  &lt; 2e-16 ***\nORIGIN_GRID_ID1623             1.7854951  0.1962287     9.099  &lt; 2e-16 ***\nORIGIN_GRID_ID1624             0.9325592  0.1965314     4.745 2.08e-06 ***\nORIGIN_GRID_ID1625             1.7478316  0.1963013     8.904  &lt; 2e-16 ***\nORIGIN_GRID_ID1626             3.1102369  0.1961566    15.856  &lt; 2e-16 ***\nORIGIN_GRID_ID1627             0.9101268  0.1965216     4.631 3.64e-06 ***\nORIGIN_GRID_ID1628             2.4474636  0.1962147    12.473  &lt; 2e-16 ***\nORIGIN_GRID_ID1629             1.0168521  0.1967322     5.169 2.36e-07 ***\nORIGIN_GRID_ID1630             1.2656792  0.1966579     6.436 1.23e-10 ***\nORIGIN_GRID_ID1631            -1.4077998  0.2182585    -6.450 1.12e-10 ***\nORIGIN_GRID_ID1642            -0.2356558  0.2008883    -1.173 0.240768    \nORIGIN_GRID_ID1643             1.6088064  0.1962556     8.198 2.45e-16 ***\nORIGIN_GRID_ID1644            -0.1010821  0.1980240    -0.510 0.609734    \nORIGIN_GRID_ID1645             1.2429271  0.1964133     6.328 2.48e-10 ***\nORIGIN_GRID_ID1646             0.8492506  0.1969292     4.312 1.61e-05 ***\nORIGIN_GRID_ID1647             1.6709619  0.1962777     8.513  &lt; 2e-16 ***\nORIGIN_GRID_ID1648             1.7052086  0.1963011     8.687  &lt; 2e-16 ***\nORIGIN_GRID_ID1649             2.1514138  0.1962500    10.963  &lt; 2e-16 ***\nORIGIN_GRID_ID1650             2.1606248  0.1963395    11.005  &lt; 2e-16 ***\nORIGIN_GRID_ID1664            -1.3507544  0.2247446    -6.010 1.85e-09 ***\nORIGIN_GRID_ID1665             2.0278932  0.1962128    10.335  &lt; 2e-16 ***\nORIGIN_GRID_ID1666             0.9338396  0.1964211     4.754 1.99e-06 ***\nORIGIN_GRID_ID1667             1.9027156  0.1968642     9.665  &lt; 2e-16 ***\nORIGIN_GRID_ID1668             1.6845997  0.1962993     8.582  &lt; 2e-16 ***\nORIGIN_GRID_ID1670             2.4356085  0.1962093    12.413  &lt; 2e-16 ***\nORIGIN_GRID_ID1671             2.6476006  0.1963943    13.481  &lt; 2e-16 ***\nORIGIN_GRID_ID1672             1.8663740  0.1964910     9.499  &lt; 2e-16 ***\nORIGIN_GRID_ID1684             0.9427582  0.1972876     4.779 1.77e-06 ***\nORIGIN_GRID_ID1685             1.6044824  0.1963099     8.173 3.00e-16 ***\nORIGIN_GRID_ID1686             1.4512376  0.1963068     7.393 1.44e-13 ***\nORIGIN_GRID_ID1687             1.1503565  0.1966443     5.850 4.92e-09 ***\nORIGIN_GRID_ID1688             1.0482769  0.1965021     5.335 9.57e-08 ***\nORIGIN_GRID_ID1689             0.5447406  0.1968707     2.767 0.005658 ** \nORIGIN_GRID_ID1690             1.0342650  0.1966765     5.259 1.45e-07 ***\nORIGIN_GRID_ID1691             1.9330576  0.1962879     9.848  &lt; 2e-16 ***\nORIGIN_GRID_ID1692             1.0671456  0.1968031     5.422 5.88e-08 ***\nORIGIN_GRID_ID1706             1.5124075  0.1964121     7.700 1.36e-14 ***\nORIGIN_GRID_ID1707             1.3161808  0.1963089     6.705 2.02e-11 ***\nORIGIN_GRID_ID1708             1.7956421  0.1962679     9.149  &lt; 2e-16 ***\nORIGIN_GRID_ID1709             1.1354283  0.1964658     5.779 7.50e-09 ***\nORIGIN_GRID_ID1710             1.9996880  0.1962822    10.188  &lt; 2e-16 ***\nORIGIN_GRID_ID1711             2.7228950  0.1961954    13.878  &lt; 2e-16 ***\nORIGIN_GRID_ID1712             2.5393352  0.1961882    12.943  &lt; 2e-16 ***\nORIGIN_GRID_ID1713            -0.3452947  0.1979300    -1.745 0.081067 .  \nORIGIN_GRID_ID1714             2.4222191  0.1962721    12.341  &lt; 2e-16 ***\nORIGIN_GRID_ID1726            -1.7534249  0.5370879    -3.265 0.001096 ** \nORIGIN_GRID_ID1727             1.4735178  0.1963552     7.504 6.17e-14 ***\nORIGIN_GRID_ID1728             2.1266392  0.1962168    10.838  &lt; 2e-16 ***\nORIGIN_GRID_ID1729             1.1611029  0.1964024     5.912 3.38e-09 ***\nORIGIN_GRID_ID1730            -0.1990351  0.1985599    -1.002 0.316154    \nORIGIN_GRID_ID1731             1.8570830  0.1963079     9.460  &lt; 2e-16 ***\nORIGIN_GRID_ID1732             2.0825692  0.1962279    10.613  &lt; 2e-16 ***\nORIGIN_GRID_ID1733             1.6157358  0.1963100     8.231  &lt; 2e-16 ***\nORIGIN_GRID_ID1734             1.8072405  0.1962851     9.207  &lt; 2e-16 ***\nORIGIN_GRID_ID1735             2.5402823  0.1965542    12.924  &lt; 2e-16 ***\nORIGIN_GRID_ID1748             0.9076535  0.1965919     4.617 3.89e-06 ***\nORIGIN_GRID_ID1749             2.3024084  0.1961953    11.735  &lt; 2e-16 ***\nORIGIN_GRID_ID1750             0.9562784  0.1964089     4.869 1.12e-06 ***\nORIGIN_GRID_ID1751             0.2638945  0.1972860     1.338 0.181019    \nORIGIN_GRID_ID1753             2.0834404  0.1962534    10.616  &lt; 2e-16 ***\nORIGIN_GRID_ID1754             2.8666052  0.1961698    14.613  &lt; 2e-16 ***\nORIGIN_GRID_ID1755             2.0205113  0.1962452    10.296  &lt; 2e-16 ***\nORIGIN_GRID_ID1756             1.6765695  0.1963413     8.539  &lt; 2e-16 ***\nORIGIN_GRID_ID1757            -1.0804222  0.2062636    -5.238 1.62e-07 ***\nORIGIN_GRID_ID1768            -1.2502052  0.2444193    -5.115 3.14e-07 ***\nORIGIN_GRID_ID1769             1.3138860  0.1963760     6.691 2.22e-11 ***\nORIGIN_GRID_ID1770             1.9989431  0.1963858    10.179  &lt; 2e-16 ***\nORIGIN_GRID_ID1771             0.6084526  0.1967988     3.092 0.001990 ** \nORIGIN_GRID_ID1772             0.9814990  0.1987184     4.939 7.85e-07 ***\nORIGIN_GRID_ID1774             1.8866351  0.1962695     9.612  &lt; 2e-16 ***\nORIGIN_GRID_ID1775             1.3617548  0.1963715     6.935 4.07e-12 ***\nORIGIN_GRID_ID1776             2.9840290  0.1961654    15.212  &lt; 2e-16 ***\nORIGIN_GRID_ID1777             1.9519097  0.1962965     9.944  &lt; 2e-16 ***\nORIGIN_GRID_ID1778             1.2217181  0.1972140     6.195 5.83e-10 ***\nORIGIN_GRID_ID1790             2.4170781  0.1962247    12.318  &lt; 2e-16 ***\nORIGIN_GRID_ID1791             2.0125369  0.1962629    10.254  &lt; 2e-16 ***\nORIGIN_GRID_ID1792             1.3692610  0.1965084     6.968 3.22e-12 ***\nORIGIN_GRID_ID1793             0.8889993  0.1966943     4.520 6.19e-06 ***\nORIGIN_GRID_ID1794             0.3177076  0.2055143     1.546 0.122125    \nORIGIN_GRID_ID1795            -1.1905191  0.2056912    -5.788 7.13e-09 ***\nORIGIN_GRID_ID1796             2.0606532  0.1962770    10.499  &lt; 2e-16 ***\nORIGIN_GRID_ID1797             2.0190736  0.1962445    10.289  &lt; 2e-16 ***\nORIGIN_GRID_ID1798             1.9763609  0.1962643    10.070  &lt; 2e-16 ***\nORIGIN_GRID_ID1799             1.0023026  0.1967561     5.094 3.50e-07 ***\nORIGIN_GRID_ID1800             0.3555420  0.2003241     1.775 0.075925 .  \nORIGIN_GRID_ID1811             1.7059137  0.1963475     8.688  &lt; 2e-16 ***\nORIGIN_GRID_ID1812             2.5382160  0.1961867    12.938  &lt; 2e-16 ***\nORIGIN_GRID_ID1813             1.9186417  0.1962620     9.776  &lt; 2e-16 ***\nORIGIN_GRID_ID1817             1.6031391  0.1964148     8.162 3.30e-16 ***\nORIGIN_GRID_ID1818             1.8570710  0.1962759     9.462  &lt; 2e-16 ***\nORIGIN_GRID_ID1819             2.8377259  0.1961747    14.465  &lt; 2e-16 ***\nORIGIN_GRID_ID1820            -0.2741550  0.2015168    -1.360 0.173685    \nORIGIN_GRID_ID1832             2.9149671  0.1961898    14.858  &lt; 2e-16 ***\nORIGIN_GRID_ID1833             1.3874908  0.1963719     7.066 1.60e-12 ***\nORIGIN_GRID_ID1834             1.3896582  0.1963582     7.077 1.47e-12 ***\nORIGIN_GRID_ID1835             0.7242904  0.1968111     3.680 0.000233 ***\nORIGIN_GRID_ID1837             0.0594943  0.2215877     0.268 0.788321    \nORIGIN_GRID_ID1839             1.3798363  0.1964909     7.022 2.18e-12 ***\nORIGIN_GRID_ID1840             2.8420912  0.1961780    14.487  &lt; 2e-16 ***\nORIGIN_GRID_ID1841             0.5334090  0.1978940     2.695 0.007030 ** \nORIGIN_GRID_ID1842             2.4101885  0.1967892    12.248  &lt; 2e-16 ***\nORIGIN_GRID_ID1853             1.6244027  0.1963214     8.274  &lt; 2e-16 ***\nORIGIN_GRID_ID1854             2.0040931  0.1962752    10.211  &lt; 2e-16 ***\nORIGIN_GRID_ID1855             1.9789808  0.1962859    10.082  &lt; 2e-16 ***\nORIGIN_GRID_ID1858             0.6682117  0.2000690     3.340 0.000838 ***\nORIGIN_GRID_ID1860             2.0894231  0.1968240    10.616  &lt; 2e-16 ***\nORIGIN_GRID_ID1861             1.9306277  0.1963167     9.834  &lt; 2e-16 ***\nORIGIN_GRID_ID1874             1.9037275  0.1963960     9.693  &lt; 2e-16 ***\nORIGIN_GRID_ID1875             0.1414998  0.1977411     0.716 0.474250    \nORIGIN_GRID_ID1876             1.9803795  0.1972767    10.039  &lt; 2e-16 ***\nORIGIN_GRID_ID1877             1.6571943  0.1963385     8.440  &lt; 2e-16 ***\nORIGIN_GRID_ID1880            -0.2350374  0.2087850    -1.126 0.260276    \nORIGIN_GRID_ID1882             2.0120486  0.1963192    10.249  &lt; 2e-16 ***\nORIGIN_GRID_ID1883             1.4525068  0.1970709     7.370 1.70e-13 ***\nORIGIN_GRID_ID1895             1.8911266  0.1963061     9.634  &lt; 2e-16 ***\nORIGIN_GRID_ID1896             1.3346586  0.1964512     6.794 1.09e-11 ***\nORIGIN_GRID_ID1897             1.4001691  0.1966037     7.122 1.07e-12 ***\nORIGIN_GRID_ID1898            -1.9746083  0.2221089    -8.890  &lt; 2e-16 ***\nORIGIN_GRID_ID1901            -0.7166269  0.2168172    -3.305 0.000949 ***\nORIGIN_GRID_ID1903             1.0484784  0.1969926     5.322 1.02e-07 ***\nORIGIN_GRID_ID1916            -0.7324491  0.2085983    -3.511 0.000446 ***\nORIGIN_GRID_ID1917             1.1488352  0.1965620     5.845 5.08e-09 ***\nORIGIN_GRID_ID1918             2.1834877  0.1963848    11.118  &lt; 2e-16 ***\nORIGIN_GRID_ID1919             1.7728513  0.1963331     9.030  &lt; 2e-16 ***\nORIGIN_GRID_ID1922             0.2088522  0.2032523     1.028 0.304161    \nORIGIN_GRID_ID1924             1.2485298  0.1969734     6.339 2.32e-10 ***\nORIGIN_GRID_ID1937             1.4517990  0.1964539     7.390 1.47e-13 ***\nORIGIN_GRID_ID1938             2.1120055  0.1962570    10.761  &lt; 2e-16 ***\nORIGIN_GRID_ID1939             2.1933602  0.1962915    11.174  &lt; 2e-16 ***\nORIGIN_GRID_ID1942            -0.3251328  0.2053435    -1.583 0.113339    \nORIGIN_GRID_ID1958            -1.1858399  0.2773539    -4.276 1.91e-05 ***\nORIGIN_GRID_ID1959             1.2518635  0.1966096     6.367 1.92e-10 ***\nORIGIN_GRID_ID1960             3.5298987  0.1961438    17.996  &lt; 2e-16 ***\nORIGIN_GRID_ID1961             1.2924564  0.1965877     6.574 4.88e-11 ***\nORIGIN_GRID_ID1962             2.1204867  0.1963177    10.801  &lt; 2e-16 ***\nORIGIN_GRID_ID1964            -0.0340953  0.2063843    -0.165 0.868784    \nORIGIN_GRID_ID1979             1.2709446  0.1966197     6.464 1.02e-10 ***\nORIGIN_GRID_ID1980            -0.3787670  0.1980797    -1.912 0.055851 .  \nORIGIN_GRID_ID1981             1.7641462  0.1963129     8.986  &lt; 2e-16 ***\nORIGIN_GRID_ID1982             1.2079259  0.1970471     6.130 8.78e-10 ***\nORIGIN_GRID_ID1983             2.2421171  0.1963022    11.422  &lt; 2e-16 ***\nORIGIN_GRID_ID1984             1.0575511  0.1967513     5.375 7.66e-08 ***\nORIGIN_GRID_ID1985             1.2987559  0.1966249     6.605 3.97e-11 ***\nORIGIN_GRID_ID2001             1.6155234  0.1963832     8.226  &lt; 2e-16 ***\nORIGIN_GRID_ID2002             2.1132251  0.1962342    10.769  &lt; 2e-16 ***\nORIGIN_GRID_ID2003             1.9549876  0.1962885     9.960  &lt; 2e-16 ***\nORIGIN_GRID_ID2004             2.8176704  0.1962163    14.360  &lt; 2e-16 ***\nORIGIN_GRID_ID2005             2.1070506  0.1963001    10.734  &lt; 2e-16 ***\nORIGIN_GRID_ID2006             1.6109356  0.1965167     8.197 2.46e-16 ***\nORIGIN_GRID_ID2007             0.0204821  0.1996974     0.103 0.918308    \nORIGIN_GRID_ID2022             2.3034377  0.1963629    11.731  &lt; 2e-16 ***\nORIGIN_GRID_ID2023             2.3436769  0.1962250    11.944  &lt; 2e-16 ***\nORIGIN_GRID_ID2024             1.9762794  0.1962702    10.069  &lt; 2e-16 ***\nORIGIN_GRID_ID2025             1.7544962  0.1963270     8.937  &lt; 2e-16 ***\nORIGIN_GRID_ID2026             0.4413742  0.1974770     2.235 0.025413 *  \nORIGIN_GRID_ID2027             2.5148067  0.1962517    12.814  &lt; 2e-16 ***\nORIGIN_GRID_ID2043             1.3332676  0.1966054     6.781 1.19e-11 ***\nORIGIN_GRID_ID2044             1.9376601  0.1962945     9.871  &lt; 2e-16 ***\nORIGIN_GRID_ID2045            -0.6344002  0.2121279    -2.991 0.002784 ** \nORIGIN_GRID_ID2046             2.4274020  0.1961939    12.372  &lt; 2e-16 ***\nORIGIN_GRID_ID2047             1.6805627  0.1963996     8.557  &lt; 2e-16 ***\nORIGIN_GRID_ID2048             1.9603227  0.1963267     9.985  &lt; 2e-16 ***\nORIGIN_GRID_ID2049             1.1076489  0.1980515     5.593 2.24e-08 ***\nORIGIN_GRID_ID2064             1.9117405  0.1963504     9.736  &lt; 2e-16 ***\nORIGIN_GRID_ID2065             1.0484136  0.1965900     5.333 9.66e-08 ***\nORIGIN_GRID_ID2066             0.7547411  0.1989123     3.794 0.000148 ***\nORIGIN_GRID_ID2067             3.5822835  0.1961446    18.263  &lt; 2e-16 ***\nORIGIN_GRID_ID2068             1.7160071  0.1966529     8.726  &lt; 2e-16 ***\nORIGIN_GRID_ID2069             2.0774227  0.1963541    10.580  &lt; 2e-16 ***\nORIGIN_GRID_ID2085             0.9709661  0.1968828     4.932 8.15e-07 ***\nORIGIN_GRID_ID2086             2.1811489  0.1962743    11.113  &lt; 2e-16 ***\nORIGIN_GRID_ID2087             1.4746845  0.1964490     7.507 6.06e-14 ***\nORIGIN_GRID_ID2088             1.9079727  0.1962573     9.722  &lt; 2e-16 ***\nORIGIN_GRID_ID2089             1.3088508  0.1965154     6.660 2.73e-11 ***\nORIGIN_GRID_ID2090             3.1580711  0.1961718    16.098  &lt; 2e-16 ***\nORIGIN_GRID_ID2091            -0.1866827  0.2051476    -0.910 0.362827    \nORIGIN_GRID_ID2105             0.6398282  0.2106654     3.037 0.002388 ** \nORIGIN_GRID_ID2106            -0.0852185  0.1983477    -0.430 0.667456    \nORIGIN_GRID_ID2107             0.9914236  0.1966518     5.042 4.62e-07 ***\nORIGIN_GRID_ID2108             2.1390796  0.1962934    10.897  &lt; 2e-16 ***\nORIGIN_GRID_ID2109             1.7177295  0.1963067     8.750  &lt; 2e-16 ***\nORIGIN_GRID_ID2110             1.1363587  0.1967137     5.777 7.62e-09 ***\nORIGIN_GRID_ID2111            -1.3709017  0.2199183    -6.234 4.56e-10 ***\nORIGIN_GRID_ID2128             0.9854397  0.1972487     4.996 5.86e-07 ***\nORIGIN_GRID_ID2129             0.5995653  0.1971145     3.042 0.002352 ** \nORIGIN_GRID_ID2130             2.3191865  0.1962179    11.819  &lt; 2e-16 ***\nORIGIN_GRID_ID2131             2.3770952  0.1962864    12.110  &lt; 2e-16 ***\nORIGIN_GRID_ID2132             1.9976532  0.1963425    10.174  &lt; 2e-16 ***\nORIGIN_GRID_ID2148             1.7486830  0.1968158     8.885  &lt; 2e-16 ***\nORIGIN_GRID_ID2149            -0.4159011  0.1993635    -2.086 0.036966 *  \nORIGIN_GRID_ID2150             2.0821793  0.1963110    10.607  &lt; 2e-16 ***\nORIGIN_GRID_ID2151             2.5094624  0.1962082    12.790  &lt; 2e-16 ***\nORIGIN_GRID_ID2152             2.7425225  0.1962191    13.977  &lt; 2e-16 ***\nORIGIN_GRID_ID2153             2.1153504  0.1964240    10.769  &lt; 2e-16 ***\nORIGIN_GRID_ID2171             1.4343280  0.1965246     7.298 2.91e-13 ***\nORIGIN_GRID_ID2172             1.2368524  0.1967159     6.288 3.23e-10 ***\nORIGIN_GRID_ID2173             1.5180494  0.1963998     7.729 1.08e-14 ***\nORIGIN_GRID_ID2174             2.0004162  0.1963915    10.186  &lt; 2e-16 ***\nORIGIN_GRID_ID2191             1.1787600  0.1972187     5.977 2.27e-09 ***\nORIGIN_GRID_ID2192             0.8498889  0.1971703     4.310 1.63e-05 ***\nORIGIN_GRID_ID2193             1.4302785  0.1965316     7.278 3.40e-13 ***\nORIGIN_GRID_ID2194             2.1202942  0.1963120    10.801  &lt; 2e-16 ***\nORIGIN_GRID_ID2195             1.3097732  0.2004579     6.534 6.41e-11 ***\nORIGIN_GRID_ID2212             0.5396640  0.2082994     2.591 0.009575 ** \nORIGIN_GRID_ID2213            -0.7069193  0.2049896    -3.449 0.000564 ***\nORIGIN_GRID_ID2214             0.6934085  0.1988879     3.486 0.000490 ***\nORIGIN_GRID_ID2215             1.6587142  0.1965437     8.439  &lt; 2e-16 ***\nORIGIN_GRID_ID2216             0.6225918  0.1973895     3.154 0.001610 ** \nORIGIN_GRID_ID2233             0.2903891  0.2009978     1.445 0.148531    \nORIGIN_GRID_ID2234             0.7749298  0.2004804     3.865 0.000111 ***\nORIGIN_GRID_ID2235             0.8310101  0.1976771     4.204 2.62e-05 ***\nORIGIN_GRID_ID2236            -0.2027957  0.1997324    -1.015 0.309945    \nORIGIN_GRID_ID2237            -0.1377518  0.2069973    -0.665 0.505746    \nORIGIN_GRID_ID2256             0.1463332  0.2044945     0.716 0.474248    \nORIGIN_GRID_ID2257             0.4351184  0.1995195     2.181 0.029196 *  \nORIGIN_GRID_ID2258             0.2781126  0.1980468     1.404 0.160236    \nORIGIN_GRID_ID2259             0.7416653  0.2045214     3.626 0.000287 ***\nORIGIN_GRID_ID2277             0.0806344  0.2082411     0.387 0.698596    \nORIGIN_GRID_ID2278             0.3517962  0.2004947     1.755 0.079321 .  \nORIGIN_GRID_ID2279             0.1908484  0.1991914     0.958 0.338004    \nORIGIN_GRID_ID2280            -0.1909173  0.2120269    -0.900 0.367887    \nORIGIN_GRID_ID2297             1.9764912  0.1969104    10.038  &lt; 2e-16 ***\nORIGIN_GRID_ID2300            -1.6639579  0.2495429    -6.668 2.59e-11 ***\nORIGIN_GRID_ID2301             0.0195853  0.1994702     0.098 0.921784    \nORIGIN_GRID_ID2318            -0.0548515  0.2022853    -0.271 0.786269    \nORIGIN_GRID_ID2319             2.2075778  0.1965492    11.232  &lt; 2e-16 ***\nORIGIN_GRID_ID2322             2.6284523  0.1964097    13.382  &lt; 2e-16 ***\nORIGIN_GRID_ID2337             3.5210338  0.1968514    17.887  &lt; 2e-16 ***\nORIGIN_GRID_ID2341             2.7485379  0.1963910    13.995  &lt; 2e-16 ***\nORIGIN_GRID_ID2343             1.5115861  0.1970080     7.673 1.68e-14 ***\nORIGIN_GRID_ID2361             1.8621163  0.1969212     9.456  &lt; 2e-16 ***\nORIGIN_GRID_ID2364             0.1619485  0.2018541     0.802 0.422377    \nORIGIN_GRID_ID2379             0.2934000  0.2124356     1.381 0.167241    \nORIGIN_GRID_ID2384             1.7161765  0.1974322     8.692  &lt; 2e-16 ***\nORIGIN_GRID_ID2405             1.5502562  0.1974167     7.853 4.07e-15 ***\nORIGIN_GRID_ID2406             0.4759735  0.2017033     2.360 0.018286 *  \nORIGIN_GRID_ID2426             1.9102282  0.2014568     9.482  &lt; 2e-16 ***\nORIGIN_GRID_ID2427             1.3938445  0.1981005     7.036 1.98e-12 ***\nORIGIN_GRID_ID2505             1.7579624  0.2068609     8.498  &lt; 2e-16 ***\nlog(DESTIN_SCHOOL_COUNT)       0.0994597  0.0012569    79.131  &lt; 2e-16 ***\nlog(DESTIN_HDB_DWELLING_UNIT)  0.0823915  0.0001388   593.638  &lt; 2e-16 ***\nlog(DESTIN_FINSERV_COUNT)      0.3542054  0.0004688   755.539  &lt; 2e-16 ***\nlog(DESTIN_MRT_EXIT_COUNT)     0.3981667  0.0007055   564.345  &lt; 2e-16 ***\nlog(dist)                     -1.5068185  0.0004821 -3125.226  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance:  8256438  on 60782  degrees of freedom\nAIC: 8545745\n\nNumber of Fisher Scoring iterations: 7\n\n\n\norcSIM$coefficients[822:826]\n\n     log(DESTIN_SCHOOL_COUNT) log(DESTIN_HDB_DWELLING_UNIT) \n                   0.09945969                    0.08239152 \n    log(DESTIN_FINSERV_COUNT)    log(DESTIN_MRT_EXIT_COUNT) \n                   0.35420537                    0.39816669 \n                    log(dist) \n                  -1.50681847 \n\n\n\nCalcRSquared(orcSIM$data$MORNING_PEAK, orcSIM$fitted.values)\n\n[1] 0.5169723\n\n\nFrom the above results, I noticed that most variables are statistically significant(p-value&lt; 0.05) for ORIGIN_GRID_IDxxx but for log(DESTIN_SCHOOL_COUNT), log(DESTIN_HDB_DWELLING_UNIT), log(DESTIN_FINSERV_COUNT), log(DESTIN_MRT_EXIT_COUNT), log(dist), they are statistically significant(p-value&lt; 0.05). The Rsquared is higher than unconstrained which is 0.52.\nThe most influential variables are distance, destination mrt exit count, destination finserv count with -1.51 , 0.40 , and 0.35 respectively.\n\n\n14.7 Destination constrained SIM\nDestination-constrained spatial interaction models concentrate on factors influencing the attractiveness and capacity of destinations to receive flows from various origins. These models highlight the characteristics and limitations at the destination points that affect the spatial interactions and the likelihood of being selected as destinations.\n\n\n\nDestination Constrained\n\n\n\n#|eval: false\nflow_data_tidy$DESTIN_GRID_ID &lt;- as.factor(flow_data_tidy$DESTIN_GRID_ID)\ndecSIM &lt;- glm(formula = MORNING_PEAK ~ \n                DESTIN_GRID_ID +\n                log(ORIGIN_HDB_DWELLING_UNIT) +\n                log(ORIGIN_FINSERV_COUNT)+\n                log(ORIGIN_MRT_EXIT_COUNT)+\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(decSIM, \"data/rds/decSIM.rds\")\n\n\ndecSIM &lt;- read_rds(\"data/rds/decSIM.rds\")\nsummary(decSIM)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ DESTIN_GRID_ID + log(ORIGIN_HDB_DWELLING_UNIT) + \n    log(ORIGIN_FINSERV_COUNT) + log(ORIGIN_MRT_EXIT_COUNT) + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                                Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)                   12.7596880  0.2000277    63.790  &lt; 2e-16 ***\nDESTIN_GRID_ID46               2.5825269  0.2119582    12.184  &lt; 2e-16 ***\nDESTIN_GRID_ID66               1.4968223  0.5385170     2.780 0.005444 ** \nDESTIN_GRID_ID67               1.1794795  0.2112068     5.584 2.34e-08 ***\nDESTIN_GRID_ID68               2.3593268  0.2076891    11.360  &lt; 2e-16 ***\nDESTIN_GRID_ID86               2.2397622  0.2484743     9.014  &lt; 2e-16 ***\nDESTIN_GRID_ID88               2.0628597  0.2045772    10.084  &lt; 2e-16 ***\nDESTIN_GRID_ID89               2.0477485  0.2225398     9.202  &lt; 2e-16 ***\nDESTIN_GRID_ID90              -0.2935300  0.7348470    -0.399 0.689566    \nDESTIN_GRID_ID109              0.9842659  0.2751627     3.577 0.000348 ***\nDESTIN_GRID_ID110             -1.6745123  0.4546061    -3.683 0.000230 ***\nDESTIN_GRID_ID111              3.7302090  0.2008491    18.572  &lt; 2e-16 ***\nDESTIN_GRID_ID112             -1.2186172  0.3338092    -3.651 0.000262 ***\nDESTIN_GRID_ID128              3.5449252  0.2022302    17.529  &lt; 2e-16 ***\nDESTIN_GRID_ID129              0.4366016  0.4062021     1.075 0.282447    \nDESTIN_GRID_ID130              2.2451816  0.2380484     9.432  &lt; 2e-16 ***\nDESTIN_GRID_ID131              0.3964222  0.2205010     1.798 0.072205 .  \nDESTIN_GRID_ID132              1.3176698  0.2148787     6.132 8.67e-10 ***\nDESTIN_GRID_ID133              0.4066747  0.2258076     1.801 0.071706 .  \nDESTIN_GRID_ID134              3.6275678  0.2004765    18.095  &lt; 2e-16 ***\nDESTIN_GRID_ID150              1.8885985  0.2101133     8.988  &lt; 2e-16 ***\nDESTIN_GRID_ID151              0.5229914  0.2504544     2.088 0.036783 *  \nDESTIN_GRID_ID152              1.6411414  0.2380477     6.894 5.42e-12 ***\nDESTIN_GRID_ID153              0.7310887  0.2158216     3.387 0.000705 ***\nDESTIN_GRID_ID154              0.6699317  0.2148787     3.118 0.001823 ** \nDESTIN_GRID_ID155              2.0861261  0.2029752    10.278  &lt; 2e-16 ***\nDESTIN_GRID_ID156              0.4307942  0.2252836     1.912 0.055847 .  \nDESTIN_GRID_ID172              0.7520908  0.2751624     2.733 0.006271 ** \nDESTIN_GRID_ID174              0.1806273  0.2457809     0.735 0.462393    \nDESTIN_GRID_ID175              3.1051662  0.2006633    15.475  &lt; 2e-16 ***\nDESTIN_GRID_ID176              0.2628875  0.2137332     1.230 0.218705    \nDESTIN_GRID_ID195             -1.0930998  0.3201563    -3.414 0.000640 ***\nDESTIN_GRID_ID196              0.1048363  0.2188015     0.479 0.631840    \nDESTIN_GRID_ID197             -0.3490798  0.2549511    -1.369 0.170936    \nDESTIN_GRID_ID215              1.1528120  0.2449491     4.706 2.52e-06 ***\nDESTIN_GRID_ID216              2.7182367  0.2010719    13.519  &lt; 2e-16 ***\nDESTIN_GRID_ID217              1.2832568  0.2058528     6.234 4.55e-10 ***\nDESTIN_GRID_ID237             -1.5438658  0.3338093    -4.625 3.75e-06 ***\nDESTIN_GRID_ID238              0.1836266  0.2275189     0.807 0.419619    \nDESTIN_GRID_ID239              1.8590057  0.2132946     8.716  &lt; 2e-16 ***\nDESTIN_GRID_ID257              0.7553172  0.2130172     3.546 0.000391 ***\nDESTIN_GRID_ID258             -0.2286744  0.2309403    -0.990 0.322082    \nDESTIN_GRID_ID259              0.0592809  0.2301893     0.258 0.796769    \nDESTIN_GRID_ID278              1.3161139  0.2142829     6.142 8.15e-10 ***\nDESTIN_GRID_ID279              0.3627495  0.2152420     1.685 0.091929 .  \nDESTIN_GRID_ID280              1.1675365  0.2102844     5.552 2.82e-08 ***\nDESTIN_GRID_ID299              0.6540200  0.2343617     2.791 0.005260 ** \nDESTIN_GRID_ID300              1.9144377  0.2029580     9.433  &lt; 2e-16 ***\nDESTIN_GRID_ID320              0.9643913  0.2223375     4.338 1.44e-05 ***\nDESTIN_GRID_ID321              1.1212627  0.2889267     3.881 0.000104 ***\nDESTIN_GRID_ID322              1.8762174  0.2147918     8.735  &lt; 2e-16 ***\nDESTIN_GRID_ID340              2.2435538  0.2065762    10.861  &lt; 2e-16 ***\nDESTIN_GRID_ID341              0.3076276  0.2236068     1.376 0.168898    \nDESTIN_GRID_ID342              1.3641086  0.2108663     6.469 9.86e-11 ***\nDESTIN_GRID_ID363              1.7760678  0.2142830     8.288  &lt; 2e-16 ***\nDESTIN_GRID_ID364              1.1657533  0.2132246     5.467 4.57e-08 ***\nDESTIN_GRID_ID383              1.1193200  0.2081665     5.377 7.57e-08 ***\nDESTIN_GRID_ID384              1.4345118  0.2090878     6.861 6.85e-12 ***\nDESTIN_GRID_ID385             -0.6736996  0.3091211    -2.179 0.029302 *  \nDESTIN_GRID_ID404              1.5555547  0.2166668     7.179 7.00e-13 ***\nDESTIN_GRID_ID405              0.2724843  0.2272178     1.199 0.230442    \nDESTIN_GRID_ID406              3.7032091  0.2001586    18.501  &lt; 2e-16 ***\nDESTIN_GRID_ID407              2.6339173  0.2021169    13.032  &lt; 2e-16 ***\nDESTIN_GRID_ID408              3.5881069  0.2005494    17.891  &lt; 2e-16 ***\nDESTIN_GRID_ID425             -0.0189732  0.2504545    -0.076 0.939614    \nDESTIN_GRID_ID426              0.4318868  0.2275190     1.898 0.057664 .  \nDESTIN_GRID_ID427              1.0867697  0.2031028     5.351 8.75e-08 ***\nDESTIN_GRID_ID428              1.7704739  0.2025209     8.742  &lt; 2e-16 ***\nDESTIN_GRID_ID429              2.6826300  0.2030982    13.209  &lt; 2e-16 ***\nDESTIN_GRID_ID446              0.9763138  0.2329939     4.190 2.79e-05 ***\nDESTIN_GRID_ID447             -0.7001554  0.2504543    -2.796 0.005181 ** \nDESTIN_GRID_ID448             -0.5221645  0.2287927    -2.282 0.022474 *  \nDESTIN_GRID_ID449              2.6132044  0.2006164    13.026  &lt; 2e-16 ***\nDESTIN_GRID_ID450              2.2216945  0.2013643    11.033  &lt; 2e-16 ***\nDESTIN_GRID_ID468              0.9495497  0.2108192     4.504 6.67e-06 ***\nDESTIN_GRID_ID469              0.3775465  0.2054232     1.838 0.066078 .  \nDESTIN_GRID_ID470              3.3894014  0.2002067    16.930  &lt; 2e-16 ***\nDESTIN_GRID_ID471              2.5615035  0.2016559    12.702  &lt; 2e-16 ***\nDESTIN_GRID_ID488              0.6558503  0.2309406     2.840 0.004513 ** \nDESTIN_GRID_ID489             -0.6881133  0.3511906    -1.959 0.050069 .  \nDESTIN_GRID_ID490              1.6685623  0.2025107     8.239  &lt; 2e-16 ***\nDESTIN_GRID_ID491              2.0055895  0.2008196     9.987  &lt; 2e-16 ***\nDESTIN_GRID_ID493             -1.3122835  0.4062034    -3.231 0.001235 ** \nDESTIN_GRID_ID494              1.6931206  0.2064752     8.200 2.40e-16 ***\nDESTIN_GRID_ID509              0.2143528  0.2153358     0.995 0.319525    \nDESTIN_GRID_ID510              0.4205601  0.2143661     1.962 0.049777 *  \nDESTIN_GRID_ID511              1.4563869  0.2012190     7.238 4.56e-13 ***\nDESTIN_GRID_ID512              3.5136424  0.2001346    17.556  &lt; 2e-16 ***\nDESTIN_GRID_ID513              0.4827115  0.2105906     2.292 0.021895 *  \nDESTIN_GRID_ID514              0.7785800  0.2206738     3.528 0.000418 ***\nDESTIN_GRID_ID515              0.2119064  0.2475420     0.856 0.391975    \nDESTIN_GRID_ID530              0.9408976  0.2475427     3.801 0.000144 ***\nDESTIN_GRID_ID531              1.0936042  0.2063430     5.300 1.16e-07 ***\nDESTIN_GRID_ID532              0.5445289  0.2055056     2.650 0.008056 ** \nDESTIN_GRID_ID533              3.9888604  0.2000772    19.937  &lt; 2e-16 ***\nDESTIN_GRID_ID534              3.6673089  0.2001490    18.323  &lt; 2e-16 ***\nDESTIN_GRID_ID536              1.3528993  0.2056936     6.577 4.79e-11 ***\nDESTIN_GRID_ID537             -0.4890120  0.2828431    -1.729 0.083824 .  \nDESTIN_GRID_ID538             -0.0748024  0.3043568    -0.246 0.805859    \nDESTIN_GRID_ID539             -0.5087918  0.7348470    -0.692 0.488700    \nDESTIN_GRID_ID551              0.1015246  0.2618623     0.388 0.698237    \nDESTIN_GRID_ID552              0.6798428  0.2380520     2.856 0.004292 ** \nDESTIN_GRID_ID553              0.5446333  0.2034593     2.677 0.007431 ** \nDESTIN_GRID_ID554              3.1126785  0.2001777    15.550  &lt; 2e-16 ***\nDESTIN_GRID_ID555              2.4474840  0.2010859    12.171  &lt; 2e-16 ***\nDESTIN_GRID_ID559              0.9408748  0.2189447     4.297 1.73e-05 ***\nDESTIN_GRID_ID560             -0.4124360  0.3741685    -1.102 0.270343    \nDESTIN_GRID_ID561             -0.4071693  0.4276203    -0.952 0.341008    \nDESTIN_GRID_ID572             -2.1502777  0.7348476    -2.926 0.003432 ** \nDESTIN_GRID_ID573              0.9631568  0.2077131     4.637 3.54e-06 ***\nDESTIN_GRID_ID574              1.4539752  0.2076921     7.001 2.55e-12 ***\nDESTIN_GRID_ID575              5.0593677  0.2000214    25.294  &lt; 2e-16 ***\nDESTIN_GRID_ID576              2.7765758  0.2002805    13.863  &lt; 2e-16 ***\nDESTIN_GRID_ID578             -0.5907125  0.2669281    -2.213 0.026897 *  \nDESTIN_GRID_ID582              0.0189186  0.2857770     0.066 0.947218    \nDESTIN_GRID_ID583              1.1867355  0.2484781     4.776 1.79e-06 ***\nDESTIN_GRID_ID584              1.6546501  0.2309447     7.165 7.80e-13 ***\nDESTIN_GRID_ID593             -0.6567919  0.2857754    -2.298 0.021546 *  \nDESTIN_GRID_ID594              0.8278134  0.2116245     3.912 9.16e-05 ***\nDESTIN_GRID_ID595              0.2158609  0.2058270     1.049 0.294294    \nDESTIN_GRID_ID596              2.7930495  0.2001981    13.951  &lt; 2e-16 ***\nDESTIN_GRID_ID597             -0.9404193  0.2363786    -3.978 6.94e-05 ***\nDESTIN_GRID_ID603             -0.1936547  0.3143638    -0.616 0.537881    \nDESTIN_GRID_ID604              0.6663337  0.2729189     2.442 0.014626 *  \nDESTIN_GRID_ID615             -0.6292348  0.2294746    -2.742 0.006105 ** \nDESTIN_GRID_ID616              0.8161172  0.2058000     3.966 7.32e-05 ***\nDESTIN_GRID_ID617              0.5274458  0.2026698     2.602 0.009255 ** \nDESTIN_GRID_ID618              3.3375836  0.2001446    16.676  &lt; 2e-16 ***\nDESTIN_GRID_ID620              0.6226951  0.2143670     2.905 0.003675 ** \nDESTIN_GRID_ID637              0.0259425  0.2107274     0.123 0.902020    \nDESTIN_GRID_ID638              3.1388557  0.2001434    15.683  &lt; 2e-16 ***\nDESTIN_GRID_ID657              0.2308392  0.2082487     1.108 0.267655    \nDESTIN_GRID_ID658              1.7904137  0.2007570     8.918  &lt; 2e-16 ***\nDESTIN_GRID_ID659              2.6273694  0.2003082    13.117  &lt; 2e-16 ***\nDESTIN_GRID_ID660              3.7491606  0.2000805    18.738  &lt; 2e-16 ***\nDESTIN_GRID_ID662              3.5830402  0.2004482    17.875  &lt; 2e-16 ***\nDESTIN_GRID_ID677              0.6130944  0.2135853     2.870 0.004098 ** \nDESTIN_GRID_ID678             -0.5645305  0.2147923    -2.628 0.008582 ** \nDESTIN_GRID_ID679              3.2687704  0.2001506    16.332  &lt; 2e-16 ***\nDESTIN_GRID_ID680              4.0770419  0.2000600    20.379  &lt; 2e-16 ***\nDESTIN_GRID_ID681              2.1208782  0.2010248    10.550  &lt; 2e-16 ***\nDESTIN_GRID_ID699              0.9979949  0.2049993     4.868 1.13e-06 ***\nDESTIN_GRID_ID700              2.9715013  0.2002649    14.838  &lt; 2e-16 ***\nDESTIN_GRID_ID701              1.8501420  0.2007884     9.214  &lt; 2e-16 ***\nDESTIN_GRID_ID702              3.4589811  0.2001057    17.286  &lt; 2e-16 ***\nDESTIN_GRID_ID704              0.4751448  0.2105912     2.256 0.024055 *  \nDESTIN_GRID_ID722              1.2855878  0.2014716     6.381 1.76e-10 ***\nDESTIN_GRID_ID725              0.4822795  0.2079864     2.319 0.020406 *  \nDESTIN_GRID_ID730              1.4608123  0.2242984     6.513 7.38e-11 ***\nDESTIN_GRID_ID741              2.1555055  0.2013155    10.707  &lt; 2e-16 ***\nDESTIN_GRID_ID743              0.9601493  0.2015085     4.765 1.89e-06 ***\nDESTIN_GRID_ID744              2.9474090  0.2001817    14.724  &lt; 2e-16 ***\nDESTIN_GRID_ID752              1.9404436  0.2063108     9.405  &lt; 2e-16 ***\nDESTIN_GRID_ID761              0.7949552  0.2093966     3.796 0.000147 ***\nDESTIN_GRID_ID762              2.2826829  0.2007883    11.369  &lt; 2e-16 ***\nDESTIN_GRID_ID763              0.6603103  0.2022502     3.265 0.001095 ** \nDESTIN_GRID_ID764              3.5746515  0.2000823    17.866  &lt; 2e-16 ***\nDESTIN_GRID_ID765              1.4742202  0.2016417     7.311 2.65e-13 ***\nDESTIN_GRID_ID767              3.4200093  0.2002087    17.082  &lt; 2e-16 ***\nDESTIN_GRID_ID772              2.1692262  0.2030007    10.686  &lt; 2e-16 ***\nDESTIN_GRID_ID784              0.3877921  0.2044331     1.897 0.057839 .  \nDESTIN_GRID_ID785              2.5925878  0.2002052    12.950  &lt; 2e-16 ***\nDESTIN_GRID_ID786              1.9454135  0.2004270     9.706  &lt; 2e-16 ***\nDESTIN_GRID_ID787              2.0796137  0.2009847    10.347  &lt; 2e-16 ***\nDESTIN_GRID_ID788              2.7192982  0.2004130    13.568  &lt; 2e-16 ***\nDESTIN_GRID_ID789              1.5667089  0.2015295     7.774 7.60e-15 ***\nDESTIN_GRID_ID803             -0.9096529  0.2433751    -3.738 0.000186 ***\nDESTIN_GRID_ID804              3.2695317  0.2002132    16.330  &lt; 2e-16 ***\nDESTIN_GRID_ID805              4.1377628  0.2000454    20.684  &lt; 2e-16 ***\nDESTIN_GRID_ID806              2.5739305  0.2002199    12.856  &lt; 2e-16 ***\nDESTIN_GRID_ID807              3.2586879  0.2001935    16.278  &lt; 2e-16 ***\nDESTIN_GRID_ID808              1.0798000  0.2029849     5.320 1.04e-07 ***\nDESTIN_GRID_ID809              3.2910956  0.2001247    16.445  &lt; 2e-16 ***\nDESTIN_GRID_ID810              2.7325192  0.2003626    13.638  &lt; 2e-16 ***\nDESTIN_GRID_ID814              2.1653771  0.2025404    10.691  &lt; 2e-16 ***\nDESTIN_GRID_ID819              6.9530418  0.2023028    34.369  &lt; 2e-16 ***\nDESTIN_GRID_ID824              0.1809550  0.2172438     0.833 0.404868    \nDESTIN_GRID_ID826              0.8931909  0.2014256     4.434 9.24e-06 ***\nDESTIN_GRID_ID827              2.9528634  0.2001765    14.751  &lt; 2e-16 ***\nDESTIN_GRID_ID828              2.9679157  0.2001440    14.829  &lt; 2e-16 ***\nDESTIN_GRID_ID829              2.7540160  0.2002770    13.751  &lt; 2e-16 ***\nDESTIN_GRID_ID830              2.4536324  0.2004566    12.240  &lt; 2e-16 ***\nDESTIN_GRID_ID831              4.5369344  0.2000366    22.681  &lt; 2e-16 ***\nDESTIN_GRID_ID832              4.2085045  0.2001113    21.031  &lt; 2e-16 ***\nDESTIN_GRID_ID835             -0.3539814  0.2343620    -1.510 0.130940    \nDESTIN_GRID_ID844             -0.9212616  0.2889281    -3.189 0.001430 ** \nDESTIN_GRID_ID846              2.6053243  0.2003030    13.007  &lt; 2e-16 ***\nDESTIN_GRID_ID847              3.3709475  0.2001364    16.843  &lt; 2e-16 ***\nDESTIN_GRID_ID848              2.5529277  0.2002431    12.749  &lt; 2e-16 ***\nDESTIN_GRID_ID849              1.7567563  0.2005683     8.759  &lt; 2e-16 ***\nDESTIN_GRID_ID850              2.7824850  0.2002141    13.898  &lt; 2e-16 ***\nDESTIN_GRID_ID851              2.8700495  0.2001712    14.338  &lt; 2e-16 ***\nDESTIN_GRID_ID852              2.4124257  0.2004003    12.038  &lt; 2e-16 ***\nDESTIN_GRID_ID853              4.1937480  0.2001436    20.954  &lt; 2e-16 ***\nDESTIN_GRID_ID854              0.0709483  0.2238333     0.317 0.751267    \nDESTIN_GRID_ID855             -0.7549897  0.2369159    -3.187 0.001439 ** \nDESTIN_GRID_ID856              1.1157242  0.2059222     5.418 6.02e-08 ***\nDESTIN_GRID_ID866              1.1908274  0.2054227     5.797 6.75e-09 ***\nDESTIN_GRID_ID867              1.5029431  0.2014939     7.459 8.72e-14 ***\nDESTIN_GRID_ID868              2.0085457  0.2008557    10.000  &lt; 2e-16 ***\nDESTIN_GRID_ID869              2.7221787  0.2006764    13.565  &lt; 2e-16 ***\nDESTIN_GRID_ID870              4.0395238  0.2000480    20.193  &lt; 2e-16 ***\nDESTIN_GRID_ID871              3.8672095  0.2001525    19.321  &lt; 2e-16 ***\nDESTIN_GRID_ID872              0.9392153  0.2015097     4.661 3.15e-06 ***\nDESTIN_GRID_ID873              2.4090878  0.2006138    12.009  &lt; 2e-16 ***\nDESTIN_GRID_ID874              1.4386151  0.2011538     7.152 8.56e-13 ***\nDESTIN_GRID_ID875             -0.6965991  0.2575189    -2.705 0.006830 ** \nDESTIN_GRID_ID876             -0.2283659  0.2238335    -1.020 0.307610    \nDESTIN_GRID_ID877              1.7947328  0.2029936     8.841  &lt; 2e-16 ***\nDESTIN_GRID_ID887              1.6105637  0.2012612     8.002 1.22e-15 ***\nDESTIN_GRID_ID888              2.0166069  0.2006392    10.051  &lt; 2e-16 ***\nDESTIN_GRID_ID889              0.0067489  0.2108200     0.032 0.974462    \nDESTIN_GRID_ID890              3.1254260  0.2001452    15.616  &lt; 2e-16 ***\nDESTIN_GRID_ID891              1.9161092  0.2011862     9.524  &lt; 2e-16 ***\nDESTIN_GRID_ID893              3.1660975  0.2001284    15.820  &lt; 2e-16 ***\nDESTIN_GRID_ID894              0.8633914  0.2018637     4.277 1.89e-05 ***\nDESTIN_GRID_ID895              1.2149505  0.2026834     5.994 2.04e-09 ***\nDESTIN_GRID_ID896              0.2745113  0.2120749     1.294 0.195525    \nDESTIN_GRID_ID897              1.0412193  0.2034290     5.118 3.08e-07 ***\nDESTIN_GRID_ID898              0.9257907  0.2090550     4.428 9.49e-06 ***\nDESTIN_GRID_ID908              2.0285641  0.2025437    10.015  &lt; 2e-16 ***\nDESTIN_GRID_ID909              2.2258872  0.2003429    11.110  &lt; 2e-16 ***\nDESTIN_GRID_ID910             -0.4213734  0.2082495    -2.023 0.043031 *  \nDESTIN_GRID_ID911              2.1520248  0.2005305    10.732  &lt; 2e-16 ***\nDESTIN_GRID_ID912              2.9000561  0.2001921    14.486  &lt; 2e-16 ***\nDESTIN_GRID_ID915              2.8487762  0.2002001    14.230  &lt; 2e-16 ***\nDESTIN_GRID_ID917              2.7583866  0.2005444    13.754  &lt; 2e-16 ***\nDESTIN_GRID_ID918             -0.4582939  0.2305609    -1.988 0.046841 *  \nDESTIN_GRID_ID919              1.3556476  0.2023927     6.698 2.11e-11 ***\nDESTIN_GRID_ID928              2.1799683  0.2009787    10.847  &lt; 2e-16 ***\nDESTIN_GRID_ID929              2.6945063  0.2002176    13.458  &lt; 2e-16 ***\nDESTIN_GRID_ID930              3.5103284  0.2000780    17.545  &lt; 2e-16 ***\nDESTIN_GRID_ID931              0.2796061  0.2055678     1.360 0.173778    \nDESTIN_GRID_ID932              0.8411966  0.2042897     4.118 3.83e-05 ***\nDESTIN_GRID_ID933              2.5139802  0.2004507    12.542  &lt; 2e-16 ***\nDESTIN_GRID_ID934             -0.1151168  0.2064431    -0.558 0.577104    \nDESTIN_GRID_ID935              4.5759095  0.2000317    22.876  &lt; 2e-16 ***\nDESTIN_GRID_ID938             -1.6849503  0.4062021    -4.148 3.35e-05 ***\nDESTIN_GRID_ID939              4.3292629  0.2000968    21.636  &lt; 2e-16 ***\nDESTIN_GRID_ID940             -0.6613977  0.2466460    -2.682 0.007328 ** \nDESTIN_GRID_ID949              1.9335444  0.2009089     9.624  &lt; 2e-16 ***\nDESTIN_GRID_ID950              3.6597308  0.2001410    18.286  &lt; 2e-16 ***\nDESTIN_GRID_ID951              4.4010960  0.2000339    22.002  &lt; 2e-16 ***\nDESTIN_GRID_ID952              0.6551162  0.2058017     3.183 0.001456 ** \nDESTIN_GRID_ID953              1.9395402  0.2009752     9.651  &lt; 2e-16 ***\nDESTIN_GRID_ID954              0.6409854  0.2025813     3.164 0.001556 ** \nDESTIN_GRID_ID955              3.3800494  0.2001566    16.887  &lt; 2e-16 ***\nDESTIN_GRID_ID956              1.3402277  0.2011181     6.664 2.67e-11 ***\nDESTIN_GRID_ID957              3.1586325  0.2002156    15.776  &lt; 2e-16 ***\nDESTIN_GRID_ID959              0.5090102  0.2210196     2.303 0.021278 *  \nDESTIN_GRID_ID961              0.5453783  0.2062812     2.644 0.008197 ** \nDESTIN_GRID_ID962              4.7367004  0.2001148    23.670  &lt; 2e-16 ***\nDESTIN_GRID_ID970              2.2458305  0.2004400    11.205  &lt; 2e-16 ***\nDESTIN_GRID_ID971              2.9342827  0.2001276    14.662  &lt; 2e-16 ***\nDESTIN_GRID_ID972              2.8251432  0.2001936    14.112  &lt; 2e-16 ***\nDESTIN_GRID_ID974              2.2493496  0.2005417    11.216  &lt; 2e-16 ***\nDESTIN_GRID_ID975              1.6503378  0.2010411     8.209 2.23e-16 ***\nDESTIN_GRID_ID976              1.5868221  0.2011323     7.889 3.04e-15 ***\nDESTIN_GRID_ID977              3.0417019  0.2001592    15.196  &lt; 2e-16 ***\nDESTIN_GRID_ID978              2.8968992  0.2004308    14.453  &lt; 2e-16 ***\nDESTIN_GRID_ID982              0.7614180  0.2027104     3.756 0.000173 ***\nDESTIN_GRID_ID983              8.2241164  0.2000804    41.104  &lt; 2e-16 ***\nDESTIN_GRID_ID984              7.6767232  0.2000567    38.373  &lt; 2e-16 ***\nDESTIN_GRID_ID991              2.3190798  0.2005201    11.565  &lt; 2e-16 ***\nDESTIN_GRID_ID992              2.4873155  0.2003246    12.416  &lt; 2e-16 ***\nDESTIN_GRID_ID993              1.6525418  0.2006100     8.238  &lt; 2e-16 ***\nDESTIN_GRID_ID994              1.8670736  0.2006140     9.307  &lt; 2e-16 ***\nDESTIN_GRID_ID995              2.5820641  0.2003115    12.890  &lt; 2e-16 ***\nDESTIN_GRID_ID996              1.9901354  0.2007703     9.912  &lt; 2e-16 ***\nDESTIN_GRID_ID997              1.4298220  0.2042011     7.002 2.52e-12 ***\nDESTIN_GRID_ID998              3.5037886  0.2001411    17.507  &lt; 2e-16 ***\nDESTIN_GRID_ID999              3.0301237  0.2003201    15.126  &lt; 2e-16 ***\nDESTIN_GRID_ID1001             1.0701822  0.2069425     5.171 2.32e-07 ***\nDESTIN_GRID_ID1003             3.8536536  0.2001037    19.258  &lt; 2e-16 ***\nDESTIN_GRID_ID1004             4.1007817  0.2000942    20.494  &lt; 2e-16 ***\nDESTIN_GRID_ID1011             0.7791637  0.2072453     3.760 0.000170 ***\nDESTIN_GRID_ID1012             2.3413496  0.2009280    11.653  &lt; 2e-16 ***\nDESTIN_GRID_ID1013             1.3747685  0.2011229     6.835 8.17e-12 ***\nDESTIN_GRID_ID1014             1.3435403  0.2010316     6.683 2.34e-11 ***\nDESTIN_GRID_ID1015             0.6239035  0.2026055     3.079 0.002074 ** \nDESTIN_GRID_ID1016             3.7209236  0.2001077    18.595  &lt; 2e-16 ***\nDESTIN_GRID_ID1018             2.0354253  0.2013287    10.110  &lt; 2e-16 ***\nDESTIN_GRID_ID1019             3.3650433  0.2001891    16.809  &lt; 2e-16 ***\nDESTIN_GRID_ID1023             2.2695456  0.2008355    11.301  &lt; 2e-16 ***\nDESTIN_GRID_ID1024             3.0821031  0.2002360    15.392  &lt; 2e-16 ***\nDESTIN_GRID_ID1025             0.4233703  0.2070218     2.045 0.040850 *  \nDESTIN_GRID_ID1033             1.4840571  0.2012455     7.374 1.65e-13 ***\nDESTIN_GRID_ID1034             2.2429696  0.2003950    11.193  &lt; 2e-16 ***\nDESTIN_GRID_ID1035             2.6358081  0.2002529    13.162  &lt; 2e-16 ***\nDESTIN_GRID_ID1036             2.5580495  0.2003130    12.770  &lt; 2e-16 ***\nDESTIN_GRID_ID1037             2.6949560  0.2002301    13.459  &lt; 2e-16 ***\nDESTIN_GRID_ID1043             2.5964444  0.2012757    12.900  &lt; 2e-16 ***\nDESTIN_GRID_ID1045             3.2028486  0.2001585    16.002  &lt; 2e-16 ***\nDESTIN_GRID_ID1046             3.2212984  0.2002581    16.086  &lt; 2e-16 ***\nDESTIN_GRID_ID1053             2.8854516  0.2002781    14.407  &lt; 2e-16 ***\nDESTIN_GRID_ID1054             1.7134461  0.2006800     8.538  &lt; 2e-16 ***\nDESTIN_GRID_ID1055             2.6569127  0.2002521    13.268  &lt; 2e-16 ***\nDESTIN_GRID_ID1056             1.7576093  0.2007109     8.757  &lt; 2e-16 ***\nDESTIN_GRID_ID1064            -0.3599486  0.2729159    -1.319 0.187203    \nDESTIN_GRID_ID1066             3.7560651  0.2001136    18.770  &lt; 2e-16 ***\nDESTIN_GRID_ID1067            -1.5264489  0.2801116    -5.449 5.05e-08 ***\nDESTIN_GRID_ID1074             2.0876159  0.2006441    10.405  &lt; 2e-16 ***\nDESTIN_GRID_ID1075             0.7354855  0.2025575     3.631 0.000282 ***\nDESTIN_GRID_ID1076             0.9579826  0.2011102     4.763 1.90e-06 ***\nDESTIN_GRID_ID1077             1.4553908  0.2008433     7.246 4.28e-13 ***\nDESTIN_GRID_ID1079             2.9817050  0.2002228    14.892  &lt; 2e-16 ***\nDESTIN_GRID_ID1085            -0.6731117  0.3091215    -2.177 0.029443 *  \nDESTIN_GRID_ID1087             2.7757269  0.2003249    13.856  &lt; 2e-16 ***\nDESTIN_GRID_ID1088             1.3259177  0.2017437     6.572 4.95e-11 ***\nDESTIN_GRID_ID1094            -0.0438293  0.2105912    -0.208 0.835131    \nDESTIN_GRID_ID1095             0.7458049  0.2078101     3.589 0.000332 ***\nDESTIN_GRID_ID1096            -0.1205974  0.2114139    -0.570 0.568384    \nDESTIN_GRID_ID1097             3.1204334  0.2001200    15.593  &lt; 2e-16 ***\nDESTIN_GRID_ID1098             0.7889716  0.2030461     3.886 0.000102 ***\nDESTIN_GRID_ID1099             2.2514698  0.2004187    11.234  &lt; 2e-16 ***\nDESTIN_GRID_ID1105             3.7042060  0.2006742    18.459  &lt; 2e-16 ***\nDESTIN_GRID_ID1106            -0.6217078  0.2634616    -2.360 0.018286 *  \nDESTIN_GRID_ID1107             2.2845603  0.2008809    11.373  &lt; 2e-16 ***\nDESTIN_GRID_ID1108             5.0075825  0.2000232    25.035  &lt; 2e-16 ***\nDESTIN_GRID_ID1109             0.8618805  0.2061574     4.181 2.91e-05 ***\nDESTIN_GRID_ID1116             1.4507348  0.2012667     7.208 5.68e-13 ***\nDESTIN_GRID_ID1117             1.1443408  0.2015436     5.678 1.36e-08 ***\nDESTIN_GRID_ID1118             1.3710197  0.2012810     6.811 9.66e-12 ***\nDESTIN_GRID_ID1119             1.7036749  0.2005564     8.495  &lt; 2e-16 ***\nDESTIN_GRID_ID1120             1.5778590  0.2013880     7.835 4.69e-15 ***\nDESTIN_GRID_ID1129             3.1575029  0.2002325    15.769  &lt; 2e-16 ***\nDESTIN_GRID_ID1130             3.1524903  0.2001984    15.747  &lt; 2e-16 ***\nDESTIN_GRID_ID1131             2.4554521  0.2012619    12.200  &lt; 2e-16 ***\nDESTIN_GRID_ID1136             1.1436890  0.2017687     5.668 1.44e-08 ***\nDESTIN_GRID_ID1138             0.3176592  0.2045058     1.553 0.120351    \nDESTIN_GRID_ID1139             2.5952456  0.2001933    12.964  &lt; 2e-16 ***\nDESTIN_GRID_ID1141             2.2845905  0.2004079    11.400  &lt; 2e-16 ***\nDESTIN_GRID_ID1148            -0.2284607  0.2348448    -0.973 0.330645    \nDESTIN_GRID_ID1149             1.7663529  0.2023929     8.727  &lt; 2e-16 ***\nDESTIN_GRID_ID1150             3.2444568  0.2001444    16.211  &lt; 2e-16 ***\nDESTIN_GRID_ID1151             2.2110085  0.2006290    11.020  &lt; 2e-16 ***\nDESTIN_GRID_ID1158             0.9560648  0.2012949     4.750 2.04e-06 ***\nDESTIN_GRID_ID1159             2.1477542  0.2003019    10.723  &lt; 2e-16 ***\nDESTIN_GRID_ID1160             3.0692656  0.2001180    15.337  &lt; 2e-16 ***\nDESTIN_GRID_ID1171             3.4048413  0.2001814    17.009  &lt; 2e-16 ***\nDESTIN_GRID_ID1172             4.0816585  0.2000752    20.401  &lt; 2e-16 ***\nDESTIN_GRID_ID1173             1.3189740  0.2021809     6.524 6.86e-11 ***\nDESTIN_GRID_ID1178             2.0380574  0.2004401    10.168  &lt; 2e-16 ***\nDESTIN_GRID_ID1179             2.7173108  0.2001632    13.575  &lt; 2e-16 ***\nDESTIN_GRID_ID1180             2.8699500  0.2001279    14.341  &lt; 2e-16 ***\nDESTIN_GRID_ID1181             1.9927474  0.2003558     9.946  &lt; 2e-16 ***\nDESTIN_GRID_ID1183             1.3087395  0.2013832     6.499 8.10e-11 ***\nDESTIN_GRID_ID1190             1.6519037  0.2057340     8.029 9.80e-16 ***\nDESTIN_GRID_ID1192             2.9680982  0.2002926    14.819  &lt; 2e-16 ***\nDESTIN_GRID_ID1193             2.4486107  0.2004321    12.217  &lt; 2e-16 ***\nDESTIN_GRID_ID1194             0.8575160  0.2041321     4.201 2.66e-05 ***\nDESTIN_GRID_ID1200             2.0039817  0.2004465     9.998  &lt; 2e-16 ***\nDESTIN_GRID_ID1201             2.6767182  0.2002004    13.370  &lt; 2e-16 ***\nDESTIN_GRID_ID1203             2.1576472  0.2003782    10.768  &lt; 2e-16 ***\nDESTIN_GRID_ID1204             1.6409069  0.2007854     8.172 3.02e-16 ***\nDESTIN_GRID_ID1211            -0.5112497  0.3091206    -1.654 0.098151 .  \nDESTIN_GRID_ID1214             2.9563148  0.2002399    14.764  &lt; 2e-16 ***\nDESTIN_GRID_ID1215            -0.6976232  0.2392535    -2.916 0.003547 ** \nDESTIN_GRID_ID1216             1.0240063  0.2073511     4.939 7.87e-07 ***\nDESTIN_GRID_ID1220             2.6935653  0.2002073    13.454  &lt; 2e-16 ***\nDESTIN_GRID_ID1221             2.5869014  0.2001686    12.924  &lt; 2e-16 ***\nDESTIN_GRID_ID1222             2.1712981  0.2008028    10.813  &lt; 2e-16 ***\nDESTIN_GRID_ID1223             1.6547372  0.2007227     8.244  &lt; 2e-16 ***\nDESTIN_GRID_ID1224             1.9648381  0.2005263     9.798  &lt; 2e-16 ***\nDESTIN_GRID_ID1231             0.9200112  0.2092558     4.397 1.10e-05 ***\nDESTIN_GRID_ID1232             0.7931685  0.2140431     3.706 0.000211 ***\nDESTIN_GRID_ID1235             0.5402456  0.2028790     2.663 0.007747 ** \nDESTIN_GRID_ID1236             1.8295943  0.2013751     9.086  &lt; 2e-16 ***\nDESTIN_GRID_ID1241             1.5425963  0.2008108     7.682 1.57e-14 ***\nDESTIN_GRID_ID1242             1.9778760  0.2003893     9.870  &lt; 2e-16 ***\nDESTIN_GRID_ID1243             2.5938154  0.2001796    12.957  &lt; 2e-16 ***\nDESTIN_GRID_ID1246             2.3753506  0.2003231    11.858  &lt; 2e-16 ***\nDESTIN_GRID_ID1256             1.8227903  0.2008182     9.077  &lt; 2e-16 ***\nDESTIN_GRID_ID1257             2.5423216  0.2005703    12.675  &lt; 2e-16 ***\nDESTIN_GRID_ID1258             1.5833745  0.2022967     7.827 5.00e-15 ***\nDESTIN_GRID_ID1262             1.1216441  0.2010881     5.578 2.43e-08 ***\nDESTIN_GRID_ID1263             2.9279806  0.2001115    14.632  &lt; 2e-16 ***\nDESTIN_GRID_ID1264             1.6426713  0.2007501     8.183 2.78e-16 ***\nDESTIN_GRID_ID1265             1.7106817  0.2007541     8.521  &lt; 2e-16 ***\nDESTIN_GRID_ID1266             2.0211123  0.2005597    10.077  &lt; 2e-16 ***\nDESTIN_GRID_ID1267             1.5826393  0.2014073     7.858 3.91e-15 ***\nDESTIN_GRID_ID1272            -0.9430819  0.2588963    -3.643 0.000270 ***\nDESTIN_GRID_ID1273             2.0310860  0.2010380    10.103  &lt; 2e-16 ***\nDESTIN_GRID_ID1277             3.4261481  0.2001354    17.119  &lt; 2e-16 ***\nDESTIN_GRID_ID1278             1.2274134  0.2018172     6.082 1.19e-09 ***\nDESTIN_GRID_ID1283             4.1874104  0.2000482    20.932  &lt; 2e-16 ***\nDESTIN_GRID_ID1284             2.5743601  0.2001822    12.860  &lt; 2e-16 ***\nDESTIN_GRID_ID1285             3.0859431  0.2001056    15.422  &lt; 2e-16 ***\nDESTIN_GRID_ID1286             1.2231965  0.2011808     6.080 1.20e-09 ***\nDESTIN_GRID_ID1289            -0.2763292  0.2123743    -1.301 0.193210    \nDESTIN_GRID_ID1293            -0.4777559  0.2294751    -2.082 0.037347 *  \nDESTIN_GRID_ID1294             3.0279256  0.2004051    15.109  &lt; 2e-16 ***\nDESTIN_GRID_ID1295             1.0035194  0.2036349     4.928 8.31e-07 ***\nDESTIN_GRID_ID1298             2.1364042  0.2004982    10.655  &lt; 2e-16 ***\nDESTIN_GRID_ID1299             2.9383517  0.2003397    14.667  &lt; 2e-16 ***\nDESTIN_GRID_ID1304             2.9127493  0.2001572    14.552  &lt; 2e-16 ***\nDESTIN_GRID_ID1305             2.5977245  0.2001370    12.980  &lt; 2e-16 ***\nDESTIN_GRID_ID1307             1.2851837  0.2033618     6.320 2.62e-10 ***\nDESTIN_GRID_ID1308             2.5094853  0.2002745    12.530  &lt; 2e-16 ***\nDESTIN_GRID_ID1310            -1.2827485  0.2562064    -5.007 5.54e-07 ***\nDESTIN_GRID_ID1316             0.3397694  0.2055192     1.653 0.098285 .  \nDESTIN_GRID_ID1317             1.0926355  0.2016121     5.419 5.98e-08 ***\nDESTIN_GRID_ID1318             0.5559931  0.2030845     2.738 0.006186 ** \nDESTIN_GRID_ID1319             3.9800606  0.2000803    19.892  &lt; 2e-16 ***\nDESTIN_GRID_ID1320             1.6797167  0.2015661     8.333  &lt; 2e-16 ***\nDESTIN_GRID_ID1324             3.0740039  0.2011179    15.285  &lt; 2e-16 ***\nDESTIN_GRID_ID1325             0.9513370  0.2013445     4.725 2.30e-06 ***\nDESTIN_GRID_ID1326             2.4970078  0.2001733    12.474  &lt; 2e-16 ***\nDESTIN_GRID_ID1327             2.4134606  0.2001876    12.056  &lt; 2e-16 ***\nDESTIN_GRID_ID1328             1.8938013  0.2003932     9.450  &lt; 2e-16 ***\nDESTIN_GRID_ID1329             2.1692615  0.2005791    10.815  &lt; 2e-16 ***\nDESTIN_GRID_ID1330             2.9352166  0.2004501    14.643  &lt; 2e-16 ***\nDESTIN_GRID_ID1331            -1.3856265  0.3000018    -4.619 3.86e-06 ***\nDESTIN_GRID_ID1333             1.0584831  0.2016835     5.248 1.54e-07 ***\nDESTIN_GRID_ID1334             1.5905019  0.2012441     7.903 2.72e-15 ***\nDESTIN_GRID_ID1335             1.4715696  0.2018348     7.291 3.08e-13 ***\nDESTIN_GRID_ID1336            -0.3669800  0.2325629    -1.578 0.114570    \nDESTIN_GRID_ID1337             0.5943335  0.2046569     2.904 0.003684 ** \nDESTIN_GRID_ID1338            -1.6673224  0.2343640    -7.114 1.13e-12 ***\nDESTIN_GRID_ID1339             3.6998335  0.2000898    18.491  &lt; 2e-16 ***\nDESTIN_GRID_ID1340             3.0171889  0.2002640    15.066  &lt; 2e-16 ***\nDESTIN_GRID_ID1341            -2.1229944  0.4062029    -5.226 1.73e-07 ***\nDESTIN_GRID_ID1346             1.9392061  0.2005430     9.670  &lt; 2e-16 ***\nDESTIN_GRID_ID1347             3.5081622  0.2000663    17.535  &lt; 2e-16 ***\nDESTIN_GRID_ID1348             2.3787344  0.2001884    11.882  &lt; 2e-16 ***\nDESTIN_GRID_ID1349             3.1283585  0.2001393    15.631  &lt; 2e-16 ***\nDESTIN_GRID_ID1350             1.3250836  0.2017451     6.568 5.10e-11 ***\nDESTIN_GRID_ID1353             2.3583770  0.2003186    11.773  &lt; 2e-16 ***\nDESTIN_GRID_ID1354             0.6267923  0.2021912     3.100 0.001935 ** \nDESTIN_GRID_ID1355             1.7152331  0.2008254     8.541  &lt; 2e-16 ***\nDESTIN_GRID_ID1357             0.4408168  0.2056184     2.144 0.032044 *  \nDESTIN_GRID_ID1358             3.4962944  0.2001246    17.471  &lt; 2e-16 ***\nDESTIN_GRID_ID1359             2.5313869  0.2002863    12.639  &lt; 2e-16 ***\nDESTIN_GRID_ID1360             2.1137944  0.2004657    10.544  &lt; 2e-16 ***\nDESTIN_GRID_ID1361             3.2726680  0.2002258    16.345  &lt; 2e-16 ***\nDESTIN_GRID_ID1362            -0.5004526  0.2449502    -2.043 0.041045 *  \nDESTIN_GRID_ID1368             1.3648561  0.2005212     6.807 1.00e-11 ***\nDESTIN_GRID_ID1369             1.3793135  0.2004912     6.880 6.00e-12 ***\nDESTIN_GRID_ID1370             3.8677323  0.2000442    19.334  &lt; 2e-16 ***\nDESTIN_GRID_ID1371             1.8551851  0.2005431     9.251  &lt; 2e-16 ***\nDESTIN_GRID_ID1372             0.7140975  0.2023362     3.529 0.000417 ***\nDESTIN_GRID_ID1373             0.0956074  0.2064762     0.463 0.643333    \nDESTIN_GRID_ID1374             1.2272915  0.2008874     6.109 1.00e-09 ***\nDESTIN_GRID_ID1375             2.5391529  0.2003908    12.671  &lt; 2e-16 ***\nDESTIN_GRID_ID1376             1.1252045  0.2021053     5.567 2.59e-08 ***\nDESTIN_GRID_ID1379             0.6372926  0.2051137     3.107 0.001890 ** \nDESTIN_GRID_ID1380             3.7316308  0.2000724    18.651  &lt; 2e-16 ***\nDESTIN_GRID_ID1381             4.3504599  0.2000420    21.748  &lt; 2e-16 ***\nDESTIN_GRID_ID1382             3.3801621  0.2002012    16.884  &lt; 2e-16 ***\nDESTIN_GRID_ID1383             1.1008147  0.2032867     5.415 6.13e-08 ***\nDESTIN_GRID_ID1388             1.8267605  0.2003286     9.119  &lt; 2e-16 ***\nDESTIN_GRID_ID1389             1.4421383  0.2003939     7.197 6.18e-13 ***\nDESTIN_GRID_ID1390             2.0190318  0.2002668    10.082  &lt; 2e-16 ***\nDESTIN_GRID_ID1391             2.8257111  0.2001822    14.116  &lt; 2e-16 ***\nDESTIN_GRID_ID1392             1.8416841  0.2039002     9.032  &lt; 2e-16 ***\nDESTIN_GRID_ID1393             0.2276833  0.2026758     1.123 0.261273    \nDESTIN_GRID_ID1394             2.0288024  0.2003090    10.128  &lt; 2e-16 ***\nDESTIN_GRID_ID1395             2.2540514  0.2002516    11.256  &lt; 2e-16 ***\nDESTIN_GRID_ID1396             2.8351466  0.2001864    14.163  &lt; 2e-16 ***\nDESTIN_GRID_ID1397             2.5927984  0.2002485    12.948  &lt; 2e-16 ***\nDESTIN_GRID_ID1398             1.4996345  0.2015786     7.439 1.01e-13 ***\nDESTIN_GRID_ID1400             2.3838649  0.2005398    11.887  &lt; 2e-16 ***\nDESTIN_GRID_ID1401             3.5855996  0.2000761    17.921  &lt; 2e-16 ***\nDESTIN_GRID_ID1402             2.8107952  0.2002367    14.037  &lt; 2e-16 ***\nDESTIN_GRID_ID1404             3.6286161  0.2009646    18.056  &lt; 2e-16 ***\nDESTIN_GRID_ID1410             2.1965766  0.2001872    10.973  &lt; 2e-16 ***\nDESTIN_GRID_ID1411             1.5681092  0.2003990     7.825 5.08e-15 ***\nDESTIN_GRID_ID1412             3.4784668  0.2000607    17.387  &lt; 2e-16 ***\nDESTIN_GRID_ID1413             2.5476543  0.2002000    12.726  &lt; 2e-16 ***\nDESTIN_GRID_ID1414             1.8111556  0.2003753     9.039  &lt; 2e-16 ***\nDESTIN_GRID_ID1415             1.7313303  0.2004684     8.636  &lt; 2e-16 ***\nDESTIN_GRID_ID1416             1.9146456  0.2004508     9.552  &lt; 2e-16 ***\nDESTIN_GRID_ID1417             1.7633174  0.2003886     8.799  &lt; 2e-16 ***\nDESTIN_GRID_ID1418             2.5222280  0.2002297    12.597  &lt; 2e-16 ***\nDESTIN_GRID_ID1419             1.8791092  0.2005701     9.369  &lt; 2e-16 ***\nDESTIN_GRID_ID1422             2.6852916  0.2002764    13.408  &lt; 2e-16 ***\nDESTIN_GRID_ID1423             3.1302918  0.2001931    15.636  &lt; 2e-16 ***\nDESTIN_GRID_ID1430             1.9765536  0.2003209     9.867  &lt; 2e-16 ***\nDESTIN_GRID_ID1431             3.6596896  0.2000428    18.295  &lt; 2e-16 ***\nDESTIN_GRID_ID1432             2.9821330  0.2000823    14.905  &lt; 2e-16 ***\nDESTIN_GRID_ID1433             0.8062651  0.2019903     3.992 6.56e-05 ***\nDESTIN_GRID_ID1434             2.9539790  0.2001200    14.761  &lt; 2e-16 ***\nDESTIN_GRID_ID1435             2.5278314  0.2001657    12.629  &lt; 2e-16 ***\nDESTIN_GRID_ID1436             0.1026288  0.2031625     0.505 0.613449    \nDESTIN_GRID_ID1437             2.7125384  0.2001689    13.551  &lt; 2e-16 ***\nDESTIN_GRID_ID1438             3.1755391  0.2000840    15.871  &lt; 2e-16 ***\nDESTIN_GRID_ID1439             3.2467353  0.2001090    16.225  &lt; 2e-16 ***\nDESTIN_GRID_ID1440             0.5121508  0.2038061     2.513 0.011973 *  \nDESTIN_GRID_ID1442             1.8994403  0.2008969     9.455  &lt; 2e-16 ***\nDESTIN_GRID_ID1443             2.9221016  0.2002296    14.594  &lt; 2e-16 ***\nDESTIN_GRID_ID1444             2.1622791  0.2010174    10.757  &lt; 2e-16 ***\nDESTIN_GRID_ID1452             2.1875630  0.2001943    10.927  &lt; 2e-16 ***\nDESTIN_GRID_ID1453             2.5568086  0.2001369    12.775  &lt; 2e-16 ***\nDESTIN_GRID_ID1454             1.8113602  0.2004085     9.038  &lt; 2e-16 ***\nDESTIN_GRID_ID1455             1.5155550  0.2005746     7.556 4.15e-14 ***\nDESTIN_GRID_ID1456             2.5804857  0.2001919    12.890  &lt; 2e-16 ***\nDESTIN_GRID_ID1457             3.2880601  0.2001284    16.430  &lt; 2e-16 ***\nDESTIN_GRID_ID1458             3.8905418  0.2000451    19.448  &lt; 2e-16 ***\nDESTIN_GRID_ID1459             2.1596760  0.2002618    10.784  &lt; 2e-16 ***\nDESTIN_GRID_ID1460             2.9121339  0.2001287    14.551  &lt; 2e-16 ***\nDESTIN_GRID_ID1461             1.2691591  0.2013057     6.305 2.89e-10 ***\nDESTIN_GRID_ID1464             2.9613365  0.2002400    14.789  &lt; 2e-16 ***\nDESTIN_GRID_ID1465             2.7395378  0.2004824    13.665  &lt; 2e-16 ***\nDESTIN_GRID_ID1472             0.9619851  0.2010244     4.785 1.71e-06 ***\nDESTIN_GRID_ID1473             1.7387597  0.2003059     8.681  &lt; 2e-16 ***\nDESTIN_GRID_ID1474             3.1734013  0.2000618    15.862  &lt; 2e-16 ***\nDESTIN_GRID_ID1475             3.3294040  0.2000631    16.642  &lt; 2e-16 ***\nDESTIN_GRID_ID1476             2.0911050  0.2002927    10.440  &lt; 2e-16 ***\nDESTIN_GRID_ID1477             4.0757199  0.2000302    20.376  &lt; 2e-16 ***\nDESTIN_GRID_ID1478             1.7197033  0.2003971     8.581  &lt; 2e-16 ***\nDESTIN_GRID_ID1479             1.8659948  0.2003336     9.314  &lt; 2e-16 ***\nDESTIN_GRID_ID1480             4.0401875  0.2000360    20.197  &lt; 2e-16 ***\nDESTIN_GRID_ID1481             0.9066725  0.2014885     4.500 6.80e-06 ***\nDESTIN_GRID_ID1482             0.9790847  0.2024151     4.837 1.32e-06 ***\nDESTIN_GRID_ID1485             2.0316487  0.2009170    10.112  &lt; 2e-16 ***\nDESTIN_GRID_ID1494             0.9665262  0.2008410     4.812 1.49e-06 ***\nDESTIN_GRID_ID1495             2.3560499  0.2001469    11.772  &lt; 2e-16 ***\nDESTIN_GRID_ID1496             3.5558413  0.2000431    17.775  &lt; 2e-16 ***\nDESTIN_GRID_ID1497             2.6076366  0.2001483    13.029  &lt; 2e-16 ***\nDESTIN_GRID_ID1498             2.5408493  0.2001830    12.693  &lt; 2e-16 ***\nDESTIN_GRID_ID1499             2.9137411  0.2001111    14.561  &lt; 2e-16 ***\nDESTIN_GRID_ID1500             2.5751349  0.2003048    12.856  &lt; 2e-16 ***\nDESTIN_GRID_ID1501             2.8287787  0.2001295    14.135  &lt; 2e-16 ***\nDESTIN_GRID_ID1502             2.6776008  0.2001880    13.375  &lt; 2e-16 ***\nDESTIN_GRID_ID1506            -0.0877130  0.2801117    -0.313 0.754177    \nDESTIN_GRID_ID1514            -1.7474276  0.6110101    -2.860 0.004238 ** \nDESTIN_GRID_ID1515             0.8165814  0.2021983     4.039 5.38e-05 ***\nDESTIN_GRID_ID1516             3.1817299  0.2000661    15.903  &lt; 2e-16 ***\nDESTIN_GRID_ID1517             3.0446205  0.2001294    15.213  &lt; 2e-16 ***\nDESTIN_GRID_ID1518             2.0872419  0.2002589    10.423  &lt; 2e-16 ***\nDESTIN_GRID_ID1519             2.9638036  0.2002452    14.801  &lt; 2e-16 ***\nDESTIN_GRID_ID1520             1.4641582  0.2006010     7.299 2.90e-13 ***\nDESTIN_GRID_ID1521             0.2268105  0.2025075     1.120 0.262709    \nDESTIN_GRID_ID1522             3.1631577  0.2001133    15.807  &lt; 2e-16 ***\nDESTIN_GRID_ID1523             1.6554916  0.2013861     8.220  &lt; 2e-16 ***\nDESTIN_GRID_ID1524             1.9845515  0.2009035     9.878  &lt; 2e-16 ***\nDESTIN_GRID_ID1527             1.1034945  0.2033621     5.426 5.75e-08 ***\nDESTIN_GRID_ID1535             0.9558889  0.2068686     4.621 3.82e-06 ***\nDESTIN_GRID_ID1536             1.5089060  0.2011119     7.503 6.25e-14 ***\nDESTIN_GRID_ID1537             2.5529508  0.2001602    12.755  &lt; 2e-16 ***\nDESTIN_GRID_ID1538             2.8072023  0.2001006    14.029  &lt; 2e-16 ***\nDESTIN_GRID_ID1539             2.4076865  0.2001413    12.030  &lt; 2e-16 ***\nDESTIN_GRID_ID1540             2.5060192  0.2001589    12.520  &lt; 2e-16 ***\nDESTIN_GRID_ID1541             3.2066562  0.2003184    16.008  &lt; 2e-16 ***\nDESTIN_GRID_ID1542             1.0010461  0.2018154     4.960 7.04e-07 ***\nDESTIN_GRID_ID1543             1.7466301  0.2042891     8.550  &lt; 2e-16 ***\nDESTIN_GRID_ID1544             2.0441865  0.2006749    10.187  &lt; 2e-16 ***\nDESTIN_GRID_ID1547            -0.0392960  0.2201714    -0.178 0.858347    \nDESTIN_GRID_ID1556             1.5825827  0.2024750     7.816 5.44e-15 ***\nDESTIN_GRID_ID1557             2.5092870  0.2003687    12.523  &lt; 2e-16 ***\nDESTIN_GRID_ID1558             2.5562533  0.2014410    12.690  &lt; 2e-16 ***\nDESTIN_GRID_ID1559             2.8043012  0.2001039    14.014  &lt; 2e-16 ***\nDESTIN_GRID_ID1560             3.1196825  0.2000865    15.592  &lt; 2e-16 ***\nDESTIN_GRID_ID1561             2.5522606  0.2002939    12.743  &lt; 2e-16 ***\nDESTIN_GRID_ID1562            -0.0600847  0.2034079    -0.295 0.767696    \nDESTIN_GRID_ID1563             1.7660708  0.2004280     8.811  &lt; 2e-16 ***\nDESTIN_GRID_ID1564             0.6806078  0.2017792     3.373 0.000743 ***\nDESTIN_GRID_ID1565             0.7517516  0.2019404     3.723 0.000197 ***\nDESTIN_GRID_ID1566             0.6363354  0.2032655     3.131 0.001745 ** \nDESTIN_GRID_ID1567            -0.9221555  0.2475424    -3.725 0.000195 ***\nDESTIN_GRID_ID1568             0.4181522  0.2150609     1.944 0.051854 .  \nDESTIN_GRID_ID1578            -0.2767711  0.2227487    -1.243 0.214042    \nDESTIN_GRID_ID1580             1.2183728  0.2011003     6.059 1.37e-09 ***\nDESTIN_GRID_ID1581             0.4074613  0.2014982     2.022 0.043160 *  \nDESTIN_GRID_ID1582             2.6876569  0.2001245    13.430  &lt; 2e-16 ***\nDESTIN_GRID_ID1583             1.8891768  0.2020672     9.349  &lt; 2e-16 ***\nDESTIN_GRID_ID1584             1.6602422  0.2007777     8.269  &lt; 2e-16 ***\nDESTIN_GRID_ID1585             2.6947598  0.2002562    13.457  &lt; 2e-16 ***\nDESTIN_GRID_ID1586             0.6761635  0.2018763     3.349 0.000810 ***\nDESTIN_GRID_ID1589            -0.4431197  0.2182521    -2.030 0.042325 *  \nDESTIN_GRID_ID1590             0.1253357  0.2188031     0.573 0.566764    \nDESTIN_GRID_ID1600             2.7175870  0.2008103    13.533  &lt; 2e-16 ***\nDESTIN_GRID_ID1601             2.0648793  0.2002309    10.312  &lt; 2e-16 ***\nDESTIN_GRID_ID1602             2.4023462  0.2002446    11.997  &lt; 2e-16 ***\nDESTIN_GRID_ID1603             3.2060843  0.2001187    16.021  &lt; 2e-16 ***\nDESTIN_GRID_ID1604             1.6322247  0.2004905     8.141 3.92e-16 ***\nDESTIN_GRID_ID1605             2.6997366  0.2001550    13.488  &lt; 2e-16 ***\nDESTIN_GRID_ID1606             2.8358144  0.2005408    14.141  &lt; 2e-16 ***\nDESTIN_GRID_ID1607             0.9111533  0.2013254     4.526 6.02e-06 ***\nDESTIN_GRID_ID1608             2.9242145  0.2002039    14.606  &lt; 2e-16 ***\nDESTIN_GRID_ID1609             2.7326563  0.2003178    13.642  &lt; 2e-16 ***\nDESTIN_GRID_ID1610             0.5111061  0.2188044     2.336 0.019496 *  \nDESTIN_GRID_ID1622             3.0257040  0.2007858    15.069  &lt; 2e-16 ***\nDESTIN_GRID_ID1623             2.9753773  0.2000934    14.870  &lt; 2e-16 ***\nDESTIN_GRID_ID1624             1.5719530  0.2005180     7.839 4.52e-15 ***\nDESTIN_GRID_ID1625             2.8890571  0.2001525    14.434  &lt; 2e-16 ***\nDESTIN_GRID_ID1626             4.3418117  0.2000292    21.706  &lt; 2e-16 ***\nDESTIN_GRID_ID1627             1.6326929  0.2004836     8.144 3.83e-16 ***\nDESTIN_GRID_ID1628             3.3226518  0.2001130    16.604  &lt; 2e-16 ***\nDESTIN_GRID_ID1629             1.7553183  0.2007187     8.745  &lt; 2e-16 ***\nDESTIN_GRID_ID1630             2.0203305  0.2006350    10.070  &lt; 2e-16 ***\nDESTIN_GRID_ID1631            -0.7839084  0.2275204    -3.445 0.000570 ***\nDESTIN_GRID_ID1642             0.6837064  0.2049600     3.336 0.000851 ***\nDESTIN_GRID_ID1643             2.5657994  0.2001681    12.818  &lt; 2e-16 ***\nDESTIN_GRID_ID1644             1.4925518  0.2008982     7.429 1.09e-13 ***\nDESTIN_GRID_ID1645             2.0876253  0.2003074    10.422  &lt; 2e-16 ***\nDESTIN_GRID_ID1646             1.9822300  0.2007212     9.876  &lt; 2e-16 ***\nDESTIN_GRID_ID1647             2.5968938  0.2001615    12.974  &lt; 2e-16 ***\nDESTIN_GRID_ID1648             2.4330617  0.2002136    12.152  &lt; 2e-16 ***\nDESTIN_GRID_ID1649             2.7205399  0.2001755    13.591  &lt; 2e-16 ***\nDESTIN_GRID_ID1650             2.9977130  0.2002226    14.972  &lt; 2e-16 ***\nDESTIN_GRID_ID1664            -0.3761788  0.2278267    -1.651 0.098706 .  \nDESTIN_GRID_ID1665             2.9688047  0.2001006    14.837  &lt; 2e-16 ***\nDESTIN_GRID_ID1666             1.8107361  0.2003253     9.039  &lt; 2e-16 ***\nDESTIN_GRID_ID1667             0.5802906  0.2050930     2.829 0.004664 ** \nDESTIN_GRID_ID1668             2.5845246  0.2001929    12.910  &lt; 2e-16 ***\nDESTIN_GRID_ID1670             3.2501549  0.2001024    16.242  &lt; 2e-16 ***\nDESTIN_GRID_ID1671             3.3082068  0.2003701    16.510  &lt; 2e-16 ***\nDESTIN_GRID_ID1672             2.6132035  0.2004448    13.037  &lt; 2e-16 ***\nDESTIN_GRID_ID1684             1.7569448  0.2013312     8.727  &lt; 2e-16 ***\nDESTIN_GRID_ID1685             2.5104340  0.2002197    12.538  &lt; 2e-16 ***\nDESTIN_GRID_ID1686             2.1710956  0.2002402    10.842  &lt; 2e-16 ***\nDESTIN_GRID_ID1687             2.0727857  0.2006281    10.331  &lt; 2e-16 ***\nDESTIN_GRID_ID1688             1.4422665  0.2006477     7.188 6.57e-13 ***\nDESTIN_GRID_ID1689             1.4103440  0.2007759     7.024 2.15e-12 ***\nDESTIN_GRID_ID1690             1.7644707  0.2006324     8.795  &lt; 2e-16 ***\nDESTIN_GRID_ID1691             2.8018815  0.2001747    13.997  &lt; 2e-16 ***\nDESTIN_GRID_ID1692             1.9028500  0.2007127     9.480  &lt; 2e-16 ***\nDESTIN_GRID_ID1706             2.3333214  0.2003545    11.646  &lt; 2e-16 ***\nDESTIN_GRID_ID1707             2.0921863  0.2002388    10.448  &lt; 2e-16 ***\nDESTIN_GRID_ID1708             2.4766451  0.2001839    12.372  &lt; 2e-16 ***\nDESTIN_GRID_ID1709             2.0402717  0.2003400    10.184  &lt; 2e-16 ***\nDESTIN_GRID_ID1710             2.7627317  0.2002002    13.800  &lt; 2e-16 ***\nDESTIN_GRID_ID1711             3.7257204  0.2000715    18.622  &lt; 2e-16 ***\nDESTIN_GRID_ID1712             3.1985191  0.2000933    15.985  &lt; 2e-16 ***\nDESTIN_GRID_ID1713             0.9385342  0.2012806     4.663 3.12e-06 ***\nDESTIN_GRID_ID1714             2.9671585  0.2002204    14.819  &lt; 2e-16 ***\nDESTIN_GRID_ID1726            -1.6190383  0.2828445    -5.724 1.04e-08 ***\nDESTIN_GRID_ID1727             2.6351504  0.2002095    13.162  &lt; 2e-16 ***\nDESTIN_GRID_ID1728             2.8724461  0.2001140    14.354  &lt; 2e-16 ***\nDESTIN_GRID_ID1729             2.0753883  0.2002846    10.362  &lt; 2e-16 ***\nDESTIN_GRID_ID1730             0.2252169  0.2038420     1.105 0.269220    \nDESTIN_GRID_ID1731             2.6332658  0.2002248    13.152  &lt; 2e-16 ***\nDESTIN_GRID_ID1732             2.8782504  0.2001239    14.382  &lt; 2e-16 ***\nDESTIN_GRID_ID1733             2.3744893  0.2002271    11.859  &lt; 2e-16 ***\nDESTIN_GRID_ID1734             3.0106292  0.2001362    15.043  &lt; 2e-16 ***\nDESTIN_GRID_ID1735             3.1458587  0.2006024    15.682  &lt; 2e-16 ***\nDESTIN_GRID_ID1748             1.8622951  0.2005259     9.287  &lt; 2e-16 ***\nDESTIN_GRID_ID1749             3.5637912  0.2000582    17.814  &lt; 2e-16 ***\nDESTIN_GRID_ID1750             2.0098191  0.2002766    10.035  &lt; 2e-16 ***\nDESTIN_GRID_ID1751             0.8906480  0.2014993     4.420 9.87e-06 ***\nDESTIN_GRID_ID1753             2.9648177  0.2001404    14.814  &lt; 2e-16 ***\nDESTIN_GRID_ID1754             4.0730564  0.2000397    20.361  &lt; 2e-16 ***\nDESTIN_GRID_ID1755             3.1794822  0.2001017    15.889  &lt; 2e-16 ***\nDESTIN_GRID_ID1756             2.4765628  0.2002393    12.368  &lt; 2e-16 ***\nDESTIN_GRID_ID1757             0.0097400  0.2094338     0.047 0.962907    \nDESTIN_GRID_ID1768            -0.1740349  0.2193869    -0.793 0.427616    \nDESTIN_GRID_ID1769             2.2890655  0.2002772    11.429  &lt; 2e-16 ***\nDESTIN_GRID_ID1770             2.5015362  0.2002730    12.491  &lt; 2e-16 ***\nDESTIN_GRID_ID1771             1.7370259  0.2005872     8.660  &lt; 2e-16 ***\nDESTIN_GRID_ID1772             1.2144014  0.2048265     5.929 3.05e-09 ***\nDESTIN_GRID_ID1774             2.5111640  0.2002355    12.541  &lt; 2e-16 ***\nDESTIN_GRID_ID1775             2.1165903  0.2003052    10.567  &lt; 2e-16 ***\nDESTIN_GRID_ID1776             4.0257515  0.2000432    20.124  &lt; 2e-16 ***\nDESTIN_GRID_ID1777             2.6911097  0.2002263    13.440  &lt; 2e-16 ***\nDESTIN_GRID_ID1778             1.7094122  0.2021217     8.457  &lt; 2e-16 ***\nDESTIN_GRID_ID1790             3.4092281  0.2001119    17.037  &lt; 2e-16 ***\nDESTIN_GRID_ID1791             3.0961392  0.2001537    15.469  &lt; 2e-16 ***\nDESTIN_GRID_ID1792             2.3341358  0.2004618    11.644  &lt; 2e-16 ***\nDESTIN_GRID_ID1793             1.5033504  0.2007706     7.488 7.00e-14 ***\nDESTIN_GRID_ID1794            -0.6217821  0.2457828    -2.530 0.011413 *  \nDESTIN_GRID_ID1795            -0.1152149  0.2085609    -0.552 0.580655    \nDESTIN_GRID_ID1796             2.8198684  0.2001862    14.086  &lt; 2e-16 ***\nDESTIN_GRID_ID1797             2.8052745  0.2001473    14.016  &lt; 2e-16 ***\nDESTIN_GRID_ID1798             2.8925255  0.2001559    14.451  &lt; 2e-16 ***\nDESTIN_GRID_ID1799             1.9948384  0.2005783     9.945  &lt; 2e-16 ***\nDESTIN_GRID_ID1800             1.6703277  0.2043497     8.174 2.99e-16 ***\nDESTIN_GRID_ID1811             2.5406768  0.2002622    12.687  &lt; 2e-16 ***\nDESTIN_GRID_ID1812             3.3987611  0.2000726    16.988  &lt; 2e-16 ***\nDESTIN_GRID_ID1813             2.7452525  0.2001546    13.716  &lt; 2e-16 ***\nDESTIN_GRID_ID1817             2.4005819  0.2003489    11.982  &lt; 2e-16 ***\nDESTIN_GRID_ID1818             2.7030601  0.2001724    13.504  &lt; 2e-16 ***\nDESTIN_GRID_ID1819             3.9965440  0.2000460    19.978  &lt; 2e-16 ***\nDESTIN_GRID_ID1820             0.7735637  0.2036678     3.798 0.000146 ***\nDESTIN_GRID_ID1832             3.9586667  0.2000681    19.787  &lt; 2e-16 ***\nDESTIN_GRID_ID1833             2.1860581  0.2003076    10.914  &lt; 2e-16 ***\nDESTIN_GRID_ID1834             2.1461932  0.2002770    10.716  &lt; 2e-16 ***\nDESTIN_GRID_ID1835             1.4031177  0.2009470     6.983 2.90e-12 ***\nDESTIN_GRID_ID1837            -0.5199752  0.2369177    -2.195 0.028182 *  \nDESTIN_GRID_ID1839             2.1793917  0.2004322    10.873  &lt; 2e-16 ***\nDESTIN_GRID_ID1840             3.7390385  0.2000647    18.689  &lt; 2e-16 ***\nDESTIN_GRID_ID1841             1.4991461  0.2016505     7.434 1.05e-13 ***\nDESTIN_GRID_ID1842             2.8752453  0.2007505    14.322  &lt; 2e-16 ***\nDESTIN_GRID_ID1853             2.5121943  0.2002253    12.547  &lt; 2e-16 ***\nDESTIN_GRID_ID1854             2.8582118  0.2001651    14.279  &lt; 2e-16 ***\nDESTIN_GRID_ID1855             2.8689742  0.2001663    14.333  &lt; 2e-16 ***\nDESTIN_GRID_ID1858            -0.1284975  0.2203367    -0.583 0.559767    \nDESTIN_GRID_ID1860             2.8539009  0.2008949    14.206  &lt; 2e-16 ***\nDESTIN_GRID_ID1861             2.6287944  0.2002544    13.127  &lt; 2e-16 ***\nDESTIN_GRID_ID1874             2.9553747  0.2002514    14.758  &lt; 2e-16 ***\nDESTIN_GRID_ID1875             1.1473147  0.2017751     5.686 1.30e-08 ***\nDESTIN_GRID_ID1876             2.8950327  0.2011901    14.390  &lt; 2e-16 ***\nDESTIN_GRID_ID1877             2.5195494  0.2002352    12.583  &lt; 2e-16 ***\nDESTIN_GRID_ID1880            -0.3155168  0.2380505    -1.325 0.185032    \nDESTIN_GRID_ID1882             2.8563000  0.2002197    14.266  &lt; 2e-16 ***\nDESTIN_GRID_ID1883             2.1766489  0.2012250    10.817  &lt; 2e-16 ***\nDESTIN_GRID_ID1895             2.4723194  0.2002851    12.344  &lt; 2e-16 ***\nDESTIN_GRID_ID1896             1.9535558  0.2004659     9.745  &lt; 2e-16 ***\nDESTIN_GRID_ID1897             1.5456826  0.2008758     7.695 1.42e-14 ***\nDESTIN_GRID_ID1898            -0.9678211  0.2338953    -4.138 3.51e-05 ***\nDESTIN_GRID_ID1901            -0.4462679  0.2426295    -1.839 0.065871 .  \nDESTIN_GRID_ID1903             2.0382765  0.2009034    10.146  &lt; 2e-16 ***\nDESTIN_GRID_ID1916             0.4018293  0.2132967     1.884 0.059579 .  \nDESTIN_GRID_ID1917             2.0182961  0.2004856    10.067  &lt; 2e-16 ***\nDESTIN_GRID_ID1918             3.1562177  0.2002606    15.761  &lt; 2e-16 ***\nDESTIN_GRID_ID1919             3.0081402  0.2001559    15.029  &lt; 2e-16 ***\nDESTIN_GRID_ID1922             0.0518055  0.2165579     0.239 0.810933    \nDESTIN_GRID_ID1924             1.9709130  0.2009768     9.807  &lt; 2e-16 ***\nDESTIN_GRID_ID1937             2.4741880  0.2003488    12.349  &lt; 2e-16 ***\nDESTIN_GRID_ID1938             2.9421486  0.2001584    14.699  &lt; 2e-16 ***\nDESTIN_GRID_ID1939             2.9520472  0.2002025    14.745  &lt; 2e-16 ***\nDESTIN_GRID_ID1942             0.4461779  0.2113103     2.111 0.034731 *  \nDESTIN_GRID_ID1958            -0.1691225  0.2412098    -0.701 0.483214    \nDESTIN_GRID_ID1959             2.1486962  0.2005310    10.715  &lt; 2e-16 ***\nDESTIN_GRID_ID1960             4.5054846  0.2000255    22.525  &lt; 2e-16 ***\nDESTIN_GRID_ID1961             2.1028387  0.2004743    10.489  &lt; 2e-16 ***\nDESTIN_GRID_ID1962             2.7931117  0.2002392    13.949  &lt; 2e-16 ***\nDESTIN_GRID_ID1964             0.7246455  0.2196936     3.298 0.000972 ***\nDESTIN_GRID_ID1979             2.2133213  0.2005512    11.036  &lt; 2e-16 ***\nDESTIN_GRID_ID1980             0.5626929  0.2017895     2.789 0.005295 ** \nDESTIN_GRID_ID1981             2.6351512  0.2002432    13.160  &lt; 2e-16 ***\nDESTIN_GRID_ID1982             1.4137262  0.2016167     7.012 2.35e-12 ***\nDESTIN_GRID_ID1983             2.9330729  0.2002179    14.649  &lt; 2e-16 ***\nDESTIN_GRID_ID1984             1.5817381  0.2008567     7.875 3.41e-15 ***\nDESTIN_GRID_ID1985             2.1286719  0.2005313    10.615  &lt; 2e-16 ***\nDESTIN_GRID_ID2001             2.4367188  0.2003013    12.165  &lt; 2e-16 ***\nDESTIN_GRID_ID2002             2.9697484  0.2001243    14.840  &lt; 2e-16 ***\nDESTIN_GRID_ID2003             3.0146453  0.2001465    15.062  &lt; 2e-16 ***\nDESTIN_GRID_ID2004             3.4005939  0.2001266    16.992  &lt; 2e-16 ***\nDESTIN_GRID_ID2005             2.6907627  0.2002443    13.437  &lt; 2e-16 ***\nDESTIN_GRID_ID2006             3.2717698  0.2001864    16.344  &lt; 2e-16 ***\nDESTIN_GRID_ID2007             0.7253493  0.2046140     3.545 0.000393 ***\nDESTIN_GRID_ID2022             2.9666139  0.2003240    14.809  &lt; 2e-16 ***\nDESTIN_GRID_ID2023             3.2106281  0.2001224    16.043  &lt; 2e-16 ***\nDESTIN_GRID_ID2024             2.8606204  0.2001606    14.292  &lt; 2e-16 ***\nDESTIN_GRID_ID2025             2.5974216  0.2002211    12.973  &lt; 2e-16 ***\nDESTIN_GRID_ID2026             1.7816477  0.2008265     8.872  &lt; 2e-16 ***\nDESTIN_GRID_ID2027             3.1631572  0.2001647    15.803  &lt; 2e-16 ***\nDESTIN_GRID_ID2043             2.2316209  0.2004929    11.131  &lt; 2e-16 ***\nDESTIN_GRID_ID2044             2.8651036  0.2001762    14.313  &lt; 2e-16 ***\nDESTIN_GRID_ID2045             0.2646984  0.2063136     1.283 0.199495    \nDESTIN_GRID_ID2046             3.5053699  0.2000679    17.521  &lt; 2e-16 ***\nDESTIN_GRID_ID2047             2.4502034  0.2002819    12.234  &lt; 2e-16 ***\nDESTIN_GRID_ID2048             2.6208023  0.2002599    13.087  &lt; 2e-16 ***\nDESTIN_GRID_ID2049             0.6371358  0.2037721     3.127 0.001768 ** \nDESTIN_GRID_ID2064             2.7660865  0.2002514    13.813  &lt; 2e-16 ***\nDESTIN_GRID_ID2065             2.0057463  0.2004770    10.005  &lt; 2e-16 ***\nDESTIN_GRID_ID2066             0.4627298  0.2051674     2.255 0.024110 *  \nDESTIN_GRID_ID2067             4.6997153  0.2000223    23.496  &lt; 2e-16 ***\nDESTIN_GRID_ID2068             2.6536695  0.2004761    13.237  &lt; 2e-16 ***\nDESTIN_GRID_ID2069             2.7954633  0.2002906    13.957  &lt; 2e-16 ***\nDESTIN_GRID_ID2085             2.0475003  0.2006430    10.205  &lt; 2e-16 ***\nDESTIN_GRID_ID2086             3.5073111  0.2001051    17.527  &lt; 2e-16 ***\nDESTIN_GRID_ID2087             2.3155560  0.2003293    11.559  &lt; 2e-16 ***\nDESTIN_GRID_ID2088             2.6945741  0.2001677    13.462  &lt; 2e-16 ***\nDESTIN_GRID_ID2089             2.0327191  0.2005281    10.137  &lt; 2e-16 ***\nDESTIN_GRID_ID2090             4.2947924  0.2000418    21.469  &lt; 2e-16 ***\nDESTIN_GRID_ID2091             1.7896141  0.2040080     8.772  &lt; 2e-16 ***\nDESTIN_GRID_ID2105             1.9403337  0.2195408     8.838  &lt; 2e-16 ***\nDESTIN_GRID_ID2106             0.6990682  0.2025217     3.452 0.000557 ***\nDESTIN_GRID_ID2107             1.6006439  0.2007162     7.975 1.53e-15 ***\nDESTIN_GRID_ID2108             3.2862064  0.2001523    16.419  &lt; 2e-16 ***\nDESTIN_GRID_ID2109             2.5272711  0.2002100    12.623  &lt; 2e-16 ***\nDESTIN_GRID_ID2110             1.9196124  0.2006798     9.566  &lt; 2e-16 ***\nDESTIN_GRID_ID2111             0.0807105  0.2119601     0.381 0.703365    \nDESTIN_GRID_ID2128             1.7344775  0.2014483     8.610  &lt; 2e-16 ***\nDESTIN_GRID_ID2129             1.5312149  0.2015931     7.596 3.06e-14 ***\nDESTIN_GRID_ID2130             3.0788544  0.2001178    15.385  &lt; 2e-16 ***\nDESTIN_GRID_ID2131             3.1305684  0.2002025    15.637  &lt; 2e-16 ***\nDESTIN_GRID_ID2132             3.1300728  0.2001784    15.636  &lt; 2e-16 ***\nDESTIN_GRID_ID2148             2.3416842  0.2010133    11.649  &lt; 2e-16 ***\nDESTIN_GRID_ID2149             0.7740083  0.2026979     3.819 0.000134 ***\nDESTIN_GRID_ID2150             3.0069800  0.2002018    15.020  &lt; 2e-16 ***\nDESTIN_GRID_ID2151             3.5731190  0.2000764    17.859  &lt; 2e-16 ***\nDESTIN_GRID_ID2152             3.3206896  0.2001366    16.592  &lt; 2e-16 ***\nDESTIN_GRID_ID2153             2.7241454  0.2003968    13.594  &lt; 2e-16 ***\nDESTIN_GRID_ID2171             2.8928887  0.2002349    14.447  &lt; 2e-16 ***\nDESTIN_GRID_ID2172             1.8039007  0.2007061     8.988  &lt; 2e-16 ***\nDESTIN_GRID_ID2173             2.2532309  0.2003258    11.248  &lt; 2e-16 ***\nDESTIN_GRID_ID2174             2.6611464  0.2003430    13.283  &lt; 2e-16 ***\nDESTIN_GRID_ID2191             2.5147269  0.2008517    12.520  &lt; 2e-16 ***\nDESTIN_GRID_ID2192             1.4780344  0.2014608     7.337 2.19e-13 ***\nDESTIN_GRID_ID2193             2.0975959  0.2005254    10.461  &lt; 2e-16 ***\nDESTIN_GRID_ID2194             2.8771033  0.2002164    14.370  &lt; 2e-16 ***\nDESTIN_GRID_ID2195             1.8613132  0.2061567     9.029  &lt; 2e-16 ***\nDESTIN_GRID_ID2212             1.6205462  0.2117913     7.652 1.98e-14 ***\nDESTIN_GRID_ID2213            -0.0982287  0.2112077    -0.465 0.641873    \nDESTIN_GRID_ID2214             0.7150448  0.2073952     3.448 0.000565 ***\nDESTIN_GRID_ID2215             2.4577348  0.2004893    12.259  &lt; 2e-16 ***\nDESTIN_GRID_ID2216             1.2446483  0.2016263     6.173 6.70e-10 ***\nDESTIN_GRID_ID2233             0.9823814  0.2084727     4.712 2.45e-06 ***\nDESTIN_GRID_ID2234             2.4709761  0.2021038    12.226  &lt; 2e-16 ***\nDESTIN_GRID_ID2235             1.7126147  0.2019054     8.482  &lt; 2e-16 ***\nDESTIN_GRID_ID2236             0.5860802  0.2037436     2.877 0.004020 ** \nDESTIN_GRID_ID2237            -0.9554710  0.2729158    -3.501 0.000464 ***\nDESTIN_GRID_ID2256            -0.3458058  0.2266364    -1.526 0.127055    \nDESTIN_GRID_ID2257             0.9677900  0.2039493     4.745 2.08e-06 ***\nDESTIN_GRID_ID2258             0.4837842  0.2047708     2.363 0.018149 *  \nDESTIN_GRID_ID2259             0.7660919  0.2185235     3.506 0.000455 ***\nDESTIN_GRID_ID2277             0.6610321  0.2164484     3.054 0.002258 ** \nDESTIN_GRID_ID2278             0.8427859  0.2067921     4.076 4.59e-05 ***\nDESTIN_GRID_ID2279             0.7386043  0.2037657     3.625 0.000289 ***\nDESTIN_GRID_ID2280             0.6183525  0.2161290     2.861 0.004223 ** \nDESTIN_GRID_ID2297             2.0244932  0.2020666    10.019  &lt; 2e-16 ***\nDESTIN_GRID_ID2300             0.7479141  0.2106813     3.550 0.000385 ***\nDESTIN_GRID_ID2301             0.9292018  0.2032518     4.572 4.84e-06 ***\nDESTIN_GRID_ID2318             3.0746972  0.2005926    15.328  &lt; 2e-16 ***\nDESTIN_GRID_ID2319             4.1956250  0.2001562    20.962  &lt; 2e-16 ***\nDESTIN_GRID_ID2322             3.4856648  0.2003006    17.402  &lt; 2e-16 ***\nDESTIN_GRID_ID2337             3.9662715  0.2010618    19.727  &lt; 2e-16 ***\nDESTIN_GRID_ID2341             4.7069369  0.2001184    23.521  &lt; 2e-16 ***\nDESTIN_GRID_ID2343             2.5092456  0.2007526    12.499  &lt; 2e-16 ***\nDESTIN_GRID_ID2361             2.7056716  0.2008024    13.474  &lt; 2e-16 ***\nDESTIN_GRID_ID2364             1.8744980  0.2020998     9.275  &lt; 2e-16 ***\nDESTIN_GRID_ID2379             1.6555581  0.2096500     7.897 2.86e-15 ***\nDESTIN_GRID_ID2384             2.2663892  0.2019144    11.225  &lt; 2e-16 ***\nDESTIN_GRID_ID2405             2.1389696  0.2017801    10.600  &lt; 2e-16 ***\nDESTIN_GRID_ID2406             0.3171088  0.2158224     1.469 0.141750    \nDESTIN_GRID_ID2426             2.0382011  0.2115172     9.636  &lt; 2e-16 ***\nDESTIN_GRID_ID2427             1.7687483  0.2031138     8.708  &lt; 2e-16 ***\nDESTIN_GRID_ID2505             2.5692024  0.2195424    11.703  &lt; 2e-16 ***\nlog(ORIGIN_HDB_DWELLING_UNIT)  0.1057278  0.0001375   768.658  &lt; 2e-16 ***\nlog(ORIGIN_FINSERV_COUNT)      0.2628745  0.0004581   573.857  &lt; 2e-16 ***\nlog(ORIGIN_MRT_EXIT_COUNT)     0.2823123  0.0007167   393.879  &lt; 2e-16 ***\nlog(dist)                     -1.4965252  0.0004749 -3151.570  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance:  8089495  on 60783  degrees of freedom\nAIC: 8378800\n\nNumber of Fisher Scoring iterations: 7\n\n\n\ndecSIM$coefficients[822:825]\n\nlog(ORIGIN_HDB_DWELLING_UNIT)     log(ORIGIN_FINSERV_COUNT) \n                    0.1057278                     0.2628745 \n   log(ORIGIN_MRT_EXIT_COUNT)                     log(dist) \n                    0.2823123                    -1.4965252 \n\n\n\nCalcRSquared(decSIM$data$MORNING_PEAK, decSIM$fitted.values)\n\n[1] 0.4468104\n\n\nFrom the above results, I noticed that most variables are statistically significant(p-value&lt; 0.05) for DESTIN_GRID_IDxxx but for log(ORIGIN_HDB_DWELLING_UNIT), log(ORIGIN_FINSERV_COUNT), log(ORIGIN_MRT_EXIT_COUNT), log(dist), they are statistically significant(p-value&lt; 0.05). The Rsquared is higher than unconstrained which is 0.45.\nThe most influential variables are distance, origin mrt exit count, origin finserv count with -1.50 , 0.28 , and 0.26 respectively.\n\n\n14.8 Doubly Constrained SIM\nDoubly constrained spatial interaction model considers and incorporates both origin and destination constraints simultaneously. This approach is useful in situations where both the origins and destinations play crucial roles in shaping the overall pattern of interactions.\nThe formula is as follows:\n\n\n\nDoubly Constrained\n\n\n\ndbcSIM &lt;- glm(formula = MORNING_PEAK ~ \n                ORIGIN_GRID_ID +\n                DESTIN_GRID_ID +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nwrite_rds(dbcSIM, \"data/rds/dbcSIM.rds\")\n\n\ndbcSIM &lt;- read_rds(\"data/rds/dbcSIM.rds\")\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ ORIGIN_GRID_ID + DESTIN_GRID_ID + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                     Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)        10.5682068  0.2936168    35.993  &lt; 2e-16 ***\nORIGIN_GRID_ID46    1.9205770  0.2186635     8.783  &lt; 2e-16 ***\nORIGIN_GRID_ID66    1.9208926  0.3087664     6.221 4.93e-10 ***\nORIGIN_GRID_ID67    2.8668188  0.2021237    14.183  &lt; 2e-16 ***\nORIGIN_GRID_ID68    0.3278738  0.2495094     1.314 0.188821    \nORIGIN_GRID_ID86    0.9208136  0.2096116     4.393 1.12e-05 ***\nORIGIN_GRID_ID87    3.4043516  0.2343206    14.529  &lt; 2e-16 ***\nORIGIN_GRID_ID88    3.9881160  0.1995127    19.989  &lt; 2e-16 ***\nORIGIN_GRID_ID89    1.7137788  0.2703728     6.339 2.32e-10 ***\nORIGIN_GRID_ID90    2.6336794  0.2243368    11.740  &lt; 2e-16 ***\nORIGIN_GRID_ID109   1.6848744  0.2249648     7.490 6.91e-14 ***\nORIGIN_GRID_ID110   1.4374155  0.2145514     6.700 2.09e-11 ***\nORIGIN_GRID_ID111   6.4956878  0.2010554    32.308  &lt; 2e-16 ***\nORIGIN_GRID_ID112   0.5383767  0.2592212     2.077 0.037811 *  \nORIGIN_GRID_ID128   5.9627635  0.2032017    29.344  &lt; 2e-16 ***\nORIGIN_GRID_ID129   2.6319567  0.2691808     9.778  &lt; 2e-16 ***\nORIGIN_GRID_ID130   1.9527553  0.2127455     9.179  &lt; 2e-16 ***\nORIGIN_GRID_ID131   1.2396978  0.2076061     5.971 2.35e-09 ***\nORIGIN_GRID_ID132   1.5530509  0.2157610     7.198 6.11e-13 ***\nORIGIN_GRID_ID133   1.2668687  0.2099950     6.033 1.61e-09 ***\nORIGIN_GRID_ID134   2.9736375  0.2224685    13.367  &lt; 2e-16 ***\nORIGIN_GRID_ID150   6.2019474  0.2024689    30.632  &lt; 2e-16 ***\nORIGIN_GRID_ID151   2.2360383  0.2147759    10.411  &lt; 2e-16 ***\nORIGIN_GRID_ID152   2.6566395  0.2320105    11.451  &lt; 2e-16 ***\nORIGIN_GRID_ID153   3.3576252  0.2074805    16.183  &lt; 2e-16 ***\nORIGIN_GRID_ID154   3.4640938  0.2014370    17.197  &lt; 2e-16 ***\nORIGIN_GRID_ID155   0.0039319  0.2257915     0.017 0.986106    \nORIGIN_GRID_ID156   1.2102018  0.2175752     5.562 2.66e-08 ***\nORIGIN_GRID_ID172   3.1404664  0.2226080    14.108  &lt; 2e-16 ***\nORIGIN_GRID_ID174   1.7218230  0.2170933     7.931 2.17e-15 ***\nORIGIN_GRID_ID175   1.6344476  0.2113578     7.733 1.05e-14 ***\nORIGIN_GRID_ID176   3.1950095  0.2013059    15.871  &lt; 2e-16 ***\nORIGIN_GRID_ID195   2.3849263  0.2101813    11.347  &lt; 2e-16 ***\nORIGIN_GRID_ID196   1.6747244  0.2064954     8.110 5.05e-16 ***\nORIGIN_GRID_ID197   0.8499506  0.2634780     3.226 0.001256 ** \nORIGIN_GRID_ID215   3.0145187  0.2101928    14.342  &lt; 2e-16 ***\nORIGIN_GRID_ID216   3.1154221  0.2046354    15.224  &lt; 2e-16 ***\nORIGIN_GRID_ID217   2.7250593  0.2029341    13.428  &lt; 2e-16 ***\nORIGIN_GRID_ID237   2.0342001  0.2444166     8.323  &lt; 2e-16 ***\nORIGIN_GRID_ID238   1.2887377  0.2176369     5.922 3.19e-09 ***\nORIGIN_GRID_ID239   1.0369905  0.2537056     4.087 4.36e-05 ***\nORIGIN_GRID_ID257   3.6100077  0.2059016    17.533  &lt; 2e-16 ***\nORIGIN_GRID_ID258   0.8140340  0.2188508     3.720 0.000200 ***\nORIGIN_GRID_ID259   1.9291681  0.2069461     9.322  &lt; 2e-16 ***\nORIGIN_GRID_ID278   5.2196549  0.2034464    25.656  &lt; 2e-16 ***\nORIGIN_GRID_ID279   3.0094408  0.2051927    14.666  &lt; 2e-16 ***\nORIGIN_GRID_ID280   2.1567692  0.2056860    10.486  &lt; 2e-16 ***\nORIGIN_GRID_ID298   0.7770656  0.4065555     1.911 0.055961 .  \nORIGIN_GRID_ID299   2.6063312  0.2140466    12.176  &lt; 2e-16 ***\nORIGIN_GRID_ID300   2.0803321  0.2083202     9.986  &lt; 2e-16 ***\nORIGIN_GRID_ID320   3.3110920  0.2094985    15.805  &lt; 2e-16 ***\nORIGIN_GRID_ID321   2.4252646  0.2214937    10.950  &lt; 2e-16 ***\nORIGIN_GRID_ID322   1.6953953  0.2165065     7.831 4.85e-15 ***\nORIGIN_GRID_ID340   4.9381012  0.2041059    24.194  &lt; 2e-16 ***\nORIGIN_GRID_ID341   3.5011254  0.2060581    16.991  &lt; 2e-16 ***\nORIGIN_GRID_ID342   2.3035569  0.2079776    11.076  &lt; 2e-16 ***\nORIGIN_GRID_ID363   3.5415139  0.2051484    17.263  &lt; 2e-16 ***\nORIGIN_GRID_ID364   1.8599035  0.2060416     9.027  &lt; 2e-16 ***\nORIGIN_GRID_ID383   3.9718629  0.2036744    19.501  &lt; 2e-16 ***\nORIGIN_GRID_ID384   1.6209147  0.2099393     7.721 1.16e-14 ***\nORIGIN_GRID_ID385   0.0753936  0.2463635     0.306 0.759585    \nORIGIN_GRID_ID404   4.0605435  0.2062722    19.685  &lt; 2e-16 ***\nORIGIN_GRID_ID405   2.9490377  0.2070180    14.245  &lt; 2e-16 ***\nORIGIN_GRID_ID406   4.5773155  0.2007733    22.798  &lt; 2e-16 ***\nORIGIN_GRID_ID407   2.8901200  0.2031721    14.225  &lt; 2e-16 ***\nORIGIN_GRID_ID408   3.7536024  0.2015334    18.625  &lt; 2e-16 ***\nORIGIN_GRID_ID425   1.6407718  0.2260234     7.259 3.89e-13 ***\nORIGIN_GRID_ID426   2.1979074  0.2060283    10.668  &lt; 2e-16 ***\nORIGIN_GRID_ID427   1.7608948  0.2033558     8.659  &lt; 2e-16 ***\nORIGIN_GRID_ID428   2.7413034  0.2027436    13.521  &lt; 2e-16 ***\nORIGIN_GRID_ID429   2.7419827  0.2029597    13.510  &lt; 2e-16 ***\nORIGIN_GRID_ID446   2.6639300  0.2100954    12.680  &lt; 2e-16 ***\nORIGIN_GRID_ID447   1.1880340  0.2174842     5.463 4.69e-08 ***\nORIGIN_GRID_ID448   1.2912051  0.2072005     6.232 4.61e-10 ***\nORIGIN_GRID_ID449   3.4928001  0.2011510    17.364  &lt; 2e-16 ***\nORIGIN_GRID_ID450   2.5818350  0.2020652    12.777  &lt; 2e-16 ***\nORIGIN_GRID_ID468   3.1197105  0.2038348    15.305  &lt; 2e-16 ***\nORIGIN_GRID_ID469   1.5958380  0.2036573     7.836 4.66e-15 ***\nORIGIN_GRID_ID470   4.1752270  0.2008651    20.786  &lt; 2e-16 ***\nORIGIN_GRID_ID471   3.8753393  0.2015786    19.225  &lt; 2e-16 ***\nORIGIN_GRID_ID488   2.1099919  0.2144997     9.837  &lt; 2e-16 ***\nORIGIN_GRID_ID489  -0.5324777  0.3342279    -1.593 0.111125    \nORIGIN_GRID_ID490   3.0118136  0.2018419    14.922  &lt; 2e-16 ***\nORIGIN_GRID_ID491   2.7331165  0.2012878    13.578  &lt; 2e-16 ***\nORIGIN_GRID_ID493  -0.5343404  0.2862728    -1.867 0.061965 .  \nORIGIN_GRID_ID494   3.1724138  0.2037295    15.572  &lt; 2e-16 ***\nORIGIN_GRID_ID509   2.6126502  0.2065531    12.649  &lt; 2e-16 ***\nORIGIN_GRID_ID510   2.9323478  0.2028393    14.457  &lt; 2e-16 ***\nORIGIN_GRID_ID511   1.8358374  0.2025372     9.064  &lt; 2e-16 ***\nORIGIN_GRID_ID512   4.3535504  0.2007686    21.684  &lt; 2e-16 ***\nORIGIN_GRID_ID513   1.3373125  0.2077263     6.438 1.21e-10 ***\nORIGIN_GRID_ID514   2.4645833  0.2058751    11.971  &lt; 2e-16 ***\nORIGIN_GRID_ID515   1.3534297  0.2277422     5.943 2.80e-09 ***\nORIGIN_GRID_ID530   2.1046629  0.2153547     9.773  &lt; 2e-16 ***\nORIGIN_GRID_ID531   2.8672379  0.2038784    14.063  &lt; 2e-16 ***\nORIGIN_GRID_ID532   2.1685759  0.2028212    10.692  &lt; 2e-16 ***\nORIGIN_GRID_ID533   4.1798723  0.2007661    20.820  &lt; 2e-16 ***\nORIGIN_GRID_ID534   4.4380061  0.2007994    22.102  &lt; 2e-16 ***\nORIGIN_GRID_ID536   2.4150840  0.2052353    11.767  &lt; 2e-16 ***\nORIGIN_GRID_ID537   0.8400027  0.2555795     3.287 0.001014 ** \nORIGIN_GRID_ID538   0.2403974  0.2898407     0.829 0.406871    \nORIGIN_GRID_ID551   1.6032611  0.2171188     7.384 1.53e-13 ***\nORIGIN_GRID_ID552   2.0070246  0.2077600     9.660  &lt; 2e-16 ***\nORIGIN_GRID_ID553   1.3760620  0.2025871     6.792 1.10e-11 ***\nORIGIN_GRID_ID554   3.7020048  0.2008138    18.435  &lt; 2e-16 ***\nORIGIN_GRID_ID555   3.3958556  0.2014348    16.858  &lt; 2e-16 ***\nORIGIN_GRID_ID559   2.3751119  0.2150476    11.045  &lt; 2e-16 ***\nORIGIN_GRID_ID560   2.1800038  0.2207103     9.877  &lt; 2e-16 ***\nORIGIN_GRID_ID572   0.9307890  0.2500453     3.722 0.000197 ***\nORIGIN_GRID_ID573   2.4493098  0.2065188    11.860  &lt; 2e-16 ***\nORIGIN_GRID_ID574   3.0293758  0.2171960    13.948  &lt; 2e-16 ***\nORIGIN_GRID_ID575   5.8469322  0.2006891    29.134  &lt; 2e-16 ***\nORIGIN_GRID_ID576   3.6021342  0.2009091    17.929  &lt; 2e-16 ***\nORIGIN_GRID_ID578  -0.7005541  0.2862886    -2.447 0.014404 *  \nORIGIN_GRID_ID582   1.8792762  0.2315634     8.116 4.83e-16 ***\nORIGIN_GRID_ID583   2.0879365  0.2369780     8.811  &lt; 2e-16 ***\nORIGIN_GRID_ID584   3.1875225  0.2140375    14.892  &lt; 2e-16 ***\nORIGIN_GRID_ID593   1.1830516  0.2290771     5.164 2.41e-07 ***\nORIGIN_GRID_ID594   2.1502385  0.2065124    10.412  &lt; 2e-16 ***\nORIGIN_GRID_ID595   1.9380957  0.2020084     9.594  &lt; 2e-16 ***\nORIGIN_GRID_ID596   3.2738509  0.2008672    16.299  &lt; 2e-16 ***\nORIGIN_GRID_ID597   0.8599451  0.2227858     3.860 0.000113 ***\nORIGIN_GRID_ID603   1.5427349  0.2432190     6.343 2.25e-10 ***\nORIGIN_GRID_ID604   1.6680458  0.2463628     6.771 1.28e-11 ***\nORIGIN_GRID_ID615   1.0430054  0.2136147     4.883 1.05e-06 ***\nORIGIN_GRID_ID616   1.8213727  0.2041834     8.920  &lt; 2e-16 ***\nORIGIN_GRID_ID617   0.9011492  0.2039972     4.417 9.99e-06 ***\nORIGIN_GRID_ID618   4.1345407  0.2007963    20.591  &lt; 2e-16 ***\nORIGIN_GRID_ID620   0.6480723  0.2151175     3.013 0.002590 ** \nORIGIN_GRID_ID637   1.2552989  0.2055626     6.107 1.02e-09 ***\nORIGIN_GRID_ID638   3.9201261  0.2008000    19.523  &lt; 2e-16 ***\nORIGIN_GRID_ID657   2.7446584  0.2026361    13.545  &lt; 2e-16 ***\nORIGIN_GRID_ID658   3.0253473  0.2012103    15.036  &lt; 2e-16 ***\nORIGIN_GRID_ID659   3.3029590  0.2009585    16.436  &lt; 2e-16 ***\nORIGIN_GRID_ID660   4.7821420  0.2007379    23.823  &lt; 2e-16 ***\nORIGIN_GRID_ID662   4.9705355  0.2010205    24.727  &lt; 2e-16 ***\nORIGIN_GRID_ID677   3.3471350  0.2032265    16.470  &lt; 2e-16 ***\nORIGIN_GRID_ID678   0.8603176  0.2105762     4.086 4.40e-05 ***\nORIGIN_GRID_ID679   4.4550363  0.2007935    22.187  &lt; 2e-16 ***\nORIGIN_GRID_ID680   4.4827870  0.2007743    22.327  &lt; 2e-16 ***\nORIGIN_GRID_ID681   2.7925884  0.2016269    13.850  &lt; 2e-16 ***\nORIGIN_GRID_ID699   2.8263615  0.2024586    13.960  &lt; 2e-16 ***\nORIGIN_GRID_ID700   3.7795679  0.2009407    18.809  &lt; 2e-16 ***\nORIGIN_GRID_ID701   2.9975939  0.2011573    14.902  &lt; 2e-16 ***\nORIGIN_GRID_ID702   4.4123924  0.2007669    21.978  &lt; 2e-16 ***\nORIGIN_GRID_ID704   1.5515165  0.2055195     7.549 4.38e-14 ***\nORIGIN_GRID_ID722   1.7546686  0.2024341     8.668  &lt; 2e-16 ***\nORIGIN_GRID_ID725   1.4908359  0.2056730     7.249 4.21e-13 ***\nORIGIN_GRID_ID730   1.8455140  0.2198500     8.394  &lt; 2e-16 ***\nORIGIN_GRID_ID741   2.4631187  0.2030833    12.129  &lt; 2e-16 ***\nORIGIN_GRID_ID743   1.6115722  0.2024612     7.960 1.72e-15 ***\nORIGIN_GRID_ID744   3.8941445  0.2008399    19.389  &lt; 2e-16 ***\nORIGIN_GRID_ID752   3.1955403  0.2053885    15.559  &lt; 2e-16 ***\nORIGIN_GRID_ID761   2.9698788  0.2029005    14.637  &lt; 2e-16 ***\nORIGIN_GRID_ID762   3.5568026  0.2011789    17.680  &lt; 2e-16 ***\nORIGIN_GRID_ID763   0.9071318  0.2044508     4.437 9.13e-06 ***\nORIGIN_GRID_ID764   4.6217393  0.2007528    23.022  &lt; 2e-16 ***\nORIGIN_GRID_ID765   3.0997527  0.2013788    15.393  &lt; 2e-16 ***\nORIGIN_GRID_ID767   4.5894704  0.2008539    22.850  &lt; 2e-16 ***\nORIGIN_GRID_ID772   3.0321401  0.2042512    14.845  &lt; 2e-16 ***\nORIGIN_GRID_ID784   0.7028481  0.2050400     3.428 0.000608 ***\nORIGIN_GRID_ID785   3.4725112  0.2008619    17.288  &lt; 2e-16 ***\nORIGIN_GRID_ID786   2.8956048  0.2010667    14.401  &lt; 2e-16 ***\nORIGIN_GRID_ID787   3.4513107  0.2012563    17.149  &lt; 2e-16 ***\nORIGIN_GRID_ID788   3.7518544  0.2010454    18.662  &lt; 2e-16 ***\nORIGIN_GRID_ID789   2.4150231  0.2018445    11.965  &lt; 2e-16 ***\nORIGIN_GRID_ID803   1.3098027  0.2111797     6.202 5.56e-10 ***\nORIGIN_GRID_ID804   4.3114623  0.2008736    21.464  &lt; 2e-16 ***\nORIGIN_GRID_ID805   4.5751262  0.2007607    22.789  &lt; 2e-16 ***\nORIGIN_GRID_ID806   3.6086109  0.2008626    17.966  &lt; 2e-16 ***\nORIGIN_GRID_ID807   4.3558839  0.2008834    21.684  &lt; 2e-16 ***\nORIGIN_GRID_ID808   2.4332575  0.2024492    12.019  &lt; 2e-16 ***\nORIGIN_GRID_ID809   4.2234285  0.2008065    21.032  &lt; 2e-16 ***\nORIGIN_GRID_ID810   3.4726273  0.2010272    17.274  &lt; 2e-16 ***\nORIGIN_GRID_ID814   2.8532302  0.2041470    13.976  &lt; 2e-16 ***\nORIGIN_GRID_ID819   4.3021976  0.2026006    21.235  &lt; 2e-16 ***\nORIGIN_GRID_ID824   2.2684880  0.2056724    11.030  &lt; 2e-16 ***\nORIGIN_GRID_ID826   1.5519511  0.2021661     7.677 1.63e-14 ***\nORIGIN_GRID_ID827   3.7689003  0.2008392    18.766  &lt; 2e-16 ***\nORIGIN_GRID_ID828   4.0135984  0.2008029    19.988  &lt; 2e-16 ***\nORIGIN_GRID_ID829   3.7604919  0.2009310    18.715  &lt; 2e-16 ***\nORIGIN_GRID_ID830   3.5271589  0.2010453    17.544  &lt; 2e-16 ***\nORIGIN_GRID_ID831   5.3657253  0.2007377    26.730  &lt; 2e-16 ***\nORIGIN_GRID_ID832   4.7152439  0.2008586    23.475  &lt; 2e-16 ***\nORIGIN_GRID_ID835   1.1612590  0.2155447     5.388 7.14e-08 ***\nORIGIN_GRID_ID844   1.1170616  0.2200272     5.077 3.84e-07 ***\nORIGIN_GRID_ID846   3.5912048  0.2009427    17.872  &lt; 2e-16 ***\nORIGIN_GRID_ID847   3.5587432  0.2009243    17.712  &lt; 2e-16 ***\nORIGIN_GRID_ID848   3.4012295  0.2009074    16.929  &lt; 2e-16 ***\nORIGIN_GRID_ID849   2.4884425  0.2012756    12.363  &lt; 2e-16 ***\nORIGIN_GRID_ID850   3.8422471  0.2008734    19.128  &lt; 2e-16 ***\nORIGIN_GRID_ID851   3.9186394  0.2008333    19.512  &lt; 2e-16 ***\nORIGIN_GRID_ID852   3.3735378  0.2010182    16.782  &lt; 2e-16 ***\nORIGIN_GRID_ID853   5.1969419  0.2008733    25.872  &lt; 2e-16 ***\nORIGIN_GRID_ID854   1.7948678  0.2106681     8.520  &lt; 2e-16 ***\nORIGIN_GRID_ID855   1.0054628  0.2176074     4.621 3.83e-06 ***\nORIGIN_GRID_ID856   3.0655171  0.2034057    15.071  &lt; 2e-16 ***\nORIGIN_GRID_ID866   2.9107057  0.2029371    14.343  &lt; 2e-16 ***\nORIGIN_GRID_ID867   2.6571724  0.2015022    13.187  &lt; 2e-16 ***\nORIGIN_GRID_ID868   2.7695591  0.2013935    13.752  &lt; 2e-16 ***\nORIGIN_GRID_ID869   3.9379455  0.2011271    19.579  &lt; 2e-16 ***\nORIGIN_GRID_ID870   4.7993476  0.2007423    23.908  &lt; 2e-16 ***\nORIGIN_GRID_ID871   4.6738119  0.2008829    23.266  &lt; 2e-16 ***\nORIGIN_GRID_ID872   2.0422200  0.2018616    10.117  &lt; 2e-16 ***\nORIGIN_GRID_ID873   2.4438093  0.2014718    12.130  &lt; 2e-16 ***\nORIGIN_GRID_ID874   2.2992356  0.2015346    11.409  &lt; 2e-16 ***\nORIGIN_GRID_ID875   1.3119045  0.2232175     5.877 4.17e-09 ***\nORIGIN_GRID_ID876   0.5059927  0.2169155     2.333 0.019665 *  \nORIGIN_GRID_ID877   2.9389632  0.2028597    14.488  &lt; 2e-16 ***\nORIGIN_GRID_ID887   2.3090640  0.2020354    11.429  &lt; 2e-16 ***\nORIGIN_GRID_ID888   2.8330154  0.2012574    14.077  &lt; 2e-16 ***\nORIGIN_GRID_ID889   0.7015480  0.2076783     3.378 0.000730 ***\nORIGIN_GRID_ID890   4.1095286  0.2008090    20.465  &lt; 2e-16 ***\nORIGIN_GRID_ID891   2.7038086  0.2018981    13.392  &lt; 2e-16 ***\nORIGIN_GRID_ID893   4.0673380  0.2008068    20.255  &lt; 2e-16 ***\nORIGIN_GRID_ID894   1.7715588  0.2022934     8.757  &lt; 2e-16 ***\nORIGIN_GRID_ID895   2.1916042  0.2026388    10.815  &lt; 2e-16 ***\nORIGIN_GRID_ID896   0.8526010  0.2097796     4.064 4.82e-05 ***\nORIGIN_GRID_ID897   0.3192004  0.2117182     1.508 0.131640    \nORIGIN_GRID_ID898   2.2679326  0.2048682    11.070  &lt; 2e-16 ***\nORIGIN_GRID_ID908   3.2024790  0.2024629    15.818  &lt; 2e-16 ***\nORIGIN_GRID_ID909   3.1805197  0.2009585    15.827  &lt; 2e-16 ***\nORIGIN_GRID_ID910   0.3407559  0.2087302     1.633 0.102570    \nORIGIN_GRID_ID911   3.2934712  0.2010789    16.379  &lt; 2e-16 ***\nORIGIN_GRID_ID912   4.0089803  0.2008271    19.962  &lt; 2e-16 ***\nORIGIN_GRID_ID915   3.6986874  0.2008650    18.414  &lt; 2e-16 ***\nORIGIN_GRID_ID917   4.0635939  0.2010127    20.216  &lt; 2e-16 ***\nORIGIN_GRID_ID918   1.1176418  0.2055645     5.437 5.42e-08 ***\nORIGIN_GRID_ID919   2.0632477  0.2024276    10.193  &lt; 2e-16 ***\nORIGIN_GRID_ID928   2.5025583  0.2019738    12.391  &lt; 2e-16 ***\nORIGIN_GRID_ID929   3.4797427  0.2008939    17.321  &lt; 2e-16 ***\nORIGIN_GRID_ID930   4.6213304  0.2007465    23.021  &lt; 2e-16 ***\nORIGIN_GRID_ID931   1.1243361  0.2050129     5.484 4.15e-08 ***\nORIGIN_GRID_ID932   1.7439597  0.2051247     8.502  &lt; 2e-16 ***\nORIGIN_GRID_ID933   3.5334975  0.2010378    17.576  &lt; 2e-16 ***\nORIGIN_GRID_ID934   0.6526099  0.2059501     3.169 0.001531 ** \nORIGIN_GRID_ID935   5.3476273  0.2007290    26.641  &lt; 2e-16 ***\nORIGIN_GRID_ID938   0.1193950  0.2714943     0.440 0.660104    \nORIGIN_GRID_ID939   5.0986934  0.2008166    25.390  &lt; 2e-16 ***\nORIGIN_GRID_ID940   0.5095617  0.2350515     2.168 0.030168 *  \nORIGIN_GRID_ID949   2.7039885  0.2016153    13.412  &lt; 2e-16 ***\nORIGIN_GRID_ID950   4.6191073  0.2008090    23.002  &lt; 2e-16 ***\nORIGIN_GRID_ID951   5.0066170  0.2007354    24.941  &lt; 2e-16 ***\nORIGIN_GRID_ID952   1.9693558  0.2031108     9.696  &lt; 2e-16 ***\nORIGIN_GRID_ID953   2.8925596  0.2015648    14.351  &lt; 2e-16 ***\nORIGIN_GRID_ID954   1.3478195  0.2033760     6.627 3.42e-11 ***\nORIGIN_GRID_ID955   3.9706056  0.2008864    19.765  &lt; 2e-16 ***\nORIGIN_GRID_ID956   1.7278079  0.2020098     8.553  &lt; 2e-16 ***\nORIGIN_GRID_ID957   3.7803001  0.2009318    18.814  &lt; 2e-16 ***\nORIGIN_GRID_ID959   1.7593346  0.2121910     8.291  &lt; 2e-16 ***\nORIGIN_GRID_ID961   0.6807711  0.2056513     3.310 0.000932 ***\nORIGIN_GRID_ID962   7.6859826  0.2018880    38.071  &lt; 2e-16 ***\nORIGIN_GRID_ID970   3.0945772  0.2010914    15.389  &lt; 2e-16 ***\nORIGIN_GRID_ID971   3.8078544  0.2008125    18.962  &lt; 2e-16 ***\nORIGIN_GRID_ID972   3.5373958  0.2008819    17.609  &lt; 2e-16 ***\nORIGIN_GRID_ID974   3.0640869  0.2011936    15.230  &lt; 2e-16 ***\nORIGIN_GRID_ID975   2.4016512  0.2016413    11.911  &lt; 2e-16 ***\nORIGIN_GRID_ID976   2.3031568  0.2016366    11.422  &lt; 2e-16 ***\nORIGIN_GRID_ID977   4.0805644  0.2008143    20.320  &lt; 2e-16 ***\nORIGIN_GRID_ID978   3.7253240  0.2011361    18.521  &lt; 2e-16 ***\nORIGIN_GRID_ID982   0.9837624  0.2034961     4.834 1.34e-06 ***\nORIGIN_GRID_ID983   5.7072588  0.2008480    28.416  &lt; 2e-16 ***\nORIGIN_GRID_ID984   4.6264730  0.2018421    22.921  &lt; 2e-16 ***\nORIGIN_GRID_ID991   3.3384374  0.2011162    16.600  &lt; 2e-16 ***\nORIGIN_GRID_ID992   3.4349310  0.2009886    17.090  &lt; 2e-16 ***\nORIGIN_GRID_ID993   2.4203316  0.2012402    12.027  &lt; 2e-16 ***\nORIGIN_GRID_ID994   2.3392481  0.2015257    11.608  &lt; 2e-16 ***\nORIGIN_GRID_ID995   4.0463389  0.2008540    20.146  &lt; 2e-16 ***\nORIGIN_GRID_ID996   2.8990936  0.2012670    14.404  &lt; 2e-16 ***\nORIGIN_GRID_ID997   1.8110281  0.2054259     8.816  &lt; 2e-16 ***\nORIGIN_GRID_ID998   4.3166880  0.2008276    21.494  &lt; 2e-16 ***\nORIGIN_GRID_ID999   4.0487443  0.2009468    20.148  &lt; 2e-16 ***\nORIGIN_GRID_ID1001  1.9104248  0.2064818     9.252  &lt; 2e-16 ***\nORIGIN_GRID_ID1003  4.3519179  0.2008200    21.671  &lt; 2e-16 ***\nORIGIN_GRID_ID1004  4.3737928  0.2008353    21.778  &lt; 2e-16 ***\nORIGIN_GRID_ID1011  1.8641991  0.2040418     9.136  &lt; 2e-16 ***\nORIGIN_GRID_ID1012  2.8306549  0.2021111    14.005  &lt; 2e-16 ***\nORIGIN_GRID_ID1013  2.3966705  0.2016532    11.885  &lt; 2e-16 ***\nORIGIN_GRID_ID1014  2.4448049  0.2015130    12.132  &lt; 2e-16 ***\nORIGIN_GRID_ID1015  1.7283292  0.2024019     8.539  &lt; 2e-16 ***\nORIGIN_GRID_ID1016  3.9961044  0.2008762    19.893  &lt; 2e-16 ***\nORIGIN_GRID_ID1018  3.0096038  0.2016903    14.922  &lt; 2e-16 ***\nORIGIN_GRID_ID1019  4.7405868  0.2008513    23.602  &lt; 2e-16 ***\nORIGIN_GRID_ID1023  2.8709465  0.2016119    14.240  &lt; 2e-16 ***\nORIGIN_GRID_ID1024  3.9785560  0.2008967    19.804  &lt; 2e-16 ***\nORIGIN_GRID_ID1025  1.1308596  0.2090366     5.410 6.31e-08 ***\nORIGIN_GRID_ID1033  2.8179028  0.2014181    13.990  &lt; 2e-16 ***\nORIGIN_GRID_ID1034  3.3444644  0.2010352    16.636  &lt; 2e-16 ***\nORIGIN_GRID_ID1035  3.5337187  0.2009645    17.584  &lt; 2e-16 ***\nORIGIN_GRID_ID1036  3.5961174  0.2009678    17.894  &lt; 2e-16 ***\nORIGIN_GRID_ID1037  3.4721299  0.2009239    17.281  &lt; 2e-16 ***\nORIGIN_GRID_ID1043  3.5948674  0.2018771    17.807  &lt; 2e-16 ***\nORIGIN_GRID_ID1045  4.0234022  0.2008406    20.033  &lt; 2e-16 ***\nORIGIN_GRID_ID1046  3.9880994  0.2009256    19.849  &lt; 2e-16 ***\nORIGIN_GRID_ID1053  3.3905005  0.2011259    16.858  &lt; 2e-16 ***\nORIGIN_GRID_ID1054  2.5721621  0.2014820    12.766  &lt; 2e-16 ***\nORIGIN_GRID_ID1055  3.7771427  0.2009079    18.800  &lt; 2e-16 ***\nORIGIN_GRID_ID1056  2.8859410  0.2012717    14.339  &lt; 2e-16 ***\nORIGIN_GRID_ID1064  1.1303886  0.2694173     4.196 2.72e-05 ***\nORIGIN_GRID_ID1066  4.0775614  0.2008329    20.303  &lt; 2e-16 ***\nORIGIN_GRID_ID1067 -0.6344800  0.2640511    -2.403 0.016267 *  \nORIGIN_GRID_ID1074  3.2975728  0.2011715    16.392  &lt; 2e-16 ***\nORIGIN_GRID_ID1075  1.4289471  0.2037698     7.013 2.34e-12 ***\nORIGIN_GRID_ID1076  2.6836394  0.2012509    13.335  &lt; 2e-16 ***\nORIGIN_GRID_ID1077  2.5450118  0.2015636    12.626  &lt; 2e-16 ***\nORIGIN_GRID_ID1079  3.5873094  0.2009604    17.851  &lt; 2e-16 ***\nORIGIN_GRID_ID1085 -0.0057161  0.2265390    -0.025 0.979870    \nORIGIN_GRID_ID1087  3.0041227  0.2010634    14.941  &lt; 2e-16 ***\nORIGIN_GRID_ID1088  1.7560821  0.2020489     8.691  &lt; 2e-16 ***\nORIGIN_GRID_ID1094  1.0354130  0.2170388     4.771 1.84e-06 ***\nORIGIN_GRID_ID1095  1.5862756  0.2077770     7.635 2.27e-14 ***\nORIGIN_GRID_ID1096  2.2776169  0.2071735    10.994  &lt; 2e-16 ***\nORIGIN_GRID_ID1097  4.2828172  0.2008002    21.329  &lt; 2e-16 ***\nORIGIN_GRID_ID1098  1.8780371  0.2031714     9.244  &lt; 2e-16 ***\nORIGIN_GRID_ID1099  3.3401718  0.2010197    16.616  &lt; 2e-16 ***\nORIGIN_GRID_ID1105  4.6633219  0.2016986    23.120  &lt; 2e-16 ***\nORIGIN_GRID_ID1106 -0.1416044  0.2492331    -0.568 0.569926    \nORIGIN_GRID_ID1107  1.7850364  0.2043192     8.737  &lt; 2e-16 ***\nORIGIN_GRID_ID1108  5.7525083  0.2007405    28.656  &lt; 2e-16 ***\nORIGIN_GRID_ID1109  1.2100784  0.2060871     5.872 4.31e-09 ***\nORIGIN_GRID_ID1116  2.4932372  0.2016588    12.364  &lt; 2e-16 ***\nORIGIN_GRID_ID1117  2.3270993  0.2020875    11.515  &lt; 2e-16 ***\nORIGIN_GRID_ID1118  1.5493728  0.2038662     7.600 2.96e-14 ***\nORIGIN_GRID_ID1119  3.0836674  0.2011362    15.331  &lt; 2e-16 ***\nORIGIN_GRID_ID1120  2.4708025  0.2020534    12.228  &lt; 2e-16 ***\nORIGIN_GRID_ID1129  3.6491874  0.2009294    18.162  &lt; 2e-16 ***\nORIGIN_GRID_ID1130  3.7225378  0.2008738    18.532  &lt; 2e-16 ***\nORIGIN_GRID_ID1131  3.3810187  0.2017249    16.761  &lt; 2e-16 ***\nORIGIN_GRID_ID1136  2.2459779  0.2019723    11.120  &lt; 2e-16 ***\nORIGIN_GRID_ID1138  1.4656342  0.2049643     7.151 8.63e-13 ***\nORIGIN_GRID_ID1139  3.6577165  0.2008797    18.208  &lt; 2e-16 ***\nORIGIN_GRID_ID1141  3.2983833  0.2010535    16.405  &lt; 2e-16 ***\nORIGIN_GRID_ID1148  1.4169015  0.2117670     6.691 2.22e-11 ***\nORIGIN_GRID_ID1149  2.5011992  0.2020235    12.381  &lt; 2e-16 ***\nORIGIN_GRID_ID1150  3.7563757  0.2008495    18.702  &lt; 2e-16 ***\nORIGIN_GRID_ID1151  3.1997499  0.2011523    15.907  &lt; 2e-16 ***\nORIGIN_GRID_ID1158  2.2505468  0.2017396    11.156  &lt; 2e-16 ***\nORIGIN_GRID_ID1159  3.2061340  0.2009711    15.953  &lt; 2e-16 ***\nORIGIN_GRID_ID1160  4.1442469  0.2008045    20.638  &lt; 2e-16 ***\nORIGIN_GRID_ID1171  4.3509305  0.2008716    21.660  &lt; 2e-16 ***\nORIGIN_GRID_ID1172  4.5320994  0.2008226    22.568  &lt; 2e-16 ***\nORIGIN_GRID_ID1173  2.6040715  0.2020245    12.890  &lt; 2e-16 ***\nORIGIN_GRID_ID1174  0.6165396  0.3208628     1.922 0.054668 .  \nORIGIN_GRID_ID1178  2.9863406  0.2011328    14.848  &lt; 2e-16 ***\nORIGIN_GRID_ID1179  3.4266340  0.2009282    17.054  &lt; 2e-16 ***\nORIGIN_GRID_ID1180  4.0264045  0.2008088    20.051  &lt; 2e-16 ***\nORIGIN_GRID_ID1181  3.0348521  0.2010318    15.096  &lt; 2e-16 ***\nORIGIN_GRID_ID1183  2.4811639  0.2016431    12.305  &lt; 2e-16 ***\nORIGIN_GRID_ID1190  1.3133974  0.2130926     6.164 7.12e-10 ***\nORIGIN_GRID_ID1192  3.6624032  0.2009720    18.223  &lt; 2e-16 ***\nORIGIN_GRID_ID1193  3.5791364  0.2010210    17.805  &lt; 2e-16 ***\nORIGIN_GRID_ID1194  2.7867915  0.2022278    13.780  &lt; 2e-16 ***\nORIGIN_GRID_ID1200  2.8107319  0.2011763    13.971  &lt; 2e-16 ***\nORIGIN_GRID_ID1201  3.3775908  0.2009318    16.810  &lt; 2e-16 ***\nORIGIN_GRID_ID1203  3.6348773  0.2009418    18.089  &lt; 2e-16 ***\nORIGIN_GRID_ID1204  2.5867232  0.2014547    12.840  &lt; 2e-16 ***\nORIGIN_GRID_ID1211  3.0338749  0.2061543    14.717  &lt; 2e-16 ***\nORIGIN_GRID_ID1214  3.9886368  0.2009045    19.853  &lt; 2e-16 ***\nORIGIN_GRID_ID1215  1.5116889  0.2086494     7.245 4.32e-13 ***\nORIGIN_GRID_ID1216  2.2806523  0.2047445    11.139  &lt; 2e-16 ***\nORIGIN_GRID_ID1220  3.6935123  0.2008794    18.387  &lt; 2e-16 ***\nORIGIN_GRID_ID1221  3.5312380  0.2008617    17.580  &lt; 2e-16 ***\nORIGIN_GRID_ID1222  3.0945477  0.2015224    15.356  &lt; 2e-16 ***\nORIGIN_GRID_ID1223  2.4370138  0.2015391    12.092  &lt; 2e-16 ***\nORIGIN_GRID_ID1224  2.7497805  0.2013000    13.660  &lt; 2e-16 ***\nORIGIN_GRID_ID1231  1.5466841  0.2114667     7.314 2.59e-13 ***\nORIGIN_GRID_ID1232  2.4711776  0.2089701    11.826  &lt; 2e-16 ***\nORIGIN_GRID_ID1235  1.9468545  0.2022479     9.626  &lt; 2e-16 ***\nORIGIN_GRID_ID1236  3.1536288  0.2017404    15.632  &lt; 2e-16 ***\nORIGIN_GRID_ID1241  2.4751070  0.2012733    12.297  &lt; 2e-16 ***\nORIGIN_GRID_ID1242  2.8099123  0.2010898    13.973  &lt; 2e-16 ***\nORIGIN_GRID_ID1243  3.6021703  0.2008590    17.934  &lt; 2e-16 ***\nORIGIN_GRID_ID1246  3.3529652  0.2010093    16.681  &lt; 2e-16 ***\nORIGIN_GRID_ID1256  2.8032062  0.2013773    13.920  &lt; 2e-16 ***\nORIGIN_GRID_ID1257  4.0021835  0.2010278    19.909  &lt; 2e-16 ***\nORIGIN_GRID_ID1258  3.2867012  0.2017137    16.294  &lt; 2e-16 ***\nORIGIN_GRID_ID1262  2.1777168  0.2014409    10.811  &lt; 2e-16 ***\nORIGIN_GRID_ID1263  3.8054556  0.2008079    18.951  &lt; 2e-16 ***\nORIGIN_GRID_ID1264  2.6686128  0.2013229    13.255  &lt; 2e-16 ***\nORIGIN_GRID_ID1265  2.7494562  0.2013156    13.657  &lt; 2e-16 ***\nORIGIN_GRID_ID1266  3.1583320  0.2011615    15.700  &lt; 2e-16 ***\nORIGIN_GRID_ID1267  2.6829300  0.2021209    13.274  &lt; 2e-16 ***\nORIGIN_GRID_ID1272  0.0423078  0.2288197     0.185 0.853311    \nORIGIN_GRID_ID1273  2.8464597  0.2018393    14.103  &lt; 2e-16 ***\nORIGIN_GRID_ID1277  4.2425585  0.2008729    21.121  &lt; 2e-16 ***\nORIGIN_GRID_ID1278  2.7749054  0.2017128    13.757  &lt; 2e-16 ***\nORIGIN_GRID_ID1283  4.6790747  0.2007750    23.305  &lt; 2e-16 ***\nORIGIN_GRID_ID1284  3.5619596  0.2008605    17.733  &lt; 2e-16 ***\nORIGIN_GRID_ID1285  4.2400280  0.2007859    21.117  &lt; 2e-16 ***\nORIGIN_GRID_ID1286  2.7710479  0.2013170    13.765  &lt; 2e-16 ***\nORIGIN_GRID_ID1289  1.8963279  0.2046427     9.267  &lt; 2e-16 ***\nORIGIN_GRID_ID1293  1.2915636  0.2144385     6.023 1.71e-09 ***\nORIGIN_GRID_ID1294  3.9669682  0.2011718    19.719  &lt; 2e-16 ***\nORIGIN_GRID_ID1295  2.5402596  0.2023518    12.554  &lt; 2e-16 ***\nORIGIN_GRID_ID1298  2.9132793  0.2012355    14.477  &lt; 2e-16 ***\nORIGIN_GRID_ID1299  3.7606923  0.2010923    18.701  &lt; 2e-16 ***\nORIGIN_GRID_ID1304  3.8229325  0.2008369    19.035  &lt; 2e-16 ***\nORIGIN_GRID_ID1305  3.6075658  0.2008185    17.964  &lt; 2e-16 ***\nORIGIN_GRID_ID1307  1.0626071  0.2045691     5.194 2.05e-07 ***\nORIGIN_GRID_ID1308  3.3589496  0.2009870    16.712  &lt; 2e-16 ***\nORIGIN_GRID_ID1310  0.5123816  0.2297593     2.230 0.025742 *  \nORIGIN_GRID_ID1316  1.1257090  0.2063531     5.455 4.89e-08 ***\nORIGIN_GRID_ID1317  1.9746855  0.2022128     9.765  &lt; 2e-16 ***\nORIGIN_GRID_ID1318  1.0979215  0.2043094     5.374 7.71e-08 ***\nORIGIN_GRID_ID1319  4.6235911  0.2008272    23.023  &lt; 2e-16 ***\nORIGIN_GRID_ID1320  3.2340496  0.2015398    16.047  &lt; 2e-16 ***\nORIGIN_GRID_ID1325  1.5117282  0.2021893     7.477 7.62e-14 ***\nORIGIN_GRID_ID1326  3.5241505  0.2008493    17.546  &lt; 2e-16 ***\nORIGIN_GRID_ID1327  3.4422986  0.2008591    17.138  &lt; 2e-16 ***\nORIGIN_GRID_ID1328  2.7868511  0.2010465    13.862  &lt; 2e-16 ***\nORIGIN_GRID_ID1329  3.0959309  0.2012484    15.384  &lt; 2e-16 ***\nORIGIN_GRID_ID1330  2.7935030  0.2015667    13.859  &lt; 2e-16 ***\nORIGIN_GRID_ID1331 -0.0581264  0.2734674    -0.213 0.831675    \nORIGIN_GRID_ID1333  2.5703198  0.2018216    12.736  &lt; 2e-16 ***\nORIGIN_GRID_ID1334  2.9260836  0.2016199    14.513  &lt; 2e-16 ***\nORIGIN_GRID_ID1335  3.0307216  0.2016541    15.029  &lt; 2e-16 ***\nORIGIN_GRID_ID1336  0.7077407  0.2304709     3.071 0.002135 ** \nORIGIN_GRID_ID1337  0.4506574  0.2106411     2.139 0.032399 *  \nORIGIN_GRID_ID1338 -0.2735677  0.2177960    -1.256 0.209090    \nORIGIN_GRID_ID1339  4.8327919  0.2007869    24.069  &lt; 2e-16 ***\nORIGIN_GRID_ID1340  3.5944746  0.2010426    17.879  &lt; 2e-16 ***\nORIGIN_GRID_ID1341 -1.8822352  0.7350507    -2.561 0.010447 *  \nORIGIN_GRID_ID1346  3.5447193  0.2009616    17.639  &lt; 2e-16 ***\nORIGIN_GRID_ID1347  4.5626391  0.2007638    22.726  &lt; 2e-16 ***\nORIGIN_GRID_ID1348  3.3429349  0.2008624    16.643  &lt; 2e-16 ***\nORIGIN_GRID_ID1349  3.7616623  0.2008423    18.729  &lt; 2e-16 ***\nORIGIN_GRID_ID1350  2.4517186  0.2018852    12.144  &lt; 2e-16 ***\nORIGIN_GRID_ID1353  2.9867628  0.2011949    14.845  &lt; 2e-16 ***\nORIGIN_GRID_ID1354  2.1831167  0.2020676    10.804  &lt; 2e-16 ***\nORIGIN_GRID_ID1355  3.1560541  0.2012624    15.681  &lt; 2e-16 ***\nORIGIN_GRID_ID1357  1.3471016  0.2058377     6.544 5.97e-11 ***\nORIGIN_GRID_ID1358  3.2891706  0.2011229    16.354  &lt; 2e-16 ***\nORIGIN_GRID_ID1359  3.3733749  0.2009769    16.785  &lt; 2e-16 ***\nORIGIN_GRID_ID1360  3.2381276  0.2010301    16.108  &lt; 2e-16 ***\nORIGIN_GRID_ID1361  4.2288524  0.2009150    21.048  &lt; 2e-16 ***\nORIGIN_GRID_ID1362  0.9165489  0.2181778     4.201 2.66e-05 ***\nORIGIN_GRID_ID1368  2.5494132  0.2011193    12.676  &lt; 2e-16 ***\nORIGIN_GRID_ID1369  2.1085021  0.2012570    10.477  &lt; 2e-16 ***\nORIGIN_GRID_ID1370  4.2477565  0.2007615    21.158  &lt; 2e-16 ***\nORIGIN_GRID_ID1371  2.7431624  0.2013314    13.625  &lt; 2e-16 ***\nORIGIN_GRID_ID1372  1.4290488  0.2029424     7.042 1.90e-12 ***\nORIGIN_GRID_ID1373  0.7754605  0.2090337     3.710 0.000207 ***\nORIGIN_GRID_ID1374  2.1793256  0.2016517    10.807  &lt; 2e-16 ***\nORIGIN_GRID_ID1375  3.4039028  0.2012250    16.916  &lt; 2e-16 ***\nORIGIN_GRID_ID1376  2.5973190  0.2020897    12.852  &lt; 2e-16 ***\nORIGIN_GRID_ID1379  0.7162991  0.2102818     3.406 0.000658 ***\nORIGIN_GRID_ID1380  4.7420496  0.2007809    23.618  &lt; 2e-16 ***\nORIGIN_GRID_ID1381  4.6017643  0.2008023    22.917  &lt; 2e-16 ***\nORIGIN_GRID_ID1382  3.7769792  0.2010238    18.789  &lt; 2e-16 ***\nORIGIN_GRID_ID1383  1.2456486  0.2052673     6.068 1.29e-09 ***\nORIGIN_GRID_ID1388  2.9689817  0.2010093    14.770  &lt; 2e-16 ***\nORIGIN_GRID_ID1389  2.4981137  0.2010797    12.423  &lt; 2e-16 ***\nORIGIN_GRID_ID1390  2.9837333  0.2009196    14.850  &lt; 2e-16 ***\nORIGIN_GRID_ID1391  2.9096775  0.2010002    14.476  &lt; 2e-16 ***\nORIGIN_GRID_ID1392  2.6333040  0.2018331    13.047  &lt; 2e-16 ***\nORIGIN_GRID_ID1393  1.2765259  0.2028494     6.293 3.11e-10 ***\nORIGIN_GRID_ID1394  3.3327058  0.2009570    16.584  &lt; 2e-16 ***\nORIGIN_GRID_ID1395  3.3336881  0.2009576    16.589  &lt; 2e-16 ***\nORIGIN_GRID_ID1396  3.9109183  0.2008837    19.469  &lt; 2e-16 ***\nORIGIN_GRID_ID1397  3.6177131  0.2010220    17.997  &lt; 2e-16 ***\nORIGIN_GRID_ID1398  2.7399511  0.2020174    13.563  &lt; 2e-16 ***\nORIGIN_GRID_ID1400  2.9670884  0.2013719    14.734  &lt; 2e-16 ***\nORIGIN_GRID_ID1401  3.9972521  0.2008349    19.903  &lt; 2e-16 ***\nORIGIN_GRID_ID1402  4.1081523  0.2008655    20.452  &lt; 2e-16 ***\nORIGIN_GRID_ID1404  4.3040512  0.2018918    21.319  &lt; 2e-16 ***\nORIGIN_GRID_ID1410  2.7461206  0.2010037    13.662  &lt; 2e-16 ***\nORIGIN_GRID_ID1411  2.6424681  0.2010450    13.144  &lt; 2e-16 ***\nORIGIN_GRID_ID1412  3.9749195  0.2007740    19.798  &lt; 2e-16 ***\nORIGIN_GRID_ID1413  3.6527836  0.2008426    18.187  &lt; 2e-16 ***\nORIGIN_GRID_ID1414  2.8833546  0.2010012    14.345  &lt; 2e-16 ***\nORIGIN_GRID_ID1415  2.5789561  0.2012087    12.817  &lt; 2e-16 ***\nORIGIN_GRID_ID1416  2.6600935  0.2011780    13.223  &lt; 2e-16 ***\nORIGIN_GRID_ID1417  3.1608608  0.2009643    15.728  &lt; 2e-16 ***\nORIGIN_GRID_ID1418  3.6886311  0.2008958    18.361  &lt; 2e-16 ***\nORIGIN_GRID_ID1419  3.1192875  0.2011648    15.506  &lt; 2e-16 ***\nORIGIN_GRID_ID1422  3.7371199  0.2010080    18.592  &lt; 2e-16 ***\nORIGIN_GRID_ID1423  4.6707568  0.2008325    23.257  &lt; 2e-16 ***\nORIGIN_GRID_ID1430  3.4409874  0.2009266    17.126  &lt; 2e-16 ***\nORIGIN_GRID_ID1431  4.6499855  0.2007465    23.163  &lt; 2e-16 ***\nORIGIN_GRID_ID1432  3.6690744  0.2007958    18.273  &lt; 2e-16 ***\nORIGIN_GRID_ID1433  2.0215074  0.2021184    10.002  &lt; 2e-16 ***\nORIGIN_GRID_ID1434  3.9434667  0.2008151    19.637  &lt; 2e-16 ***\nORIGIN_GRID_ID1435  3.4362443  0.2008584    17.108  &lt; 2e-16 ***\nORIGIN_GRID_ID1436  1.1917414  0.2034115     5.859 4.66e-09 ***\nORIGIN_GRID_ID1437  3.8472083  0.2008408    19.156  &lt; 2e-16 ***\nORIGIN_GRID_ID1438  4.0348081  0.2007954    20.094  &lt; 2e-16 ***\nORIGIN_GRID_ID1439  4.2192367  0.2008178    21.010  &lt; 2e-16 ***\nORIGIN_GRID_ID1440  1.8166999  0.2032600     8.938  &lt; 2e-16 ***\nORIGIN_GRID_ID1442  3.2555868  0.2013193    16.171  &lt; 2e-16 ***\nORIGIN_GRID_ID1443  4.5200788  0.2008622    22.503  &lt; 2e-16 ***\nORIGIN_GRID_ID1444  4.0661925  0.2011277    20.217  &lt; 2e-16 ***\nORIGIN_GRID_ID1452  3.2737766  0.2008913    16.296  &lt; 2e-16 ***\nORIGIN_GRID_ID1453  3.1554241  0.2008677    15.709  &lt; 2e-16 ***\nORIGIN_GRID_ID1454  2.6617833  0.2013094    13.222  &lt; 2e-16 ***\nORIGIN_GRID_ID1455  2.8163026  0.2011377    14.002  &lt; 2e-16 ***\nORIGIN_GRID_ID1456  3.6519011  0.2008566    18.182  &lt; 2e-16 ***\nORIGIN_GRID_ID1457  3.7761669  0.2008337    18.802  &lt; 2e-16 ***\nORIGIN_GRID_ID1458  4.6775041  0.2007599    23.299  &lt; 2e-16 ***\nORIGIN_GRID_ID1459  3.4111002  0.2008818    16.981  &lt; 2e-16 ***\nORIGIN_GRID_ID1460  3.3671142  0.2009063    16.760  &lt; 2e-16 ***\nORIGIN_GRID_ID1461  2.3549524  0.2020671    11.654  &lt; 2e-16 ***\nORIGIN_GRID_ID1464  4.5992775  0.2008716    22.897  &lt; 2e-16 ***\nORIGIN_GRID_ID1465  4.2540186  0.2009949    21.165  &lt; 2e-16 ***\nORIGIN_GRID_ID1472  1.6593558  0.2023619     8.200 2.41e-16 ***\nORIGIN_GRID_ID1473  2.5203342  0.2010993    12.533  &lt; 2e-16 ***\nORIGIN_GRID_ID1474  3.9151341  0.2007693    19.501  &lt; 2e-16 ***\nORIGIN_GRID_ID1475  4.4948375  0.2007595    22.389  &lt; 2e-16 ***\nORIGIN_GRID_ID1476  3.2029013  0.2009652    15.938  &lt; 2e-16 ***\nORIGIN_GRID_ID1477  4.9746475  0.2007310    24.783  &lt; 2e-16 ***\nORIGIN_GRID_ID1478  2.6636504  0.2010703    13.247  &lt; 2e-16 ***\nORIGIN_GRID_ID1479  2.8987724  0.2009966    14.422  &lt; 2e-16 ***\nORIGIN_GRID_ID1480  5.0695064  0.2007364    25.255  &lt; 2e-16 ***\nORIGIN_GRID_ID1481  2.0492562  0.2018138    10.154  &lt; 2e-16 ***\nORIGIN_GRID_ID1482  2.2579441  0.2024390    11.154  &lt; 2e-16 ***\nORIGIN_GRID_ID1485  4.0542949  0.2010194    20.169  &lt; 2e-16 ***\nORIGIN_GRID_ID1494  2.3383265  0.2017329    11.591  &lt; 2e-16 ***\nORIGIN_GRID_ID1495  3.0560074  0.2008948    15.212  &lt; 2e-16 ***\nORIGIN_GRID_ID1496  4.3949488  0.2007445    21.893  &lt; 2e-16 ***\nORIGIN_GRID_ID1497  3.9009666  0.2008315    19.424  &lt; 2e-16 ***\nORIGIN_GRID_ID1498  3.7769034  0.2008234    18.807  &lt; 2e-16 ***\nORIGIN_GRID_ID1499  3.8969588  0.2008016    19.407  &lt; 2e-16 ***\nORIGIN_GRID_ID1500  3.7685089  0.2009573    18.753  &lt; 2e-16 ***\nORIGIN_GRID_ID1501  4.0705427  0.2007940    20.272  &lt; 2e-16 ***\nORIGIN_GRID_ID1502  3.5435985  0.2008903    17.639  &lt; 2e-16 ***\nORIGIN_GRID_ID1506 -0.3670083  0.2581197    -1.422 0.155069    \nORIGIN_GRID_ID1514 -2.0617596  1.0201461    -2.021 0.043275 *  \nORIGIN_GRID_ID1515  2.2505410  0.2017244    11.157  &lt; 2e-16 ***\nORIGIN_GRID_ID1516  3.8793749  0.2007876    19.321  &lt; 2e-16 ***\nORIGIN_GRID_ID1517  3.3937944  0.2008879    16.894  &lt; 2e-16 ***\nORIGIN_GRID_ID1518  3.1308360  0.2010104    15.575  &lt; 2e-16 ***\nORIGIN_GRID_ID1519  3.7361607  0.2009250    18.595  &lt; 2e-16 ***\nORIGIN_GRID_ID1520  2.5050973  0.2011589    12.453  &lt; 2e-16 ***\nORIGIN_GRID_ID1521  1.3317588  0.2025868     6.574 4.91e-11 ***\nORIGIN_GRID_ID1522  4.1600299  0.2008056    20.717  &lt; 2e-16 ***\nORIGIN_GRID_ID1523  3.0584765  0.2021381    15.131  &lt; 2e-16 ***\nORIGIN_GRID_ID1524  2.9963180  0.2015707    14.865  &lt; 2e-16 ***\nORIGIN_GRID_ID1527  2.1582082  0.2043928    10.559  &lt; 2e-16 ***\nORIGIN_GRID_ID1535  3.8605868  0.2041346    18.912  &lt; 2e-16 ***\nORIGIN_GRID_ID1536  2.5676818  0.2017766    12.725  &lt; 2e-16 ***\nORIGIN_GRID_ID1537  2.7573754  0.2010577    13.714  &lt; 2e-16 ***\nORIGIN_GRID_ID1538  3.5070256  0.2008221    17.463  &lt; 2e-16 ***\nORIGIN_GRID_ID1539  3.4906619  0.2008326    17.381  &lt; 2e-16 ***\nORIGIN_GRID_ID1540  3.4958736  0.2008621    17.404  &lt; 2e-16 ***\nORIGIN_GRID_ID1541  4.5734303  0.2009276    22.762  &lt; 2e-16 ***\nORIGIN_GRID_ID1542  1.9807806  0.2022889     9.792  &lt; 2e-16 ***\nORIGIN_GRID_ID1543  2.4613813  0.2042286    12.052  &lt; 2e-16 ***\nORIGIN_GRID_ID1544  3.4675811  0.2010914    17.244  &lt; 2e-16 ***\nORIGIN_GRID_ID1547  1.1681868  0.2129356     5.486 4.11e-08 ***\nORIGIN_GRID_ID1556  2.5648733  0.2113083    12.138  &lt; 2e-16 ***\nORIGIN_GRID_ID1557  2.7211028  0.2016609    13.493  &lt; 2e-16 ***\nORIGIN_GRID_ID1558  1.6662823  0.2032038     8.200 2.40e-16 ***\nORIGIN_GRID_ID1559  3.8227927  0.2007944    19.038  &lt; 2e-16 ***\nORIGIN_GRID_ID1560  4.1239984  0.2007833    20.540  &lt; 2e-16 ***\nORIGIN_GRID_ID1561  3.6289520  0.2009326    18.061  &lt; 2e-16 ***\nORIGIN_GRID_ID1562  1.4556181  0.2027531     7.179 7.01e-13 ***\nORIGIN_GRID_ID1563  2.6772211  0.2011344    13.311  &lt; 2e-16 ***\nORIGIN_GRID_ID1564  2.0650289  0.2018103    10.233  &lt; 2e-16 ***\nORIGIN_GRID_ID1565  1.9857989  0.2021938     9.821  &lt; 2e-16 ***\nORIGIN_GRID_ID1566  1.7154504  0.2034296     8.433  &lt; 2e-16 ***\nORIGIN_GRID_ID1567  0.0787025  0.2375631     0.331 0.740425    \nORIGIN_GRID_ID1568  1.3400146  0.2114279     6.338 2.33e-10 ***\nORIGIN_GRID_ID1578  0.3722280  0.2578745     1.443 0.148895    \nORIGIN_GRID_ID1580  2.6168260  0.2017666    12.970  &lt; 2e-16 ***\nORIGIN_GRID_ID1581  1.2070167  0.2023510     5.965 2.45e-09 ***\nORIGIN_GRID_ID1582  3.7424033  0.2008130    18.636  &lt; 2e-16 ***\nORIGIN_GRID_ID1583  1.9791076  0.2043890     9.683  &lt; 2e-16 ***\nORIGIN_GRID_ID1584  2.1908254  0.2015784    10.868  &lt; 2e-16 ***\nORIGIN_GRID_ID1585  3.7806714  0.2009529    18.814  &lt; 2e-16 ***\nORIGIN_GRID_ID1586  2.0550175  0.2018875    10.179  &lt; 2e-16 ***\nORIGIN_GRID_ID1589  0.6375143  0.2188043     2.914 0.003573 ** \nORIGIN_GRID_ID1590  1.0381583  0.2172282     4.779 1.76e-06 ***\nORIGIN_GRID_ID1600  3.9274213  0.2014319    19.498  &lt; 2e-16 ***\nORIGIN_GRID_ID1601  3.0311320  0.2009284    15.086  &lt; 2e-16 ***\nORIGIN_GRID_ID1602  3.4194809  0.2009285    17.018  &lt; 2e-16 ***\nORIGIN_GRID_ID1603  3.9567915  0.2008197    19.703  &lt; 2e-16 ***\nORIGIN_GRID_ID1604  2.5727019  0.2011388    12.791  &lt; 2e-16 ***\nORIGIN_GRID_ID1605  3.7147557  0.2008291    18.497  &lt; 2e-16 ***\nORIGIN_GRID_ID1606  3.5173256  0.2013040    17.473  &lt; 2e-16 ***\nORIGIN_GRID_ID1607  2.2577164  0.2015692    11.201  &lt; 2e-16 ***\nORIGIN_GRID_ID1608  4.1665756  0.2008828    20.741  &lt; 2e-16 ***\nORIGIN_GRID_ID1609  3.8773998  0.2010045    19.290  &lt; 2e-16 ***\nORIGIN_GRID_ID1610  1.0676920  0.2216950     4.816 1.46e-06 ***\nORIGIN_GRID_ID1622  3.2874894  0.2019191    16.281  &lt; 2e-16 ***\nORIGIN_GRID_ID1623  3.7889129  0.2008083    18.868  &lt; 2e-16 ***\nORIGIN_GRID_ID1624  2.9668645  0.2011061    14.753  &lt; 2e-16 ***\nORIGIN_GRID_ID1625  3.6800847  0.2008805    18.320  &lt; 2e-16 ***\nORIGIN_GRID_ID1626  5.0498579  0.2007399    25.156  &lt; 2e-16 ***\nORIGIN_GRID_ID1627  2.7128230  0.2010997    13.490  &lt; 2e-16 ***\nORIGIN_GRID_ID1628  4.2976213  0.2008006    21.402  &lt; 2e-16 ***\nORIGIN_GRID_ID1629  2.9288097  0.2013135    14.549  &lt; 2e-16 ***\nORIGIN_GRID_ID1630  3.1031073  0.2012489    15.419  &lt; 2e-16 ***\nORIGIN_GRID_ID1631  0.2516356  0.2224218     1.131 0.257910    \nORIGIN_GRID_ID1642  1.5017801  0.2054719     7.309 2.69e-13 ***\nORIGIN_GRID_ID1643  3.6077306  0.2008370    17.963  &lt; 2e-16 ***\nORIGIN_GRID_ID1644  1.9168546  0.2025709     9.463  &lt; 2e-16 ***\nORIGIN_GRID_ID1645  3.2000913  0.2009911    15.922  &lt; 2e-16 ***\nORIGIN_GRID_ID1646  2.5297475  0.2015006    12.555  &lt; 2e-16 ***\nORIGIN_GRID_ID1647  3.4574168  0.2008590    17.213  &lt; 2e-16 ***\nORIGIN_GRID_ID1648  3.5064770  0.2008839    17.455  &lt; 2e-16 ***\nORIGIN_GRID_ID1649  4.0591467  0.2008344    20.211  &lt; 2e-16 ***\nORIGIN_GRID_ID1650  4.0852940  0.2009369    20.331  &lt; 2e-16 ***\nORIGIN_GRID_ID1664  0.0244824  0.2288742     0.107 0.914814    \nORIGIN_GRID_ID1665  4.0116496  0.2007935    19.979  &lt; 2e-16 ***\nORIGIN_GRID_ID1666  2.9634855  0.2009975    14.744  &lt; 2e-16 ***\nORIGIN_GRID_ID1667  3.4832742  0.2014474    17.291  &lt; 2e-16 ***\nORIGIN_GRID_ID1668  3.4966210  0.2008815    17.406  &lt; 2e-16 ***\nORIGIN_GRID_ID1670  4.1844525  0.2007947    20.839  &lt; 2e-16 ***\nORIGIN_GRID_ID1671  4.4595273  0.2009856    22.188  &lt; 2e-16 ***\nORIGIN_GRID_ID1672  3.6964422  0.2010887    18.382  &lt; 2e-16 ***\nORIGIN_GRID_ID1684  2.7800623  0.2018604    13.772  &lt; 2e-16 ***\nORIGIN_GRID_ID1685  3.4793966  0.2008900    17.320  &lt; 2e-16 ***\nORIGIN_GRID_ID1686  3.4922865  0.2008869    17.384  &lt; 2e-16 ***\nORIGIN_GRID_ID1687  3.2037070  0.2012236    15.921  &lt; 2e-16 ***\nORIGIN_GRID_ID1688  2.8731237  0.2010787    14.289  &lt; 2e-16 ***\nORIGIN_GRID_ID1689  2.2858222  0.2014411    11.347  &lt; 2e-16 ***\nORIGIN_GRID_ID1690  2.6687263  0.2012549    13.260  &lt; 2e-16 ***\nORIGIN_GRID_ID1691  3.6688500  0.2008754    18.264  &lt; 2e-16 ***\nORIGIN_GRID_ID1692  3.0350780  0.2013897    15.071  &lt; 2e-16 ***\nORIGIN_GRID_ID1706  3.3986368  0.2009925    16.909  &lt; 2e-16 ***\nORIGIN_GRID_ID1707  3.2630066  0.2008881    16.243  &lt; 2e-16 ***\nORIGIN_GRID_ID1708  3.7315541  0.2008482    18.579  &lt; 2e-16 ***\nORIGIN_GRID_ID1709  3.0560460  0.2010428    15.201  &lt; 2e-16 ***\nORIGIN_GRID_ID1710  3.8466009  0.2008645    19.150  &lt; 2e-16 ***\nORIGIN_GRID_ID1711  4.5830995  0.2007806    22.826  &lt; 2e-16 ***\nORIGIN_GRID_ID1712  4.3450683  0.2007736    21.642  &lt; 2e-16 ***\nORIGIN_GRID_ID1713  1.5066297  0.2024799     7.441 1.00e-13 ***\nORIGIN_GRID_ID1714  4.2713398  0.2008660    21.265  &lt; 2e-16 ***\nORIGIN_GRID_ID1726 -0.6569430  0.5387880    -1.219 0.222731    \nORIGIN_GRID_ID1727  3.3447547  0.2009356    16.646  &lt; 2e-16 ***\nORIGIN_GRID_ID1728  4.0460839  0.2007995    20.150  &lt; 2e-16 ***\nORIGIN_GRID_ID1729  3.1188671  0.2009813    15.518  &lt; 2e-16 ***\nORIGIN_GRID_ID1730  1.6069306  0.2030916     7.912 2.53e-15 ***\nORIGIN_GRID_ID1731  3.6251210  0.2008911    18.045  &lt; 2e-16 ***\nORIGIN_GRID_ID1732  3.8440660  0.2008126    19.143  &lt; 2e-16 ***\nORIGIN_GRID_ID1733  3.3796429  0.2008936    16.823  &lt; 2e-16 ***\nORIGIN_GRID_ID1734  3.6796355  0.2008730    18.318  &lt; 2e-16 ***\nORIGIN_GRID_ID1735  4.6349831  0.2011994    23.037  &lt; 2e-16 ***\nORIGIN_GRID_ID1748  2.7259809  0.2011682    13.551  &lt; 2e-16 ***\nORIGIN_GRID_ID1749  4.2347584  0.2007770    21.092  &lt; 2e-16 ***\nORIGIN_GRID_ID1750  2.9360513  0.2009868    14.608  &lt; 2e-16 ***\nORIGIN_GRID_ID1751  2.1306629  0.2018480    10.556  &lt; 2e-16 ***\nORIGIN_GRID_ID1753  3.8850545  0.2008376    19.344  &lt; 2e-16 ***\nORIGIN_GRID_ID1754  4.7073007  0.2007551    23.448  &lt; 2e-16 ***\nORIGIN_GRID_ID1755  3.8123565  0.2008318    18.983  &lt; 2e-16 ***\nORIGIN_GRID_ID1756  3.4461182  0.2009304    17.151  &lt; 2e-16 ***\nORIGIN_GRID_ID1757  0.7231188  0.2107576     3.431 0.000601 ***\nORIGIN_GRID_ID1768  0.0443244  0.2481394     0.179 0.858231    \nORIGIN_GRID_ID1769  3.0777310  0.2009567    15.315  &lt; 2e-16 ***\nORIGIN_GRID_ID1770  3.8430927  0.2009709    19.123  &lt; 2e-16 ***\nORIGIN_GRID_ID1771  2.5374772  0.2013711    12.601  &lt; 2e-16 ***\nORIGIN_GRID_ID1772  2.9832123  0.2032795    14.675  &lt; 2e-16 ***\nORIGIN_GRID_ID1774  3.6721977  0.2008530    18.283  &lt; 2e-16 ***\nORIGIN_GRID_ID1775  3.1811675  0.2009551    15.830  &lt; 2e-16 ***\nORIGIN_GRID_ID1776  4.8772915  0.2007543    24.295  &lt; 2e-16 ***\nORIGIN_GRID_ID1777  3.7806118  0.2008992    18.818  &lt; 2e-16 ***\nORIGIN_GRID_ID1778  3.4561441  0.2019965    17.110  &lt; 2e-16 ***\nORIGIN_GRID_ID1790  4.2295534  0.2008095    21.063  &lt; 2e-16 ***\nORIGIN_GRID_ID1791  3.9214925  0.2008447    19.525  &lt; 2e-16 ***\nORIGIN_GRID_ID1792  3.3296899  0.2010910    16.558  &lt; 2e-16 ***\nORIGIN_GRID_ID1793  2.8036505  0.2012711    13.930  &lt; 2e-16 ***\nORIGIN_GRID_ID1794  2.2785890  0.2099187    10.855  &lt; 2e-16 ***\nORIGIN_GRID_ID1795  0.4576029  0.2100749     2.178 0.029385 *  \nORIGIN_GRID_ID1796  3.8679067  0.2008627    19.256  &lt; 2e-16 ***\nORIGIN_GRID_ID1797  3.8666685  0.2008318    19.253  &lt; 2e-16 ***\nORIGIN_GRID_ID1798  3.7079350  0.2008538    18.461  &lt; 2e-16 ***\nORIGIN_GRID_ID1799  2.7686838  0.2013582    13.750  &lt; 2e-16 ***\nORIGIN_GRID_ID1800  2.0413454  0.2052961     9.943  &lt; 2e-16 ***\nORIGIN_GRID_ID1811  3.3544857  0.2009318    16.695  &lt; 2e-16 ***\nORIGIN_GRID_ID1812  4.3779276  0.2007697    21.806  &lt; 2e-16 ***\nORIGIN_GRID_ID1813  3.7851380  0.2008449    18.846  &lt; 2e-16 ***\nORIGIN_GRID_ID1817  3.4945463  0.2010006    17.386  &lt; 2e-16 ***\nORIGIN_GRID_ID1818  3.6330592  0.2008688    18.087  &lt; 2e-16 ***\nORIGIN_GRID_ID1819  4.8010821  0.2007696    23.913  &lt; 2e-16 ***\nORIGIN_GRID_ID1820  1.5077218  0.2062749     7.309 2.69e-13 ***\nORIGIN_GRID_ID1832  4.6733740  0.2007766    23.276  &lt; 2e-16 ***\nORIGIN_GRID_ID1833  3.1858822  0.2009525    15.854  &lt; 2e-16 ***\nORIGIN_GRID_ID1834  3.2218803  0.2009392    16.034  &lt; 2e-16 ***\nORIGIN_GRID_ID1835  2.5183339  0.2013843    12.505  &lt; 2e-16 ***\nORIGIN_GRID_ID1837  1.6975337  0.2256845     7.522 5.41e-14 ***\nORIGIN_GRID_ID1839  3.3247857  0.2010756    16.535  &lt; 2e-16 ***\nORIGIN_GRID_ID1840  4.7457138  0.2007681    23.638  &lt; 2e-16 ***\nORIGIN_GRID_ID1841  2.3699331  0.2025077    11.703  &lt; 2e-16 ***\nORIGIN_GRID_ID1842  4.9885598  0.2014634    24.762  &lt; 2e-16 ***\nORIGIN_GRID_ID1853  3.3355334  0.2009039    16.603  &lt; 2e-16 ***\nORIGIN_GRID_ID1854  3.7040418  0.2008620    18.441  &lt; 2e-16 ***\nORIGIN_GRID_ID1855  3.8477084  0.2008691    19.155  &lt; 2e-16 ***\nORIGIN_GRID_ID1858  2.3912205  0.2045772    11.689  &lt; 2e-16 ***\nORIGIN_GRID_ID1860  4.1710154  0.2014313    20.707  &lt; 2e-16 ***\nORIGIN_GRID_ID1861  3.7094859  0.2009132    18.463  &lt; 2e-16 ***\nORIGIN_GRID_ID1874  3.5628064  0.2009820    17.727  &lt; 2e-16 ***\nORIGIN_GRID_ID1875  1.8167560  0.2022961     8.981  &lt; 2e-16 ***\nORIGIN_GRID_ID1876  3.8839130  0.2019106    19.236  &lt; 2e-16 ***\nORIGIN_GRID_ID1877  3.5250726  0.2009214    17.545  &lt; 2e-16 ***\nORIGIN_GRID_ID1880  1.3931614  0.2131057     6.537 6.26e-11 ***\nORIGIN_GRID_ID1882  3.8163038  0.2009126    18.995  &lt; 2e-16 ***\nORIGIN_GRID_ID1883  3.5960624  0.2016973    17.829  &lt; 2e-16 ***\nORIGIN_GRID_ID1895  3.6128864  0.2008891    17.984  &lt; 2e-16 ***\nORIGIN_GRID_ID1896  2.9748138  0.2010359    14.797  &lt; 2e-16 ***\nORIGIN_GRID_ID1897  2.9850714  0.2011864    14.837  &lt; 2e-16 ***\nORIGIN_GRID_ID1898 -0.1767243  0.2261911    -0.781 0.434623    \nORIGIN_GRID_ID1901  1.0123262  0.2209861     4.581 4.63e-06 ***\nORIGIN_GRID_ID1903  3.1217349  0.2016058    15.484  &lt; 2e-16 ***\nORIGIN_GRID_ID1916  0.6673301  0.2129375     3.134 0.001725 ** \nORIGIN_GRID_ID1917  2.8254592  0.2011420    14.047  &lt; 2e-16 ***\nORIGIN_GRID_ID1918  3.6355490  0.2009733    18.090  &lt; 2e-16 ***\nORIGIN_GRID_ID1919  3.5959734  0.2009171    17.898  &lt; 2e-16 ***\nORIGIN_GRID_ID1922  1.9368749  0.2077124     9.325  &lt; 2e-16 ***\nORIGIN_GRID_ID1924  3.3527583  0.2015597    16.634  &lt; 2e-16 ***\nORIGIN_GRID_ID1937  3.2561108  0.2010358    16.197  &lt; 2e-16 ***\nORIGIN_GRID_ID1938  3.7211108  0.2008424    18.528  &lt; 2e-16 ***\nORIGIN_GRID_ID1939  3.8735526  0.2008806    19.283  &lt; 2e-16 ***\nORIGIN_GRID_ID1942  1.4682326  0.2097621     7.000 2.57e-12 ***\nORIGIN_GRID_ID1958  0.1878534  0.2806382     0.669 0.503254    \nORIGIN_GRID_ID1959  2.9120699  0.2011879    14.474  &lt; 2e-16 ***\nORIGIN_GRID_ID1960  5.3628743  0.2007307    26.717  &lt; 2e-16 ***\nORIGIN_GRID_ID1961  2.9094895  0.2011668    14.463  &lt; 2e-16 ***\nORIGIN_GRID_ID1962  3.7292067  0.2009042    18.562  &lt; 2e-16 ***\nORIGIN_GRID_ID1964  1.6754938  0.2108044     7.948 1.89e-15 ***\nORIGIN_GRID_ID1979  3.0149082  0.2011976    14.985  &lt; 2e-16 ***\nORIGIN_GRID_ID1980  1.1184235  0.2026267     5.520 3.40e-08 ***\nORIGIN_GRID_ID1981  3.3443282  0.2008993    16.647  &lt; 2e-16 ***\nORIGIN_GRID_ID1982  2.9065176  0.2016202    14.416  &lt; 2e-16 ***\nORIGIN_GRID_ID1983  3.7588633  0.2008919    18.711  &lt; 2e-16 ***\nORIGIN_GRID_ID1984  2.6144553  0.2013322    12.986  &lt; 2e-16 ***\nORIGIN_GRID_ID1985  2.9439773  0.2012087    14.631  &lt; 2e-16 ***\nORIGIN_GRID_ID2001  3.3587122  0.2009671    16.713  &lt; 2e-16 ***\nORIGIN_GRID_ID2002  3.7247261  0.2008201    18.548  &lt; 2e-16 ***\nORIGIN_GRID_ID2003  3.6568933  0.2008741    18.205  &lt; 2e-16 ***\nORIGIN_GRID_ID2004  4.3433066  0.2008086    21.629  &lt; 2e-16 ***\nORIGIN_GRID_ID2005  3.6774164  0.2008887    18.306  &lt; 2e-16 ***\nORIGIN_GRID_ID2006  3.1341472  0.2011034    15.585  &lt; 2e-16 ***\nORIGIN_GRID_ID2007  1.5946024  0.2042252     7.808 5.81e-15 ***\nORIGIN_GRID_ID2022  3.8341712  0.2009519    19.080  &lt; 2e-16 ***\nORIGIN_GRID_ID2023  4.0291307  0.2008121    20.064  &lt; 2e-16 ***\nORIGIN_GRID_ID2024  3.5988228  0.2008570    17.917  &lt; 2e-16 ***\nORIGIN_GRID_ID2025  3.1817962  0.2009150    15.837  &lt; 2e-16 ***\nORIGIN_GRID_ID2026  1.8756393  0.2020468     9.283  &lt; 2e-16 ***\nORIGIN_GRID_ID2027  4.1289082  0.2008442    20.558  &lt; 2e-16 ***\nORIGIN_GRID_ID2043  3.0413238  0.2011862    15.117  &lt; 2e-16 ***\nORIGIN_GRID_ID2044  3.5181182  0.2008816    17.513  &lt; 2e-16 ***\nORIGIN_GRID_ID2045  0.9562023  0.2164102     4.418 9.94e-06 ***\nORIGIN_GRID_ID2046  4.0627825  0.2007823    20.235  &lt; 2e-16 ***\nORIGIN_GRID_ID2047  3.1237109  0.2009877    15.542  &lt; 2e-16 ***\nORIGIN_GRID_ID2048  3.4241422  0.2009182    17.042  &lt; 2e-16 ***\nORIGIN_GRID_ID2049  2.4867030  0.2026341    12.272  &lt; 2e-16 ***\nORIGIN_GRID_ID2064  3.5552678  0.2009404    17.693  &lt; 2e-16 ***\nORIGIN_GRID_ID2065  2.6649227  0.2011723    13.247  &lt; 2e-16 ***\nORIGIN_GRID_ID2066  2.0176336  0.2034531     9.917  &lt; 2e-16 ***\nORIGIN_GRID_ID2067  5.2990984  0.2007340    26.399  &lt; 2e-16 ***\nORIGIN_GRID_ID2068  2.9619227  0.2012397    14.718  &lt; 2e-16 ***\nORIGIN_GRID_ID2069  3.5411098  0.2009494    17.622  &lt; 2e-16 ***\nORIGIN_GRID_ID2085  2.6244940  0.2014585    13.027  &lt; 2e-16 ***\nORIGIN_GRID_ID2086  3.8989280  0.2008638    19.411  &lt; 2e-16 ***\nORIGIN_GRID_ID2087  3.0822512  0.2010344    15.332  &lt; 2e-16 ***\nORIGIN_GRID_ID2088  3.4851387  0.2008459    17.352  &lt; 2e-16 ***\nORIGIN_GRID_ID2089  2.8496965  0.2011022    14.170  &lt; 2e-16 ***\nORIGIN_GRID_ID2090  4.8074080  0.2007638    23.946  &lt; 2e-16 ***\nORIGIN_GRID_ID2091  1.2572791  0.2095851     5.999 1.99e-09 ***\nORIGIN_GRID_ID2105  2.0532348  0.2149567     9.552  &lt; 2e-16 ***\nORIGIN_GRID_ID2106  1.4486931  0.2028962     7.140 9.33e-13 ***\nORIGIN_GRID_ID2107  2.5741660  0.2012336    12.792  &lt; 2e-16 ***\nORIGIN_GRID_ID2108  3.7826655  0.2008847    18.830  &lt; 2e-16 ***\nORIGIN_GRID_ID2109  3.2275190  0.2008957    16.066  &lt; 2e-16 ***\nORIGIN_GRID_ID2110  2.5081715  0.2012952    12.460  &lt; 2e-16 ***\nORIGIN_GRID_ID2111 -0.3308154  0.2240509    -1.477 0.139805    \nORIGIN_GRID_ID2128  2.5068269  0.2018294    12.421  &lt; 2e-16 ***\nORIGIN_GRID_ID2129  2.1300346  0.2016899    10.561  &lt; 2e-16 ***\nORIGIN_GRID_ID2130  3.9699520  0.2008080    19.770  &lt; 2e-16 ***\nORIGIN_GRID_ID2131  4.0476204  0.2008791    20.150  &lt; 2e-16 ***\nORIGIN_GRID_ID2132  3.4344918  0.2009342    17.093  &lt; 2e-16 ***\nORIGIN_GRID_ID2148  3.4204328  0.2013999    16.983  &lt; 2e-16 ***\nORIGIN_GRID_ID2149  1.1142464  0.2038936     5.465 4.63e-08 ***\nORIGIN_GRID_ID2150  3.7269365  0.2009039    18.551  &lt; 2e-16 ***\nORIGIN_GRID_ID2151  4.1214257  0.2007990    20.525  &lt; 2e-16 ***\nORIGIN_GRID_ID2152  4.2714125  0.2008104    21.271  &lt; 2e-16 ***\nORIGIN_GRID_ID2153  3.5992673  0.2010184    17.905  &lt; 2e-16 ***\nORIGIN_GRID_ID2171  3.1028440  0.2011142    15.428  &lt; 2e-16 ***\nORIGIN_GRID_ID2172  2.7322703  0.2013004    13.573  &lt; 2e-16 ***\nORIGIN_GRID_ID2173  3.0698021  0.2009868    15.274  &lt; 2e-16 ***\nORIGIN_GRID_ID2174  3.5023974  0.2009853    17.426  &lt; 2e-16 ***\nORIGIN_GRID_ID2191  2.6856302  0.2018127    13.308  &lt; 2e-16 ***\nORIGIN_GRID_ID2192  2.3470197  0.2017481    11.633  &lt; 2e-16 ***\nORIGIN_GRID_ID2193  3.0459362  0.2011228    15.145  &lt; 2e-16 ***\nORIGIN_GRID_ID2194  3.6515977  0.2009029    18.176  &lt; 2e-16 ***\nORIGIN_GRID_ID2195  2.3512040  0.2050183    11.468  &lt; 2e-16 ***\nORIGIN_GRID_ID2212  1.5855735  0.2128451     7.449 9.37e-14 ***\nORIGIN_GRID_ID2213  0.8803115  0.2094200     4.204 2.63e-05 ***\nORIGIN_GRID_ID2214  2.3055694  0.2035519    11.327  &lt; 2e-16 ***\nORIGIN_GRID_ID2215  3.3426414  0.2011378    16.619  &lt; 2e-16 ***\nORIGIN_GRID_ID2216  2.2886508  0.2019623    11.332  &lt; 2e-16 ***\nORIGIN_GRID_ID2233  2.0916574  0.2055519    10.176  &lt; 2e-16 ***\nORIGIN_GRID_ID2234  2.7040787  0.2050464    13.188  &lt; 2e-16 ***\nORIGIN_GRID_ID2235  2.6210064  0.2022713    12.958  &lt; 2e-16 ***\nORIGIN_GRID_ID2236  1.4214436  0.2042524     6.959 3.42e-12 ***\nORIGIN_GRID_ID2237  1.4918597  0.2114051     7.057 1.70e-12 ***\nORIGIN_GRID_ID2256  1.5686811  0.2091454     7.500 6.36e-14 ***\nORIGIN_GRID_ID2257  2.0061957  0.2040744     9.831  &lt; 2e-16 ***\nORIGIN_GRID_ID2258  2.0587133  0.2026095    10.161  &lt; 2e-16 ***\nORIGIN_GRID_ID2259  2.2713673  0.2089668    10.870  &lt; 2e-16 ***\nORIGIN_GRID_ID2277  1.7191439  0.2126426     8.085 6.23e-16 ***\nORIGIN_GRID_ID2278  2.0330868  0.2050190     9.917  &lt; 2e-16 ***\nORIGIN_GRID_ID2279  1.8503551  0.2037311     9.082  &lt; 2e-16 ***\nORIGIN_GRID_ID2280  0.6566737  0.2164600     3.034 0.002416 ** \nORIGIN_GRID_ID2297  3.5892166  0.2014808    17.814  &lt; 2e-16 ***\nORIGIN_GRID_ID2300 -0.2440043  0.2532008    -0.964 0.335207    \nORIGIN_GRID_ID2301  1.4966933  0.2040365     7.335 2.21e-13 ***\nORIGIN_GRID_ID2318  0.9892556  0.2067646     4.784 1.71e-06 ***\nORIGIN_GRID_ID2319  3.0455608  0.2011713    15.139  &lt; 2e-16 ***\nORIGIN_GRID_ID2322  4.5621833  0.2010349    22.693  &lt; 2e-16 ***\nORIGIN_GRID_ID2337  5.6376635  0.2015086    27.977  &lt; 2e-16 ***\nORIGIN_GRID_ID2341  3.8975774  0.2010162    19.389  &lt; 2e-16 ***\nORIGIN_GRID_ID2343  2.9354763  0.2016393    14.558  &lt; 2e-16 ***\nORIGIN_GRID_ID2361  2.9335324  0.2015353    14.556  &lt; 2e-16 ***\nORIGIN_GRID_ID2364  1.9587020  0.2063822     9.491  &lt; 2e-16 ***\nORIGIN_GRID_ID2379  0.1374400  0.2176879     0.631 0.527803    \nORIGIN_GRID_ID2384  3.4489947  0.2020461    17.070  &lt; 2e-16 ***\nORIGIN_GRID_ID2405  3.2946078  0.2021300    16.299  &lt; 2e-16 ***\nORIGIN_GRID_ID2406  2.2433174  0.2062777    10.875  &lt; 2e-16 ***\nORIGIN_GRID_ID2426  3.2649450  0.2064467    15.815  &lt; 2e-16 ***\nORIGIN_GRID_ID2427  3.1740594  0.2027328    15.656  &lt; 2e-16 ***\nORIGIN_GRID_ID2505  2.4800346  0.2118422    11.707  &lt; 2e-16 ***\nDESTIN_GRID_ID46    0.2438733  0.2285578     1.067 0.285967    \nDESTIN_GRID_ID66    0.7706687  0.5454952     1.413 0.157718    \nDESTIN_GRID_ID67   -0.6769795  0.2272732    -2.979 0.002895 ** \nDESTIN_GRID_ID68    0.0680588  0.2246405     0.303 0.761914    \nDESTIN_GRID_ID86    1.3050509  0.2618172     4.985 6.21e-07 ***\nDESTIN_GRID_ID88    0.2700569  0.2212707     1.220 0.222282    \nDESTIN_GRID_ID89    2.3798446  0.2385237     9.977  &lt; 2e-16 ***\nDESTIN_GRID_ID90   -1.5908739  0.7395661    -2.151 0.031469 *  \nDESTIN_GRID_ID109   0.6812845  0.2891004     2.357 0.018445 *  \nDESTIN_GRID_ID110  -4.2791152  0.4623142    -9.256  &lt; 2e-16 ***\nDESTIN_GRID_ID111   4.1969536  0.2171483    19.328  &lt; 2e-16 ***\nDESTIN_GRID_ID112  -3.3896538  0.3444822    -9.840  &lt; 2e-16 ***\nDESTIN_GRID_ID128   4.0407838  0.2185168    18.492  &lt; 2e-16 ***\nDESTIN_GRID_ID129   1.0895516  0.4156864     2.621 0.008765 ** \nDESTIN_GRID_ID130   2.2342447  0.2534182     8.816  &lt; 2e-16 ***\nDESTIN_GRID_ID131  -2.0793278  0.2363802    -8.797  &lt; 2e-16 ***\nDESTIN_GRID_ID132   0.2417431  0.2307513     1.048 0.294807    \nDESTIN_GRID_ID133  -0.9949438  0.2411961    -4.125 3.71e-05 ***\nDESTIN_GRID_ID134   3.1630099  0.2172791    14.557  &lt; 2e-16 ***\nDESTIN_GRID_ID150  -0.7568802  0.2284869    -3.313 0.000924 ***\nDESTIN_GRID_ID151  -1.1484756  0.2643738    -4.344 1.40e-05 ***\nDESTIN_GRID_ID152   1.0714717  0.2559803     4.186 2.84e-05 ***\nDESTIN_GRID_ID153   0.9512831  0.2335408     4.073 4.64e-05 ***\nDESTIN_GRID_ID154   0.2644779  0.2308161     1.146 0.251862    \nDESTIN_GRID_ID155   1.3528640  0.2197760     6.156 7.48e-10 ***\nDESTIN_GRID_ID156  -0.3115967  0.2413473    -1.291 0.196679    \nDESTIN_GRID_ID172   0.7450084  0.2898193     2.571 0.010152 *  \nDESTIN_GRID_ID174  -0.3465994  0.2619440    -1.323 0.185775    \nDESTIN_GRID_ID175   2.9851926  0.2173555    13.734  &lt; 2e-16 ***\nDESTIN_GRID_ID176  -0.0623081  0.2301225    -0.271 0.786575    \nDESTIN_GRID_ID195  -0.9300888  0.3325967    -2.796 0.005167 ** \nDESTIN_GRID_ID196  -0.1798200  0.2346268    -0.766 0.443433    \nDESTIN_GRID_ID197  -1.3183392  0.2687438    -4.906 9.32e-07 ***\nDESTIN_GRID_ID215   0.3412017  0.2598125     1.313 0.189095    \nDESTIN_GRID_ID216   2.7411731  0.2184668    12.547  &lt; 2e-16 ***\nDESTIN_GRID_ID217   1.5494752  0.2226025     6.961 3.39e-12 ***\nDESTIN_GRID_ID237  -1.5848506  0.3455388    -4.587 4.51e-06 ***\nDESTIN_GRID_ID238   0.1711325  0.2432690     0.703 0.481763    \nDESTIN_GRID_ID239   1.7096667  0.2299606     7.435 1.05e-13 ***\nDESTIN_GRID_ID257  -0.7151842  0.2303388    -3.105 0.001903 ** \nDESTIN_GRID_ID258  -0.5863253  0.2462823    -2.381 0.017280 *  \nDESTIN_GRID_ID259  -0.0838364  0.2452925    -0.342 0.732515    \nDESTIN_GRID_ID278   0.0073195  0.2317945     0.032 0.974809    \nDESTIN_GRID_ID279   0.5084409  0.2322601     2.189 0.028589 *  \nDESTIN_GRID_ID280   1.0596248  0.2267639     4.673 2.97e-06 ***\nDESTIN_GRID_ID299  -0.1173901  0.2497872    -0.470 0.638383    \nDESTIN_GRID_ID300   2.0371047  0.2199756     9.261  &lt; 2e-16 ***\nDESTIN_GRID_ID320  -0.0343459  0.2389705    -0.144 0.885718    \nDESTIN_GRID_ID321  -0.1583753  0.3012021    -0.526 0.599020    \nDESTIN_GRID_ID322   0.2304646  0.2308460     0.998 0.318111    \nDESTIN_GRID_ID340   1.3988655  0.2249520     6.219 5.02e-10 ***\nDESTIN_GRID_ID341  -1.1111649  0.2397532    -4.635 3.58e-06 ***\nDESTIN_GRID_ID342   0.8479377  0.2273125     3.730 0.000191 ***\nDESTIN_GRID_ID363   0.7032793  0.2316257     3.036 0.002395 ** \nDESTIN_GRID_ID364   0.0869174  0.2294909     0.379 0.704881    \nDESTIN_GRID_ID383   0.0535321  0.2255339     0.237 0.812380    \nDESTIN_GRID_ID384   0.4416623  0.2256883     1.957 0.050353 .  \nDESTIN_GRID_ID385  -1.9420899  0.3206166    -6.057 1.38e-09 ***\nDESTIN_GRID_ID404   1.7261321  0.2342591     7.368 1.73e-13 ***\nDESTIN_GRID_ID405  -0.8190955  0.2428971    -3.372 0.000746 ***\nDESTIN_GRID_ID406   3.5792823  0.2172992    16.472  &lt; 2e-16 ***\nDESTIN_GRID_ID407   2.0576442  0.2192328     9.386  &lt; 2e-16 ***\nDESTIN_GRID_ID408   3.1810736  0.2178195    14.604  &lt; 2e-16 ***\nDESTIN_GRID_ID425  -1.1192642  0.2649527    -4.224 2.40e-05 ***\nDESTIN_GRID_ID426  -0.6063897  0.2429016    -2.496 0.012545 *  \nDESTIN_GRID_ID427   0.6126315  0.2200248     2.784 0.005363 ** \nDESTIN_GRID_ID428   1.2362361  0.2196384     5.629 1.82e-08 ***\nDESTIN_GRID_ID429   1.8733907  0.2203185     8.503  &lt; 2e-16 ***\nDESTIN_GRID_ID446   0.7194209  0.2480577     2.900 0.003729 ** \nDESTIN_GRID_ID447  -1.2312938  0.2646407    -4.653 3.28e-06 ***\nDESTIN_GRID_ID448  -1.1982477  0.2440055    -4.911 9.07e-07 ***\nDESTIN_GRID_ID449   2.3304738  0.2178110    10.700  &lt; 2e-16 ***\nDESTIN_GRID_ID450   1.6168149  0.2185701     7.397 1.39e-13 ***\nDESTIN_GRID_ID468   0.8715051  0.2272907     3.834 0.000126 ***\nDESTIN_GRID_ID469   0.1609087  0.2222379     0.724 0.469042    \nDESTIN_GRID_ID470   3.1637737  0.2174458    14.550  &lt; 2e-16 ***\nDESTIN_GRID_ID471   2.2984972  0.2188689    10.502  &lt; 2e-16 ***\nDESTIN_GRID_ID488   0.3976823  0.2470667     1.610 0.107482    \nDESTIN_GRID_ID489  -1.4673620  0.3613031    -4.061 4.88e-05 ***\nDESTIN_GRID_ID490   1.4229232  0.2195610     6.481 9.13e-11 ***\nDESTIN_GRID_ID491   1.5871696  0.2180004     7.281 3.32e-13 ***\nDESTIN_GRID_ID493  -2.3351585  0.4149889    -5.627 1.83e-08 ***\nDESTIN_GRID_ID494   1.3398258  0.2233382     5.999 1.98e-09 ***\nDESTIN_GRID_ID509   0.3288637  0.2318866     1.418 0.156130    \nDESTIN_GRID_ID510   0.0871082  0.2306324     0.378 0.705659    \nDESTIN_GRID_ID511   1.1845538  0.2183654     5.425 5.81e-08 ***\nDESTIN_GRID_ID512   3.2299071  0.2173710    14.859  &lt; 2e-16 ***\nDESTIN_GRID_ID513  -0.1585197  0.2271043    -0.698 0.485175    \nDESTIN_GRID_ID514   0.0690165  0.2364510     0.292 0.770374    \nDESTIN_GRID_ID515  -0.3638373  0.2618852    -1.389 0.164741    \nDESTIN_GRID_ID530   0.1136228  0.2618118     0.434 0.664298    \nDESTIN_GRID_ID531   1.1118180  0.2233578     4.978 6.43e-07 ***\nDESTIN_GRID_ID532   0.2170068  0.2223341     0.976 0.329045    \nDESTIN_GRID_ID533   3.5703627  0.2173177    16.429  &lt; 2e-16 ***\nDESTIN_GRID_ID534   3.3705080  0.2173879    15.505  &lt; 2e-16 ***\nDESTIN_GRID_ID536   0.9775150  0.2226551     4.390 1.13e-05 ***\nDESTIN_GRID_ID537  -0.8588885  0.2955263    -2.906 0.003657 ** \nDESTIN_GRID_ID538  -0.8905211  0.3160121    -2.818 0.004832 ** \nDESTIN_GRID_ID539   0.6299914  0.7523867     0.837 0.402410    \nDESTIN_GRID_ID551  -0.5162681  0.2755406    -1.874 0.060978 .  \nDESTIN_GRID_ID552  -0.4691417  0.2527316    -1.856 0.063413 .  \nDESTIN_GRID_ID553  -0.0213807  0.2204407    -0.097 0.922734    \nDESTIN_GRID_ID554   2.6349416  0.2174126    12.120  &lt; 2e-16 ***\nDESTIN_GRID_ID555   2.0466343  0.2182677     9.377  &lt; 2e-16 ***\nDESTIN_GRID_ID559   0.8958023  0.2351120     3.810 0.000139 ***\nDESTIN_GRID_ID560  -0.8908606  0.3836913    -2.322 0.020243 *  \nDESTIN_GRID_ID561  -0.8109998  0.4359816    -1.860 0.062862 .  \nDESTIN_GRID_ID572  -3.0201657  0.7397619    -4.083 4.45e-05 ***\nDESTIN_GRID_ID573   0.9596131  0.2246083     4.272 1.93e-05 ***\nDESTIN_GRID_ID574   0.4942419  0.2243695     2.203 0.027609 *  \nDESTIN_GRID_ID575   5.0845354  0.2172696    23.402  &lt; 2e-16 ***\nDESTIN_GRID_ID576   2.4437204  0.2175143    11.235  &lt; 2e-16 ***\nDESTIN_GRID_ID578  -0.9061555  0.2801460    -3.235 0.001218 ** \nDESTIN_GRID_ID582  -0.5005564  0.2981355    -1.679 0.093161 .  \nDESTIN_GRID_ID583   0.7630701  0.2625942     2.906 0.003662 ** \nDESTIN_GRID_ID584   1.1542300  0.2460716     4.691 2.72e-06 ***\nDESTIN_GRID_ID593  -0.8050249  0.2981348    -2.700 0.006930 ** \nDESTIN_GRID_ID594   0.3975065  0.2281134     1.743 0.081406 .  \nDESTIN_GRID_ID595  -0.3797327  0.2226353    -1.706 0.088078 .  \nDESTIN_GRID_ID596   2.3580762  0.2174357    10.845  &lt; 2e-16 ***\nDESTIN_GRID_ID597  -1.1618949  0.2511681    -4.626 3.73e-06 ***\nDESTIN_GRID_ID603  -0.6568185  0.3258143    -2.016 0.043807 *  \nDESTIN_GRID_ID604   0.2038201  0.2858348     0.713 0.475803    \nDESTIN_GRID_ID615  -0.8692631  0.2447222    -3.552 0.000382 ***\nDESTIN_GRID_ID616   0.4022616  0.2226208     1.807 0.070772 .  \nDESTIN_GRID_ID617   0.0477044  0.2197198     0.217 0.828119    \nDESTIN_GRID_ID618   3.0557382  0.2173890    14.057  &lt; 2e-16 ***\nDESTIN_GRID_ID620  -0.5695204  0.2306693    -2.469 0.013549 *  \nDESTIN_GRID_ID637  -0.4960368  0.2271847    -2.183 0.029006 *  \nDESTIN_GRID_ID638   2.8960355  0.2173899    13.322  &lt; 2e-16 ***\nDESTIN_GRID_ID657   0.1085921  0.2249388     0.483 0.629264    \nDESTIN_GRID_ID658   1.6895849  0.2179645     7.752 9.07e-15 ***\nDESTIN_GRID_ID659   2.3173864  0.2175470    10.652  &lt; 2e-16 ***\nDESTIN_GRID_ID660   3.6189265  0.2173338    16.651  &lt; 2e-16 ***\nDESTIN_GRID_ID662   3.5598409  0.2177019    16.352  &lt; 2e-16 ***\nDESTIN_GRID_ID677   0.5298614  0.2299004     2.305 0.021181 *  \nDESTIN_GRID_ID678  -0.7897431  0.2309704    -3.419 0.000628 ***\nDESTIN_GRID_ID679   3.2512543  0.2174037    14.955  &lt; 2e-16 ***\nDESTIN_GRID_ID680   3.9448367  0.2173188    18.152  &lt; 2e-16 ***\nDESTIN_GRID_ID681   1.7804628  0.2182177     8.159 3.37e-16 ***\nDESTIN_GRID_ID699   0.7408486  0.2219554     3.338 0.000844 ***\nDESTIN_GRID_ID700   2.8231210  0.2175103    12.979  &lt; 2e-16 ***\nDESTIN_GRID_ID701   1.6302903  0.2179926     7.479 7.51e-14 ***\nDESTIN_GRID_ID702   3.3268943  0.2173591    15.306  &lt; 2e-16 ***\nDESTIN_GRID_ID704  -0.4705553  0.2271315    -2.072 0.038291 *  \nDESTIN_GRID_ID722   1.0531019  0.2186243     4.817 1.46e-06 ***\nDESTIN_GRID_ID725  -0.1797412  0.2246756    -0.800 0.423709    \nDESTIN_GRID_ID730   1.0951954  0.2400235     4.563 5.05e-06 ***\nDESTIN_GRID_ID741   1.9558646  0.2185262     8.950  &lt; 2e-16 ***\nDESTIN_GRID_ID743   0.8963818  0.2186554     4.100 4.14e-05 ***\nDESTIN_GRID_ID744   2.8475487  0.2174297    13.096  &lt; 2e-16 ***\nDESTIN_GRID_ID752   1.7386914  0.2239719     7.763 8.30e-15 ***\nDESTIN_GRID_ID761   0.6956337  0.2260001     3.078 0.002084 ** \nDESTIN_GRID_ID762   2.1951622  0.2180141    10.069  &lt; 2e-16 ***\nDESTIN_GRID_ID763   0.6380337  0.2193408     2.909 0.003627 ** \nDESTIN_GRID_ID764   3.5799463  0.2173394    16.472  &lt; 2e-16 ***\nDESTIN_GRID_ID765   1.2448047  0.2187929     5.689 1.27e-08 ***\nDESTIN_GRID_ID767   3.1825108  0.2174770    14.634  &lt; 2e-16 ***\nDESTIN_GRID_ID772   1.9494251  0.2205344     8.840  &lt; 2e-16 ***\nDESTIN_GRID_ID784   0.1828118  0.2213582     0.826 0.408881    \nDESTIN_GRID_ID785   2.5019553  0.2174548    11.506  &lt; 2e-16 ***\nDESTIN_GRID_ID786   1.7927763  0.2176622     8.237  &lt; 2e-16 ***\nDESTIN_GRID_ID787   1.8751652  0.2181912     8.594  &lt; 2e-16 ***\nDESTIN_GRID_ID788   2.4167244  0.2176687    11.103  &lt; 2e-16 ***\nDESTIN_GRID_ID789   1.0461895  0.2187018     4.784 1.72e-06 ***\nDESTIN_GRID_ID803  -1.0411142  0.2578053    -4.038 5.38e-05 ***\nDESTIN_GRID_ID804   3.2742124  0.2174738    15.056  &lt; 2e-16 ***\nDESTIN_GRID_ID805   4.2159499  0.2173097    19.401  &lt; 2e-16 ***\nDESTIN_GRID_ID806   2.4937744  0.2174693    11.467  &lt; 2e-16 ***\nDESTIN_GRID_ID807   3.2510065  0.2174591    14.950  &lt; 2e-16 ***\nDESTIN_GRID_ID808   0.8788472  0.2200356     3.994 6.49e-05 ***\nDESTIN_GRID_ID809   3.0383319  0.2173949    13.976  &lt; 2e-16 ***\nDESTIN_GRID_ID810   2.3489020  0.2176293    10.793  &lt; 2e-16 ***\nDESTIN_GRID_ID814   2.0844059  0.2199147     9.478  &lt; 2e-16 ***\nDESTIN_GRID_ID819   5.0583958  0.2204474    22.946  &lt; 2e-16 ***\nDESTIN_GRID_ID824   0.0472776  0.2333263     0.203 0.839428    \nDESTIN_GRID_ID826   0.7964363  0.2185847     3.644 0.000269 ***\nDESTIN_GRID_ID827   2.8304509  0.2174328    13.018  &lt; 2e-16 ***\nDESTIN_GRID_ID828   2.8430184  0.2174027    13.077  &lt; 2e-16 ***\nDESTIN_GRID_ID829   2.6334023  0.2175327    12.106  &lt; 2e-16 ***\nDESTIN_GRID_ID830   2.1525267  0.2177042     9.887  &lt; 2e-16 ***\nDESTIN_GRID_ID831   4.4528031  0.2173126    20.490  &lt; 2e-16 ***\nDESTIN_GRID_ID832   3.7626894  0.2174193    17.306  &lt; 2e-16 ***\nDESTIN_GRID_ID835  -0.5846752  0.2494312    -2.344 0.019076 *  \nDESTIN_GRID_ID844  -1.0029523  0.3011593    -3.330 0.000868 ***\nDESTIN_GRID_ID846   2.5820649  0.2175518    11.869  &lt; 2e-16 ***\nDESTIN_GRID_ID847   3.3785692  0.2173941    15.541  &lt; 2e-16 ***\nDESTIN_GRID_ID848   2.4072051  0.2174935    11.068  &lt; 2e-16 ***\nDESTIN_GRID_ID849   1.5490457  0.2177994     7.112 1.14e-12 ***\nDESTIN_GRID_ID850   2.6279964  0.2174738    12.084  &lt; 2e-16 ***\nDESTIN_GRID_ID851   2.6638235  0.2174344    12.251  &lt; 2e-16 ***\nDESTIN_GRID_ID852   2.1326106  0.2176627     9.798  &lt; 2e-16 ***\nDESTIN_GRID_ID853   4.1361050  0.2174545    19.021  &lt; 2e-16 ***\nDESTIN_GRID_ID854  -0.0325512  0.2394403    -0.136 0.891863    \nDESTIN_GRID_ID855  -0.9645166  0.2517668    -3.831 0.000128 ***\nDESTIN_GRID_ID856   0.9489890  0.2229329     4.257 2.07e-05 ***\nDESTIN_GRID_ID866   1.1586894  0.2223277     5.212 1.87e-07 ***\nDESTIN_GRID_ID867   1.3399431  0.2186516     6.128 8.89e-10 ***\nDESTIN_GRID_ID868   1.9385865  0.2180585     8.890  &lt; 2e-16 ***\nDESTIN_GRID_ID869   2.6861239  0.2179107    12.327  &lt; 2e-16 ***\nDESTIN_GRID_ID870   3.9976004  0.2173143    18.395  &lt; 2e-16 ***\nDESTIN_GRID_ID871   3.7499434  0.2174285    17.247  &lt; 2e-16 ***\nDESTIN_GRID_ID872   0.7267596  0.2186650     3.324 0.000889 ***\nDESTIN_GRID_ID873   2.0568080  0.2178585     9.441  &lt; 2e-16 ***\nDESTIN_GRID_ID874   0.9912741  0.2183613     4.540 5.64e-06 ***\nDESTIN_GRID_ID875  -0.9846836  0.2712357    -3.630 0.000283 ***\nDESTIN_GRID_ID876  -0.6749269  0.2394412    -2.819 0.004821 ** \nDESTIN_GRID_ID877   1.4516819  0.2201541     6.594 4.28e-11 ***\nDESTIN_GRID_ID887   1.5035143  0.2184473     6.883 5.87e-12 ***\nDESTIN_GRID_ID888   1.9039133  0.2178619     8.739  &lt; 2e-16 ***\nDESTIN_GRID_ID889  -0.3056271  0.2272956    -1.345 0.178747    \nDESTIN_GRID_ID890   3.0753988  0.2174044    14.146  &lt; 2e-16 ***\nDESTIN_GRID_ID891   1.8029251  0.2184013     8.255  &lt; 2e-16 ***\nDESTIN_GRID_ID893   2.9726092  0.2173928    13.674  &lt; 2e-16 ***\nDESTIN_GRID_ID894   0.6195991  0.2189973     2.829 0.004666 ** \nDESTIN_GRID_ID895   0.8697051  0.2197638     3.957 7.58e-05 ***\nDESTIN_GRID_ID896  -0.3839193  0.2284672    -1.680 0.092877 .  \nDESTIN_GRID_ID897   0.6269601  0.2204901     2.843 0.004462 ** \nDESTIN_GRID_ID898   0.5189856  0.2257596     2.299 0.021514 *  \nDESTIN_GRID_ID908   2.0402700  0.2196539     9.289  &lt; 2e-16 ***\nDESTIN_GRID_ID909   2.1380362  0.2175892     9.826  &lt; 2e-16 ***\nDESTIN_GRID_ID910  -0.6531461  0.2248904    -2.904 0.003681 ** \nDESTIN_GRID_ID911   2.0659358  0.2177675     9.487  &lt; 2e-16 ***\nDESTIN_GRID_ID912   2.8012474  0.2174484    12.882  &lt; 2e-16 ***\nDESTIN_GRID_ID915   2.5763363  0.2174616    11.847  &lt; 2e-16 ***\nDESTIN_GRID_ID917   2.6267736  0.2177907    12.061  &lt; 2e-16 ***\nDESTIN_GRID_ID918  -1.4738428  0.2457437    -5.997 2.00e-09 ***\nDESTIN_GRID_ID919   0.7124914  0.2195190     3.246 0.001172 ** \nDESTIN_GRID_ID928   1.9630303  0.2182036     8.996  &lt; 2e-16 ***\nDESTIN_GRID_ID929   2.6323935  0.2174760    12.104  &lt; 2e-16 ***\nDESTIN_GRID_ID930   3.5826695  0.2173426    16.484  &lt; 2e-16 ***\nDESTIN_GRID_ID931   0.0566198  0.2224152     0.255 0.799057    \nDESTIN_GRID_ID932   0.5614397  0.2212383     2.538 0.011158 *  \nDESTIN_GRID_ID933   2.3783739  0.2176925    10.925  &lt; 2e-16 ***\nDESTIN_GRID_ID934  -0.3782699  0.2232203    -1.695 0.090151 .  \nDESTIN_GRID_ID935   4.4988558  0.2173034    20.703  &lt; 2e-16 ***\nDESTIN_GRID_ID938  -2.5555429  0.4150650    -6.157 7.41e-10 ***\nDESTIN_GRID_ID939   4.2510823  0.2173836    19.556  &lt; 2e-16 ***\nDESTIN_GRID_ID940  -1.9502357  0.2608834    -7.476 7.69e-14 ***\nDESTIN_GRID_ID949   1.9710671  0.2181198     9.037  &lt; 2e-16 ***\nDESTIN_GRID_ID950   3.6996791  0.2174089    17.017  &lt; 2e-16 ***\nDESTIN_GRID_ID951   4.4812070  0.2173042    20.622  &lt; 2e-16 ***\nDESTIN_GRID_ID952   0.2710615  0.2226312     1.218 0.223400    \nDESTIN_GRID_ID953   1.7897463  0.2181806     8.203 2.34e-16 ***\nDESTIN_GRID_ID954   0.4649450  0.2196534     2.117 0.034284 *  \nDESTIN_GRID_ID955   3.3111196  0.2174179    15.229  &lt; 2e-16 ***\nDESTIN_GRID_ID956   1.0292907  0.2183071     4.715 2.42e-06 ***\nDESTIN_GRID_ID957   2.8035957  0.2174857    12.891  &lt; 2e-16 ***\nDESTIN_GRID_ID959  -0.2398989  0.2368875    -1.013 0.311198    \nDESTIN_GRID_ID961  -0.1013521  0.2231105    -0.454 0.649635    \nDESTIN_GRID_ID962   4.5254906  0.2174200    20.815  &lt; 2e-16 ***\nDESTIN_GRID_ID970   2.2411658  0.2176870    10.295  &lt; 2e-16 ***\nDESTIN_GRID_ID971   2.9872131  0.2173918    13.741  &lt; 2e-16 ***\nDESTIN_GRID_ID972   2.7891986  0.2174527    12.827  &lt; 2e-16 ***\nDESTIN_GRID_ID974   2.1714621  0.2177742     9.971  &lt; 2e-16 ***\nDESTIN_GRID_ID975   1.4436325  0.2182353     6.615 3.71e-11 ***\nDESTIN_GRID_ID976   1.3274978  0.2183194     6.081 1.20e-09 ***\nDESTIN_GRID_ID977   2.7692020  0.2174276    12.736  &lt; 2e-16 ***\nDESTIN_GRID_ID978   2.6275924  0.2176878    12.070  &lt; 2e-16 ***\nDESTIN_GRID_ID982   0.2176891  0.2197982     0.990 0.321977    \nDESTIN_GRID_ID983   6.2760393  0.2183918    28.738  &lt; 2e-16 ***\nDESTIN_GRID_ID984   4.2760927  0.2183269    19.586  &lt; 2e-16 ***\nDESTIN_GRID_ID991   2.4453160  0.2177600    11.229  &lt; 2e-16 ***\nDESTIN_GRID_ID992   2.6026643  0.2175763    11.962  &lt; 2e-16 ***\nDESTIN_GRID_ID993   1.6067135  0.2178367     7.376 1.63e-13 ***\nDESTIN_GRID_ID994   1.8810188  0.2178396     8.635  &lt; 2e-16 ***\nDESTIN_GRID_ID995   2.5968019  0.2175625    11.936  &lt; 2e-16 ***\nDESTIN_GRID_ID996   1.8532677  0.2179844     8.502  &lt; 2e-16 ***\nDESTIN_GRID_ID997   0.9675349  0.2211874     4.374 1.22e-05 ***\nDESTIN_GRID_ID998   3.2856935  0.2174159    15.112  &lt; 2e-16 ***\nDESTIN_GRID_ID999   2.6178952  0.2175894    12.031  &lt; 2e-16 ***\nDESTIN_GRID_ID1001  0.5768077  0.2237848     2.578 0.009951 ** \nDESTIN_GRID_ID1003  3.4876016  0.2173877    16.043  &lt; 2e-16 ***\nDESTIN_GRID_ID1004  3.3936061  0.2174018    15.610  &lt; 2e-16 ***\nDESTIN_GRID_ID1011  0.6813331  0.2239882     3.042 0.002351 ** \nDESTIN_GRID_ID1012  2.4734966  0.2181489    11.339  &lt; 2e-16 ***\nDESTIN_GRID_ID1013  1.4636515  0.2183169     6.704 2.02e-11 ***\nDESTIN_GRID_ID1014  1.4833477  0.2182294     6.797 1.07e-11 ***\nDESTIN_GRID_ID1015  0.5226919  0.2196774     2.379 0.017343 *  \nDESTIN_GRID_ID1016  3.6579827  0.2173736    16.828  &lt; 2e-16 ***\nDESTIN_GRID_ID1018  1.6433691  0.2185174     7.521 5.46e-14 ***\nDESTIN_GRID_ID1019  3.0975819  0.2174556    14.245  &lt; 2e-16 ***\nDESTIN_GRID_ID1023  2.0216912  0.2180727     9.271  &lt; 2e-16 ***\nDESTIN_GRID_ID1024  2.7478226  0.2175155    12.633  &lt; 2e-16 ***\nDESTIN_GRID_ID1025  0.0833674  0.2237926     0.373 0.709505    \nDESTIN_GRID_ID1033  1.6415504  0.2184305     7.515 5.68e-14 ***\nDESTIN_GRID_ID1034  2.4682884  0.2176419    11.341  &lt; 2e-16 ***\nDESTIN_GRID_ID1035  2.8759358  0.2175102    13.222  &lt; 2e-16 ***\nDESTIN_GRID_ID1036  2.6979091  0.2175627    12.401  &lt; 2e-16 ***\nDESTIN_GRID_ID1037  2.7048204  0.2174857    12.437  &lt; 2e-16 ***\nDESTIN_GRID_ID1043  2.3615539  0.2185617    10.805  &lt; 2e-16 ***\nDESTIN_GRID_ID1045  2.9374442  0.2174380    13.509  &lt; 2e-16 ***\nDESTIN_GRID_ID1046  2.9403360  0.2175399    13.516  &lt; 2e-16 ***\nDESTIN_GRID_ID1053  3.1771998  0.2175401    14.605  &lt; 2e-16 ***\nDESTIN_GRID_ID1054  1.9663909  0.2179069     9.024  &lt; 2e-16 ***\nDESTIN_GRID_ID1055  2.9226677  0.2175109    13.437  &lt; 2e-16 ***\nDESTIN_GRID_ID1056  1.9823665  0.2179352     9.096  &lt; 2e-16 ***\nDESTIN_GRID_ID1064 -1.4523570  0.2860327    -5.078 3.82e-07 ***\nDESTIN_GRID_ID1066  3.3243930  0.2174030    15.291  &lt; 2e-16 ***\nDESTIN_GRID_ID1067 -2.1313930  0.2927228    -7.281 3.31e-13 ***\nDESTIN_GRID_ID1074  2.4198012  0.2178781    11.106  &lt; 2e-16 ***\nDESTIN_GRID_ID1075  0.9761937  0.2196447     4.444 8.81e-06 ***\nDESTIN_GRID_ID1076  1.2713759  0.2183044     5.824 5.75e-09 ***\nDESTIN_GRID_ID1077  1.7114936  0.2180579     7.849 4.20e-15 ***\nDESTIN_GRID_ID1079  3.0205520  0.2174784    13.889  &lt; 2e-16 ***\nDESTIN_GRID_ID1085 -0.5747483  0.3206410    -1.792 0.073053 .  \nDESTIN_GRID_ID1087  2.2962427  0.2176001    10.553  &lt; 2e-16 ***\nDESTIN_GRID_ID1088  0.6880722  0.2189078     3.143 0.001671 ** \nDESTIN_GRID_ID1094  0.3738287  0.2270841     1.646 0.099720 .  \nDESTIN_GRID_ID1095  0.9661191  0.2245841     4.302 1.69e-05 ***\nDESTIN_GRID_ID1096  0.7719117  0.2279058     3.387 0.000707 ***\nDESTIN_GRID_ID1097  3.5107751  0.2173886    16.150  &lt; 2e-16 ***\nDESTIN_GRID_ID1098  0.9596283  0.2200920     4.360 1.30e-05 ***\nDESTIN_GRID_ID1099  2.3543421  0.2176601    10.817  &lt; 2e-16 ***\nDESTIN_GRID_ID1105  3.9307278  0.2180215    18.029  &lt; 2e-16 ***\nDESTIN_GRID_ID1106 -1.3059305  0.2769996    -4.715 2.42e-06 ***\nDESTIN_GRID_ID1107  2.1463909  0.2181230     9.840  &lt; 2e-16 ***\nDESTIN_GRID_ID1108  5.0455905  0.2173142    23.218  &lt; 2e-16 ***\nDESTIN_GRID_ID1109  0.3785668  0.2229844     1.698 0.089559 .  \nDESTIN_GRID_ID1116  1.6742427  0.2184487     7.664 1.80e-14 ***\nDESTIN_GRID_ID1117  1.6104300  0.2187084     7.363 1.79e-13 ***\nDESTIN_GRID_ID1118  1.9015356  0.2184673     8.704  &lt; 2e-16 ***\nDESTIN_GRID_ID1119  2.1340870  0.2177920     9.799  &lt; 2e-16 ***\nDESTIN_GRID_ID1120  1.6967188  0.2185624     7.763 8.29e-15 ***\nDESTIN_GRID_ID1129  2.7432298  0.2175212    12.611  &lt; 2e-16 ***\nDESTIN_GRID_ID1130  2.7018792  0.2174825    12.423  &lt; 2e-16 ***\nDESTIN_GRID_ID1131  2.2126027  0.2184729    10.128  &lt; 2e-16 ***\nDESTIN_GRID_ID1136  1.4253207  0.2189113     6.511 7.47e-11 ***\nDESTIN_GRID_ID1138  0.7966119  0.2214628     3.597 0.000322 ***\nDESTIN_GRID_ID1139  2.9079820  0.2174556    13.373  &lt; 2e-16 ***\nDESTIN_GRID_ID1141  2.4345436  0.2176503    11.186  &lt; 2e-16 ***\nDESTIN_GRID_ID1148 -0.6480684  0.2498446    -2.594 0.009490 ** \nDESTIN_GRID_ID1149  1.2680039  0.2195253     5.776 7.64e-09 ***\nDESTIN_GRID_ID1150  2.8543903  0.2174331    13.128  &lt; 2e-16 ***\nDESTIN_GRID_ID1151  1.9437856  0.2178829     8.921  &lt; 2e-16 ***\nDESTIN_GRID_ID1158  1.3671043  0.2184741     6.258 3.91e-10 ***\nDESTIN_GRID_ID1159  2.5349375  0.2175551    11.652  &lt; 2e-16 ***\nDESTIN_GRID_ID1160  3.4559990  0.2173851    15.898  &lt; 2e-16 ***\nDESTIN_GRID_ID1171  3.3556780  0.2174724    15.430  &lt; 2e-16 ***\nDESTIN_GRID_ID1172  3.9231941  0.2173715    18.048  &lt; 2e-16 ***\nDESTIN_GRID_ID1173  1.1002486  0.2193247     5.017 5.26e-07 ***\nDESTIN_GRID_ID1178  2.4172012  0.2176842    11.104  &lt; 2e-16 ***\nDESTIN_GRID_ID1179  3.1328859  0.2174281    14.409  &lt; 2e-16 ***\nDESTIN_GRID_ID1180  3.3045600  0.2173957    15.201  &lt; 2e-16 ***\nDESTIN_GRID_ID1181  2.3392978  0.2176053    10.750  &lt; 2e-16 ***\nDESTIN_GRID_ID1183  1.4515128  0.2185504     6.642 3.10e-11 ***\nDESTIN_GRID_ID1190  1.5662031  0.2225924     7.036 1.98e-12 ***\nDESTIN_GRID_ID1192  2.6290308  0.2175760    12.083  &lt; 2e-16 ***\nDESTIN_GRID_ID1193  2.2670685  0.2177038    10.414  &lt; 2e-16 ***\nDESTIN_GRID_ID1194  0.6989359  0.2211410     3.161 0.001575 ** \nDESTIN_GRID_ID1200  2.3761068  0.2176952    10.915  &lt; 2e-16 ***\nDESTIN_GRID_ID1201  2.9936094  0.2174656    13.766  &lt; 2e-16 ***\nDESTIN_GRID_ID1203  2.5390618  0.2176255    11.667  &lt; 2e-16 ***\nDESTIN_GRID_ID1204  1.8363896  0.2179999     8.424  &lt; 2e-16 ***\nDESTIN_GRID_ID1211 -1.0986285  0.3208535    -3.424 0.000617 ***\nDESTIN_GRID_ID1214  2.8366898  0.2175246    13.041  &lt; 2e-16 ***\nDESTIN_GRID_ID1215 -1.0214158  0.2539211    -4.023 5.76e-05 ***\nDESTIN_GRID_ID1216  0.6501396  0.2241412     2.901 0.003725 ** \nDESTIN_GRID_ID1220  3.0437482  0.2174697    13.996  &lt; 2e-16 ***\nDESTIN_GRID_ID1221  2.9906739  0.2174338    13.754  &lt; 2e-16 ***\nDESTIN_GRID_ID1222  2.4793655  0.2180300    11.372  &lt; 2e-16 ***\nDESTIN_GRID_ID1223  1.9560488  0.2179444     8.975  &lt; 2e-16 ***\nDESTIN_GRID_ID1224  2.2028808  0.2177647    10.116  &lt; 2e-16 ***\nDESTIN_GRID_ID1231  0.7045173  0.2261276     3.116 0.001836 ** \nDESTIN_GRID_ID1232  0.8897085  0.2303390     3.863 0.000112 ***\nDESTIN_GRID_ID1235  0.3450959  0.2199615     1.569 0.116673    \nDESTIN_GRID_ID1236  1.6196433  0.2185939     7.409 1.27e-13 ***\nDESTIN_GRID_ID1241  1.7395474  0.2180288     7.979 1.48e-15 ***\nDESTIN_GRID_ID1242  2.3469088  0.2176414    10.783  &lt; 2e-16 ***\nDESTIN_GRID_ID1243  2.9803863  0.2174455    13.706  &lt; 2e-16 ***\nDESTIN_GRID_ID1246  2.6291055  0.2175755    12.084  &lt; 2e-16 ***\nDESTIN_GRID_ID1256  1.6712110  0.2180581     7.664 1.80e-14 ***\nDESTIN_GRID_ID1257  2.3834361  0.2178404    10.941  &lt; 2e-16 ***\nDESTIN_GRID_ID1258  1.4162164  0.2194447     6.454 1.09e-10 ***\nDESTIN_GRID_ID1262  1.3667340  0.2182879     6.261 3.82e-10 ***\nDESTIN_GRID_ID1263  3.2654702  0.2173812    15.022  &lt; 2e-16 ***\nDESTIN_GRID_ID1264  1.9744957  0.2179776     9.058  &lt; 2e-16 ***\nDESTIN_GRID_ID1265  2.0386956  0.2179722     9.353  &lt; 2e-16 ***\nDESTIN_GRID_ID1266  2.2658885  0.2177947    10.404  &lt; 2e-16 ***\nDESTIN_GRID_ID1267  1.8043333  0.2185788     8.255  &lt; 2e-16 ***\nDESTIN_GRID_ID1272 -1.4515287  0.2725514    -5.326 1.01e-07 ***\nDESTIN_GRID_ID1273  1.9495181  0.2182746     8.931  &lt; 2e-16 ***\nDESTIN_GRID_ID1277  3.3317429  0.2174335    15.323  &lt; 2e-16 ***\nDESTIN_GRID_ID1278  1.0075835  0.2189944     4.601 4.21e-06 ***\nDESTIN_GRID_ID1283  4.6014328  0.2173228    21.173  &lt; 2e-16 ***\nDESTIN_GRID_ID1284  2.9696583  0.2174489    13.657  &lt; 2e-16 ***\nDESTIN_GRID_ID1285  3.5308365  0.2173773    16.243  &lt; 2e-16 ***\nDESTIN_GRID_ID1286  1.6682606  0.2183690     7.640 2.18e-14 ***\nDESTIN_GRID_ID1289 -0.0057862  0.2287346    -0.025 0.979818    \nDESTIN_GRID_ID1293 -0.6476345  0.2447347    -2.646 0.008138 ** \nDESTIN_GRID_ID1294  3.1248496  0.2176758    14.356  &lt; 2e-16 ***\nDESTIN_GRID_ID1295  0.8452359  0.2206531     3.831 0.000128 ***\nDESTIN_GRID_ID1298  2.0629114  0.2177642     9.473  &lt; 2e-16 ***\nDESTIN_GRID_ID1299  2.7233368  0.2176352    12.513  &lt; 2e-16 ***\nDESTIN_GRID_ID1304  3.2747315  0.2174298    15.061  &lt; 2e-16 ***\nDESTIN_GRID_ID1305  2.9809358  0.2174058    13.711  &lt; 2e-16 ***\nDESTIN_GRID_ID1307  1.4877248  0.2203826     6.751 1.47e-11 ***\nDESTIN_GRID_ID1308  2.7739679  0.2175322    12.752  &lt; 2e-16 ***\nDESTIN_GRID_ID1310 -0.9267262  0.2699447    -3.433 0.000597 ***\nDESTIN_GRID_ID1316  0.1645368  0.2223883     0.740 0.459383    \nDESTIN_GRID_ID1317  0.8859952  0.2187842     4.050 5.13e-05 ***\nDESTIN_GRID_ID1318  0.3702954  0.2201461     1.682 0.092560 .  \nDESTIN_GRID_ID1319  3.8696929  0.2173831    17.801  &lt; 2e-16 ***\nDESTIN_GRID_ID1320  1.5654401  0.2187612     7.156 8.31e-13 ***\nDESTIN_GRID_ID1324  3.4609258  0.2183190    15.853  &lt; 2e-16 ***\nDESTIN_GRID_ID1325  1.1843870  0.2185226     5.420 5.96e-08 ***\nDESTIN_GRID_ID1326  2.9409138  0.2174398    13.525  &lt; 2e-16 ***\nDESTIN_GRID_ID1327  2.8270392  0.2174526    13.001  &lt; 2e-16 ***\nDESTIN_GRID_ID1328  2.2280937  0.2176411    10.237  &lt; 2e-16 ***\nDESTIN_GRID_ID1329  2.4086392  0.2178176    11.058  &lt; 2e-16 ***\nDESTIN_GRID_ID1330  3.1914507  0.2176944    14.660  &lt; 2e-16 ***\nDESTIN_GRID_ID1331 -1.2584439  0.3117990    -4.036 5.44e-05 ***\nDESTIN_GRID_ID1333  1.4679649  0.2188371     6.708 1.97e-11 ***\nDESTIN_GRID_ID1334  1.8379305  0.2184382     8.414  &lt; 2e-16 ***\nDESTIN_GRID_ID1335  1.5131704  0.2189853     6.910 4.85e-12 ***\nDESTIN_GRID_ID1336 -0.2586589  0.2476054    -1.045 0.296189    \nDESTIN_GRID_ID1337  0.5885502  0.2215859     2.656 0.007905 ** \nDESTIN_GRID_ID1338 -1.8597495  0.2492950    -7.460 8.65e-14 ***\nDESTIN_GRID_ID1339  3.6547958  0.2173819    16.813  &lt; 2e-16 ***\nDESTIN_GRID_ID1340  2.9549584  0.2175477    13.583  &lt; 2e-16 ***\nDESTIN_GRID_ID1341 -1.8475269  0.4150359    -4.451 8.53e-06 ***\nDESTIN_GRID_ID1346  2.4119615  0.2177817    11.075  &lt; 2e-16 ***\nDESTIN_GRID_ID1347  4.1255402  0.2173420    18.982  &lt; 2e-16 ***\nDESTIN_GRID_ID1348  2.8880148  0.2174523    13.281  &lt; 2e-16 ***\nDESTIN_GRID_ID1349  3.5173479  0.2174063    16.179  &lt; 2e-16 ***\nDESTIN_GRID_ID1350  1.4716678  0.2188938     6.723 1.78e-11 ***\nDESTIN_GRID_ID1353  2.7001864  0.2175789    12.410  &lt; 2e-16 ***\nDESTIN_GRID_ID1354  0.8674156  0.2193083     3.955 7.65e-05 ***\nDESTIN_GRID_ID1355  1.9066183  0.2180530     8.744  &lt; 2e-16 ***\nDESTIN_GRID_ID1357  0.5668890  0.2224720     2.548 0.010830 *  \nDESTIN_GRID_ID1358  3.5920002  0.2174071    16.522  &lt; 2e-16 ***\nDESTIN_GRID_ID1359  2.2911747  0.2175643    10.531  &lt; 2e-16 ***\nDESTIN_GRID_ID1360  1.8350251  0.2177318     8.428  &lt; 2e-16 ***\nDESTIN_GRID_ID1361  3.1243726  0.2175216    14.364  &lt; 2e-16 ***\nDESTIN_GRID_ID1362 -0.8183685  0.2593282    -3.156 0.001601 ** \nDESTIN_GRID_ID1368  1.9372849  0.2177593     8.896  &lt; 2e-16 ***\nDESTIN_GRID_ID1369  1.8730568  0.2177321     8.603  &lt; 2e-16 ***\nDESTIN_GRID_ID1370  4.2327605  0.2173182    19.477  &lt; 2e-16 ***\nDESTIN_GRID_ID1371  2.0876672  0.2177831     9.586  &lt; 2e-16 ***\nDESTIN_GRID_ID1372  0.8999132  0.2194310     4.101 4.11e-05 ***\nDESTIN_GRID_ID1373  0.3484167  0.2232598     1.561 0.118621    \nDESTIN_GRID_ID1374  1.5908199  0.2180999     7.294 3.01e-13 ***\nDESTIN_GRID_ID1375  2.9144779  0.2176493    13.391  &lt; 2e-16 ***\nDESTIN_GRID_ID1376  1.3579382  0.2192446     6.194 5.88e-10 ***\nDESTIN_GRID_ID1379  0.6831269  0.2220315     3.077 0.002093 ** \nDESTIN_GRID_ID1380  3.7741247  0.2173631    17.363  &lt; 2e-16 ***\nDESTIN_GRID_ID1381  4.1403038  0.2173408    19.050  &lt; 2e-16 ***\nDESTIN_GRID_ID1382  3.1653980  0.2174921    14.554  &lt; 2e-16 ***\nDESTIN_GRID_ID1383  0.6297115  0.2203997     2.857 0.004275 ** \nDESTIN_GRID_ID1388  2.4506401  0.2175817    11.263  &lt; 2e-16 ***\nDESTIN_GRID_ID1389  2.0932778  0.2176423     9.618  &lt; 2e-16 ***\nDESTIN_GRID_ID1390  2.5056501  0.2175256    11.519  &lt; 2e-16 ***\nDESTIN_GRID_ID1391  3.0579672  0.2174493    14.063  &lt; 2e-16 ***\nDESTIN_GRID_ID1392  1.8490530  0.2209064     8.370  &lt; 2e-16 ***\nDESTIN_GRID_ID1393  0.5554958  0.2197472     2.528 0.011475 *  \nDESTIN_GRID_ID1394  2.4867627  0.2175637    11.430  &lt; 2e-16 ***\nDESTIN_GRID_ID1395  2.6344921  0.2175158    12.112  &lt; 2e-16 ***\nDESTIN_GRID_ID1396  3.0807276  0.2174586    14.167  &lt; 2e-16 ***\nDESTIN_GRID_ID1397  2.8203122  0.2175194    12.966  &lt; 2e-16 ***\nDESTIN_GRID_ID1398  1.7660214  0.2187464     8.073 6.84e-16 ***\nDESTIN_GRID_ID1400  2.2069604  0.2178077    10.133  &lt; 2e-16 ***\nDESTIN_GRID_ID1401  3.3699579  0.2173696    15.503  &lt; 2e-16 ***\nDESTIN_GRID_ID1402  2.5151094  0.2175249    11.562  &lt; 2e-16 ***\nDESTIN_GRID_ID1404  3.5461315  0.2182518    16.248  &lt; 2e-16 ***\nDESTIN_GRID_ID1410  2.8409199  0.2174510    13.065  &lt; 2e-16 ***\nDESTIN_GRID_ID1411  2.2364324  0.2176473    10.275  &lt; 2e-16 ***\nDESTIN_GRID_ID1412  3.9031263  0.2173330    17.959  &lt; 2e-16 ***\nDESTIN_GRID_ID1413  2.8574344  0.2174634    13.140  &lt; 2e-16 ***\nDESTIN_GRID_ID1414  2.1193106  0.2176250     9.738  &lt; 2e-16 ***\nDESTIN_GRID_ID1415  2.0623420  0.2177126     9.473  &lt; 2e-16 ***\nDESTIN_GRID_ID1416  2.1523297  0.2177010     9.887  &lt; 2e-16 ***\nDESTIN_GRID_ID1417  2.0466026  0.2176422     9.404  &lt; 2e-16 ***\nDESTIN_GRID_ID1418  2.7255921  0.2175000    12.531  &lt; 2e-16 ***\nDESTIN_GRID_ID1419  2.1189606  0.2178162     9.728  &lt; 2e-16 ***\nDESTIN_GRID_ID1422  2.4131526  0.2175634    11.092  &lt; 2e-16 ***\nDESTIN_GRID_ID1423  2.7964364  0.2174920    12.858  &lt; 2e-16 ***\nDESTIN_GRID_ID1430  2.8445282  0.2175745    13.074  &lt; 2e-16 ***\nDESTIN_GRID_ID1431  4.4376871  0.2173169    20.420  &lt; 2e-16 ***\nDESTIN_GRID_ID1432  3.5232755  0.2173529    16.210  &lt; 2e-16 ***\nDESTIN_GRID_ID1433  1.1325479  0.2191167     5.169 2.36e-07 ***\nDESTIN_GRID_ID1434  3.3383618  0.2173910    15.356  &lt; 2e-16 ***\nDESTIN_GRID_ID1435  2.8155532  0.2174319    12.949  &lt; 2e-16 ***\nDESTIN_GRID_ID1436  0.4089993  0.2202007     1.857 0.063255 .  \nDESTIN_GRID_ID1437  2.9739358  0.2174392    13.677  &lt; 2e-16 ***\nDESTIN_GRID_ID1438  3.3856522  0.2173605    15.576  &lt; 2e-16 ***\nDESTIN_GRID_ID1439  3.4971908  0.2173864    16.087  &lt; 2e-16 ***\nDESTIN_GRID_ID1440  0.7560306  0.2208083     3.424 0.000617 ***\nDESTIN_GRID_ID1442  1.7140312  0.2181419     7.857 3.92e-15 ***\nDESTIN_GRID_ID1443  2.6188329  0.2175251    12.039  &lt; 2e-16 ***\nDESTIN_GRID_ID1444  1.8791606  0.2182575     8.610  &lt; 2e-16 ***\nDESTIN_GRID_ID1452  2.9136729  0.2174598    13.399  &lt; 2e-16 ***\nDESTIN_GRID_ID1453  3.1174209  0.2174044    14.339  &lt; 2e-16 ***\nDESTIN_GRID_ID1454  2.3707806  0.2176568    10.892  &lt; 2e-16 ***\nDESTIN_GRID_ID1455  1.9469643  0.2178115     8.939  &lt; 2e-16 ***\nDESTIN_GRID_ID1456  2.8725252  0.2174594    13.209  &lt; 2e-16 ***\nDESTIN_GRID_ID1457  3.4178825  0.2174030    15.721  &lt; 2e-16 ***\nDESTIN_GRID_ID1458  4.2576214  0.2173238    19.591  &lt; 2e-16 ***\nDESTIN_GRID_ID1459  2.3092601  0.2175251    10.616  &lt; 2e-16 ***\nDESTIN_GRID_ID1460  3.0446921  0.2174036    14.005  &lt; 2e-16 ***\nDESTIN_GRID_ID1461  1.5440378  0.2184981     7.067 1.59e-12 ***\nDESTIN_GRID_ID1464  2.8214939  0.2175332    12.970  &lt; 2e-16 ***\nDESTIN_GRID_ID1465  2.2398327  0.2177641    10.286  &lt; 2e-16 ***\nDESTIN_GRID_ID1472  1.8265590  0.2182405     8.369  &lt; 2e-16 ***\nDESTIN_GRID_ID1473  2.4152244  0.2175597    11.101  &lt; 2e-16 ***\nDESTIN_GRID_ID1474  3.7063955  0.2173344    17.054  &lt; 2e-16 ***\nDESTIN_GRID_ID1475  3.8275020  0.2173371    17.611  &lt; 2e-16 ***\nDESTIN_GRID_ID1476  2.4181252  0.2175515    11.115  &lt; 2e-16 ***\nDESTIN_GRID_ID1477  4.3900734  0.2173078    20.202  &lt; 2e-16 ***\nDESTIN_GRID_ID1478  1.9233141  0.2176481     8.837  &lt; 2e-16 ***\nDESTIN_GRID_ID1479  2.0517545  0.2175906     9.429  &lt; 2e-16 ***\nDESTIN_GRID_ID1480  4.2884013  0.2173157    19.734  &lt; 2e-16 ***\nDESTIN_GRID_ID1481  1.0561454  0.2186587     4.830 1.36e-06 ***\nDESTIN_GRID_ID1482  1.1698584  0.2195190     5.329 9.87e-08 ***\nDESTIN_GRID_ID1485  1.5474263  0.2181624     7.093 1.31e-12 ***\nDESTIN_GRID_ID1494  1.7707827  0.2180621     8.121 4.64e-16 ***\nDESTIN_GRID_ID1495  3.0146070  0.2174135    13.866  &lt; 2e-16 ***\nDESTIN_GRID_ID1496  4.0820033  0.2173181    18.784  &lt; 2e-16 ***\nDESTIN_GRID_ID1497  3.0817707  0.2174165    14.175  &lt; 2e-16 ***\nDESTIN_GRID_ID1498  2.8395623  0.2174502    13.058  &lt; 2e-16 ***\nDESTIN_GRID_ID1499  3.0862524  0.2173857    14.197  &lt; 2e-16 ***\nDESTIN_GRID_ID1500  2.8771094  0.2175683    13.224  &lt; 2e-16 ***\nDESTIN_GRID_ID1501  2.9904876  0.2174026    13.756  &lt; 2e-16 ***\nDESTIN_GRID_ID1502  2.7786577  0.2174585    12.778  &lt; 2e-16 ***\nDESTIN_GRID_ID1506 -0.1851806  0.2927434    -0.633 0.527015    \nDESTIN_GRID_ID1514 -2.9971751  0.6180091    -4.850 1.24e-06 ***\nDESTIN_GRID_ID1515  2.0593317  0.2193157     9.390  &lt; 2e-16 ***\nDESTIN_GRID_ID1516  3.7461186  0.2173390    17.236  &lt; 2e-16 ***\nDESTIN_GRID_ID1517  3.5296623  0.2174009    16.236  &lt; 2e-16 ***\nDESTIN_GRID_ID1518  2.4972904  0.2175200    11.481  &lt; 2e-16 ***\nDESTIN_GRID_ID1519  2.9283989  0.2175215    13.463  &lt; 2e-16 ***\nDESTIN_GRID_ID1520  1.5940501  0.2178389     7.318 2.53e-13 ***\nDESTIN_GRID_ID1521  0.3943943  0.2195938     1.796 0.072492 .  \nDESTIN_GRID_ID1522  3.2886344  0.2173893    15.128  &lt; 2e-16 ***\nDESTIN_GRID_ID1523  1.8419411  0.2185686     8.427  &lt; 2e-16 ***\nDESTIN_GRID_ID1524  2.1753126  0.2181215     9.973  &lt; 2e-16 ***\nDESTIN_GRID_ID1527  0.8718821  0.2204169     3.956 7.63e-05 ***\nDESTIN_GRID_ID1535  2.4257464  0.2263596    10.716  &lt; 2e-16 ***\nDESTIN_GRID_ID1536  2.3328633  0.2183126    10.686  &lt; 2e-16 ***\nDESTIN_GRID_ID1537  3.1749494  0.2174264    14.602  &lt; 2e-16 ***\nDESTIN_GRID_ID1538  3.3278556  0.2173711    15.310  &lt; 2e-16 ***\nDESTIN_GRID_ID1539  2.8878630  0.2174097    13.283  &lt; 2e-16 ***\nDESTIN_GRID_ID1540  2.7793580  0.2174277    12.783  &lt; 2e-16 ***\nDESTIN_GRID_ID1541  3.4475323  0.2175940    15.844  &lt; 2e-16 ***\nDESTIN_GRID_ID1542  1.2757625  0.2189580     5.827 5.66e-09 ***\nDESTIN_GRID_ID1543  1.6220594  0.2212976     7.330 2.31e-13 ***\nDESTIN_GRID_ID1544  2.2292403  0.2179144    10.230  &lt; 2e-16 ***\nDESTIN_GRID_ID1547 -0.2927271  0.2360109    -1.240 0.214860    \nDESTIN_GRID_ID1556  2.3742545  0.2209960    10.743  &lt; 2e-16 ***\nDESTIN_GRID_ID1557  3.2658995  0.2176231    15.007  &lt; 2e-16 ***\nDESTIN_GRID_ID1558  2.7099048  0.2186116    12.396  &lt; 2e-16 ***\nDESTIN_GRID_ID1559  3.3051238  0.2173744    15.205  &lt; 2e-16 ***\nDESTIN_GRID_ID1560  3.5182343  0.2173599    16.186  &lt; 2e-16 ***\nDESTIN_GRID_ID1561  2.7512524  0.2175529    12.646  &lt; 2e-16 ***\nDESTIN_GRID_ID1562  0.1958989  0.2204234     0.889 0.374144    \nDESTIN_GRID_ID1563  1.9815702  0.2176771     9.103  &lt; 2e-16 ***\nDESTIN_GRID_ID1564  0.7448313  0.2189276     3.402 0.000669 ***\nDESTIN_GRID_ID1565  0.8445032  0.2190778     3.855 0.000116 ***\nDESTIN_GRID_ID1566  0.6703164  0.2203061     3.043 0.002345 ** \nDESTIN_GRID_ID1567 -1.2366839  0.2617501    -4.725 2.30e-06 ***\nDESTIN_GRID_ID1568  0.1414498  0.2312435     0.612 0.540742    \nDESTIN_GRID_ID1578  1.2977422  0.2387257     5.436 5.45e-08 ***\nDESTIN_GRID_ID1580  1.7587281  0.2182960     8.057 7.84e-16 ***\nDESTIN_GRID_ID1581  0.7696940  0.2186613     3.520 0.000431 ***\nDESTIN_GRID_ID1582  3.0420235  0.2173948    13.993  &lt; 2e-16 ***\nDESTIN_GRID_ID1583  1.9205654  0.2192173     8.761  &lt; 2e-16 ***\nDESTIN_GRID_ID1584  1.8112529  0.2180024     8.308  &lt; 2e-16 ***\nDESTIN_GRID_ID1585  2.8842233  0.2175276    13.259  &lt; 2e-16 ***\nDESTIN_GRID_ID1586  0.7277889  0.2190177     3.323 0.000891 ***\nDESTIN_GRID_ID1589 -0.4680248  0.2342346    -1.998 0.045706 *  \nDESTIN_GRID_ID1590  0.0735329  0.2347426     0.313 0.754092    \nDESTIN_GRID_ID1600  3.0975689  0.2181157    14.201  &lt; 2e-16 ***\nDESTIN_GRID_ID1601  2.4820256  0.2174943    11.412  &lt; 2e-16 ***\nDESTIN_GRID_ID1602  2.7029596  0.2175070    12.427  &lt; 2e-16 ***\nDESTIN_GRID_ID1603  3.4540115  0.2173905    15.889  &lt; 2e-16 ***\nDESTIN_GRID_ID1604  1.8272782  0.2177341     8.392  &lt; 2e-16 ***\nDESTIN_GRID_ID1605  2.8581141  0.2174266    13.145  &lt; 2e-16 ***\nDESTIN_GRID_ID1606  2.7713061  0.2178073    12.724  &lt; 2e-16 ***\nDESTIN_GRID_ID1607  0.9393970  0.2185086     4.299 1.71e-05 ***\nDESTIN_GRID_ID1608  3.0766443  0.2174798    14.147  &lt; 2e-16 ***\nDESTIN_GRID_ID1609  2.9065953  0.2175840    13.358  &lt; 2e-16 ***\nDESTIN_GRID_ID1610  0.3041337  0.2347392     1.296 0.195105    \nDESTIN_GRID_ID1622  2.9414115  0.2181364    13.484  &lt; 2e-16 ***\nDESTIN_GRID_ID1623  3.3453705  0.2173661    15.390  &lt; 2e-16 ***\nDESTIN_GRID_ID1624  1.9669263  0.2177594     9.033  &lt; 2e-16 ***\nDESTIN_GRID_ID1625  3.1811349  0.2174241    14.631  &lt; 2e-16 ***\nDESTIN_GRID_ID1626  4.6327787  0.2173089    21.319  &lt; 2e-16 ***\nDESTIN_GRID_ID1627  1.7522706  0.2177303     8.048 8.42e-16 ***\nDESTIN_GRID_ID1628  3.4827300  0.2173906    16.021  &lt; 2e-16 ***\nDESTIN_GRID_ID1629  1.7599432  0.2179550     8.075 6.76e-16 ***\nDESTIN_GRID_ID1630  1.9731886  0.2178856     9.056  &lt; 2e-16 ***\nDESTIN_GRID_ID1631 -0.9870555  0.2428840    -4.064 4.83e-05 ***\nDESTIN_GRID_ID1642  0.8221913  0.2219601     3.704 0.000212 ***\nDESTIN_GRID_ID1643  2.9291432  0.2174387    13.471  &lt; 2e-16 ***\nDESTIN_GRID_ID1644  1.8190062  0.2181135     8.340  &lt; 2e-16 ***\nDESTIN_GRID_ID1645  2.4190920  0.2175656    11.119  &lt; 2e-16 ***\nDESTIN_GRID_ID1646  2.0513688  0.2179523     9.412  &lt; 2e-16 ***\nDESTIN_GRID_ID1647  2.7467368  0.2174316    12.633  &lt; 2e-16 ***\nDESTIN_GRID_ID1648  2.5381895  0.2174813    11.671  &lt; 2e-16 ***\nDESTIN_GRID_ID1649  2.7975573  0.2174473    12.865  &lt; 2e-16 ***\nDESTIN_GRID_ID1650  3.0804372  0.2175047    14.163  &lt; 2e-16 ***\nDESTIN_GRID_ID1664 -0.5358831  0.2432464    -2.203 0.027591 *  \nDESTIN_GRID_ID1665  3.3173734  0.2173736    15.261  &lt; 2e-16 ***\nDESTIN_GRID_ID1666  2.1641143  0.2175811     9.946  &lt; 2e-16 ***\nDESTIN_GRID_ID1667  1.0361955  0.2219897     4.668 3.04e-06 ***\nDESTIN_GRID_ID1668  2.7286258  0.2174616    12.548  &lt; 2e-16 ***\nDESTIN_GRID_ID1670  3.2647120  0.2173803    15.018  &lt; 2e-16 ***\nDESTIN_GRID_ID1671  3.3842313  0.2176372    15.550  &lt; 2e-16 ***\nDESTIN_GRID_ID1672  2.5852983  0.2177150    11.875  &lt; 2e-16 ***\nDESTIN_GRID_ID1684  1.8739570  0.2185197     8.576  &lt; 2e-16 ***\nDESTIN_GRID_ID1685  2.7513718  0.2174851    12.651  &lt; 2e-16 ***\nDESTIN_GRID_ID1686  2.5325764  0.2175037    11.644  &lt; 2e-16 ***\nDESTIN_GRID_ID1687  2.2943677  0.2178669    10.531  &lt; 2e-16 ***\nDESTIN_GRID_ID1688  1.6241108  0.2178795     7.454 9.04e-14 ***\nDESTIN_GRID_ID1689  1.4553659  0.2180010     6.676 2.46e-11 ***\nDESTIN_GRID_ID1690  1.6801407  0.2178704     7.712 1.24e-14 ***\nDESTIN_GRID_ID1691  2.7738852  0.2174503    12.756  &lt; 2e-16 ***\nDESTIN_GRID_ID1692  1.9732845  0.2179559     9.054  &lt; 2e-16 ***\nDESTIN_GRID_ID1706  2.5997516  0.2176118    11.947  &lt; 2e-16 ***\nDESTIN_GRID_ID1707  2.3943663  0.2175016    11.008  &lt; 2e-16 ***\nDESTIN_GRID_ID1708  2.7618122  0.2174512    12.701  &lt; 2e-16 ***\nDESTIN_GRID_ID1709  2.3064640  0.2175957    10.600  &lt; 2e-16 ***\nDESTIN_GRID_ID1710  2.8722093  0.2174679    13.208  &lt; 2e-16 ***\nDESTIN_GRID_ID1711  3.8877736  0.2173510    17.887  &lt; 2e-16 ***\nDESTIN_GRID_ID1712  3.2908208  0.2173711    15.139  &lt; 2e-16 ***\nDESTIN_GRID_ID1713  1.0652324  0.2184689     4.876 1.08e-06 ***\nDESTIN_GRID_ID1714  3.0651084  0.2174988    14.093  &lt; 2e-16 ***\nDESTIN_GRID_ID1726 -1.3299899  0.2953686    -4.503 6.71e-06 ***\nDESTIN_GRID_ID1727  2.8736587  0.2174771    13.214  &lt; 2e-16 ***\nDESTIN_GRID_ID1728  3.1561380  0.2173871    14.519  &lt; 2e-16 ***\nDESTIN_GRID_ID1729  2.3543739  0.2175451    10.822  &lt; 2e-16 ***\nDESTIN_GRID_ID1730  0.3545314  0.2208273     1.605 0.108391    \nDESTIN_GRID_ID1731  2.6614855  0.2174919    12.237  &lt; 2e-16 ***\nDESTIN_GRID_ID1732  2.9211414  0.2173989    13.437  &lt; 2e-16 ***\nDESTIN_GRID_ID1733  2.4273741  0.2174952    11.161  &lt; 2e-16 ***\nDESTIN_GRID_ID1734  3.0927536  0.2174149    14.225  &lt; 2e-16 ***\nDESTIN_GRID_ID1735  3.5331602  0.2179018    16.214  &lt; 2e-16 ***\nDESTIN_GRID_ID1748  2.0360948  0.2177693     9.350  &lt; 2e-16 ***\nDESTIN_GRID_ID1749  3.8263353  0.2173350    17.606  &lt; 2e-16 ***\nDESTIN_GRID_ID1750  2.3174187  0.2175369    10.653  &lt; 2e-16 ***\nDESTIN_GRID_ID1751  1.0809208  0.2186700     4.943 7.69e-07 ***\nDESTIN_GRID_ID1753  3.0553055  0.2174142    14.053  &lt; 2e-16 ***\nDESTIN_GRID_ID1754  4.1670054  0.2173211    19.174  &lt; 2e-16 ***\nDESTIN_GRID_ID1755  3.2309057  0.2173810    14.863  &lt; 2e-16 ***\nDESTIN_GRID_ID1756  2.4934981  0.2175113    11.464  &lt; 2e-16 ***\nDESTIN_GRID_ID1757 -0.0630561  0.2261185    -0.279 0.780350    \nDESTIN_GRID_ID1768 -0.3665908  0.2352824    -1.558 0.119212    \nDESTIN_GRID_ID1769  2.4054761  0.2175397    11.058  &lt; 2e-16 ***\nDESTIN_GRID_ID1770  2.8597814  0.2175343    13.146  &lt; 2e-16 ***\nDESTIN_GRID_ID1771  2.0160350  0.2178270     9.255  &lt; 2e-16 ***\nDESTIN_GRID_ID1772  1.4860284  0.2217670     6.701 2.07e-11 ***\nDESTIN_GRID_ID1774  2.5209170  0.2175028    11.590  &lt; 2e-16 ***\nDESTIN_GRID_ID1775  2.1975301  0.2175683    10.100  &lt; 2e-16 ***\nDESTIN_GRID_ID1776  4.1741996  0.2173279    19.207  &lt; 2e-16 ***\nDESTIN_GRID_ID1777  2.7347421  0.2175148    12.573  &lt; 2e-16 ***\nDESTIN_GRID_ID1778  2.1077926  0.2193205     9.611  &lt; 2e-16 ***\nDESTIN_GRID_ID1790  3.5929625  0.2173882    16.528  &lt; 2e-16 ***\nDESTIN_GRID_ID1791  3.2843541  0.2174270    15.106  &lt; 2e-16 ***\nDESTIN_GRID_ID1792  2.5833821  0.2177169    11.866  &lt; 2e-16 ***\nDESTIN_GRID_ID1793  1.7049062  0.2179994     7.821 5.25e-15 ***\nDESTIN_GRID_ID1794 -0.3350891  0.2600581    -1.289 0.197566    \nDESTIN_GRID_ID1795 -0.1647184  0.2251983    -0.731 0.464512    \nDESTIN_GRID_ID1796  2.9065504  0.2174583    13.366  &lt; 2e-16 ***\nDESTIN_GRID_ID1797  2.9037528  0.2174236    13.355  &lt; 2e-16 ***\nDESTIN_GRID_ID1798  2.8726710  0.2174346    13.212  &lt; 2e-16 ***\nDESTIN_GRID_ID1799  2.0006416  0.2178514     9.184  &lt; 2e-16 ***\nDESTIN_GRID_ID1800  1.9328023  0.2216032     8.722  &lt; 2e-16 ***\nDESTIN_GRID_ID1811  2.5762370  0.2175285    11.843  &lt; 2e-16 ***\nDESTIN_GRID_ID1812  3.5911827  0.2173498    16.523  &lt; 2e-16 ***\nDESTIN_GRID_ID1813  2.9637140  0.2174264    13.631  &lt; 2e-16 ***\nDESTIN_GRID_ID1817  2.4957453  0.2176117    11.469  &lt; 2e-16 ***\nDESTIN_GRID_ID1818  2.6827990  0.2174529    12.337  &lt; 2e-16 ***\nDESTIN_GRID_ID1819  4.1585790  0.2173368    19.134  &lt; 2e-16 ***\nDESTIN_GRID_ID1820  0.7036672  0.2209267     3.185 0.001447 ** \nDESTIN_GRID_ID1832  4.0952810  0.2173486    18.842  &lt; 2e-16 ***\nDESTIN_GRID_ID1833  2.2922497  0.2175682    10.536  &lt; 2e-16 ***\nDESTIN_GRID_ID1834  2.3304170  0.2175395    10.713  &lt; 2e-16 ***\nDESTIN_GRID_ID1835  1.5285109  0.2181593     7.006 2.45e-12 ***\nDESTIN_GRID_ID1837 -0.4587967  0.2516952    -1.823 0.068330 .  \nDESTIN_GRID_ID1839  2.2805079  0.2176888    10.476  &lt; 2e-16 ***\nDESTIN_GRID_ID1840  3.8857499  0.2173494    17.878  &lt; 2e-16 ***\nDESTIN_GRID_ID1841  1.5266267  0.2188810     6.975 3.07e-12 ***\nDESTIN_GRID_ID1842  3.7474432  0.2181936    17.175  &lt; 2e-16 ***\nDESTIN_GRID_ID1853  2.5888600  0.2174925    11.903  &lt; 2e-16 ***\nDESTIN_GRID_ID1854  2.8971438  0.2174414    13.324  &lt; 2e-16 ***\nDESTIN_GRID_ID1855  3.1191176  0.2174383    14.345  &lt; 2e-16 ***\nDESTIN_GRID_ID1858 -0.1222063  0.2361465    -0.518 0.604806    \nDESTIN_GRID_ID1860  3.1008014  0.2181449    14.214  &lt; 2e-16 ***\nDESTIN_GRID_ID1861  2.6268624  0.2175334    12.076  &lt; 2e-16 ***\nDESTIN_GRID_ID1874  2.9968985  0.2175217    13.777  &lt; 2e-16 ***\nDESTIN_GRID_ID1875  1.1068135  0.2189246     5.056 4.29e-07 ***\nDESTIN_GRID_ID1876  2.9889186  0.2184405    13.683  &lt; 2e-16 ***\nDESTIN_GRID_ID1877  2.7802285  0.2175024    12.783  &lt; 2e-16 ***\nDESTIN_GRID_ID1880 -0.3586792  0.2527541    -1.419 0.155875    \nDESTIN_GRID_ID1882  2.8750826  0.2174986    13.219  &lt; 2e-16 ***\nDESTIN_GRID_ID1883  2.4856318  0.2184720    11.377  &lt; 2e-16 ***\nDESTIN_GRID_ID1895  2.5734130  0.2175480    11.829  &lt; 2e-16 ***\nDESTIN_GRID_ID1896  1.9469388  0.2177214     8.942  &lt; 2e-16 ***\nDESTIN_GRID_ID1897  1.6018695  0.2180966     7.345 2.06e-13 ***\nDESTIN_GRID_ID1898 -0.7104610  0.2488775    -2.855 0.004308 ** \nDESTIN_GRID_ID1901 -0.4747179  0.2570818    -1.847 0.064810 .  \nDESTIN_GRID_ID1903  2.2607723  0.2181605    10.363  &lt; 2e-16 ***\nDESTIN_GRID_ID1916  0.1320804  0.2296033     0.575 0.565119    \nDESTIN_GRID_ID1917  2.0325570  0.2177352     9.335  &lt; 2e-16 ***\nDESTIN_GRID_ID1918  2.9730386  0.2175322    13.667  &lt; 2e-16 ***\nDESTIN_GRID_ID1919  3.2330482  0.2174308    14.869  &lt; 2e-16 ***\nDESTIN_GRID_ID1922  0.2082108  0.2326692     0.895 0.370852    \nDESTIN_GRID_ID1924  2.2359567  0.2182099    10.247  &lt; 2e-16 ***\nDESTIN_GRID_ID1937  2.5763624  0.2176079    11.839  &lt; 2e-16 ***\nDESTIN_GRID_ID1938  2.9312107  0.2174325    13.481  &lt; 2e-16 ***\nDESTIN_GRID_ID1939  3.0267304  0.2174768    13.917  &lt; 2e-16 ***\nDESTIN_GRID_ID1942  0.5597229  0.2277888     2.457 0.014002 *  \nDESTIN_GRID_ID1958 -0.6829346  0.2557733    -2.670 0.007583 ** \nDESTIN_GRID_ID1959  2.1965438  0.2177768    10.086  &lt; 2e-16 ***\nDESTIN_GRID_ID1960  4.7451219  0.2173083    21.836  &lt; 2e-16 ***\nDESTIN_GRID_ID1961  2.2332005  0.2177242    10.257  &lt; 2e-16 ***\nDESTIN_GRID_ID1962  2.8397180  0.2175102    13.056  &lt; 2e-16 ***\nDESTIN_GRID_ID1964  0.5696876  0.2355891     2.418 0.015600 *  \nDESTIN_GRID_ID1979  2.3169958  0.2177952    10.638  &lt; 2e-16 ***\nDESTIN_GRID_ID1980  0.5098229  0.2189371     2.329 0.019879 *  \nDESTIN_GRID_ID1981  2.6540436  0.2175128    12.202  &lt; 2e-16 ***\nDESTIN_GRID_ID1982  1.4346410  0.2187816     6.557 5.47e-11 ***\nDESTIN_GRID_ID1983  2.9366447  0.2174930    13.502  &lt; 2e-16 ***\nDESTIN_GRID_ID1984  1.7404258  0.2180823     7.981 1.46e-15 ***\nDESTIN_GRID_ID1985  2.2653071  0.2177798    10.402  &lt; 2e-16 ***\nDESTIN_GRID_ID2001  2.5942577  0.2175654    11.924  &lt; 2e-16 ***\nDESTIN_GRID_ID2002  3.0182397  0.2174007    13.883  &lt; 2e-16 ***\nDESTIN_GRID_ID2003  3.1590202  0.2174218    14.529  &lt; 2e-16 ***\nDESTIN_GRID_ID2004  3.4905706  0.2174076    16.055  &lt; 2e-16 ***\nDESTIN_GRID_ID2005  2.7898265  0.2175155    12.826  &lt; 2e-16 ***\nDESTIN_GRID_ID2006  3.3174518  0.2174656    15.255  &lt; 2e-16 ***\nDESTIN_GRID_ID2007  0.7337700  0.2215584     3.312 0.000927 ***\nDESTIN_GRID_ID2022  2.9571585  0.2175909    13.590  &lt; 2e-16 ***\nDESTIN_GRID_ID2023  3.3403681  0.2174000    15.365  &lt; 2e-16 ***\nDESTIN_GRID_ID2024  2.9289580  0.2174353    13.470  &lt; 2e-16 ***\nDESTIN_GRID_ID2025  2.5313564  0.2174945    11.639  &lt; 2e-16 ***\nDESTIN_GRID_ID2026  1.8245708  0.2180572     8.367  &lt; 2e-16 ***\nDESTIN_GRID_ID2027  3.3286175  0.2174444    15.308  &lt; 2e-16 ***\nDESTIN_GRID_ID2043  2.3954090  0.2177430    11.001  &lt; 2e-16 ***\nDESTIN_GRID_ID2044  2.9333472  0.2174507    13.490  &lt; 2e-16 ***\nDESTIN_GRID_ID2045  0.3168315  0.2231272     1.420 0.155620    \nDESTIN_GRID_ID2046  3.6127095  0.2173505    16.622  &lt; 2e-16 ***\nDESTIN_GRID_ID2047  2.4538416  0.2175512    11.279  &lt; 2e-16 ***\nDESTIN_GRID_ID2048  2.6804573  0.2175326    12.322  &lt; 2e-16 ***\nDESTIN_GRID_ID2049  0.7145730  0.2207808     3.237 0.001210 ** \nDESTIN_GRID_ID2064  2.8795523  0.2175239    13.238  &lt; 2e-16 ***\nDESTIN_GRID_ID2065  2.0812424  0.2177291     9.559  &lt; 2e-16 ***\nDESTIN_GRID_ID2066  0.4450830  0.2220665     2.004 0.045040 *  \nDESTIN_GRID_ID2067  4.9223089  0.2173079    22.651  &lt; 2e-16 ***\nDESTIN_GRID_ID2068  2.5831108  0.2177354    11.864  &lt; 2e-16 ***\nDESTIN_GRID_ID2069  2.8177275  0.2175662    12.951  &lt; 2e-16 ***\nDESTIN_GRID_ID2085  2.1367462  0.2178820     9.807  &lt; 2e-16 ***\nDESTIN_GRID_ID2086  3.6852526  0.2173876    16.952  &lt; 2e-16 ***\nDESTIN_GRID_ID2087  2.4932090  0.2175933    11.458  &lt; 2e-16 ***\nDESTIN_GRID_ID2088  2.7532977  0.2174439    12.662  &lt; 2e-16 ***\nDESTIN_GRID_ID2089  2.0389394  0.2177797     9.362  &lt; 2e-16 ***\nDESTIN_GRID_ID2090  4.4796552  0.2173284    20.612  &lt; 2e-16 ***\nDESTIN_GRID_ID2091  1.6181660  0.2210274     7.321 2.46e-13 ***\nDESTIN_GRID_ID2105  1.7776359  0.2354261     7.551 4.33e-14 ***\nDESTIN_GRID_ID2106  0.7170600  0.2196190     3.265 0.001095 ** \nDESTIN_GRID_ID2107  1.7275901  0.2179501     7.927 2.25e-15 ***\nDESTIN_GRID_ID2108  3.3756797  0.2174333    15.525  &lt; 2e-16 ***\nDESTIN_GRID_ID2109  2.5335178  0.2174842    11.649  &lt; 2e-16 ***\nDESTIN_GRID_ID2110  1.8252075  0.2179185     8.376  &lt; 2e-16 ***\nDESTIN_GRID_ID2111 -0.1069124  0.2283814    -0.468 0.639691    \nDESTIN_GRID_ID2128  1.7236849  0.2186394     7.884 3.18e-15 ***\nDESTIN_GRID_ID2129  1.7464509  0.2187684     7.983 1.43e-15 ***\nDESTIN_GRID_ID2130  3.2570545  0.2173984    14.982  &lt; 2e-16 ***\nDESTIN_GRID_ID2131  3.2985815  0.2174807    15.167  &lt; 2e-16 ***\nDESTIN_GRID_ID2132  3.0577002  0.2174589    14.061  &lt; 2e-16 ***\nDESTIN_GRID_ID2148  2.4821979  0.2182301    11.374  &lt; 2e-16 ***\nDESTIN_GRID_ID2149  0.8200471  0.2197837     3.731 0.000191 ***\nDESTIN_GRID_ID2150  3.1711745  0.2174797    14.581  &lt; 2e-16 ***\nDESTIN_GRID_ID2151  3.7109840  0.2173611    17.073  &lt; 2e-16 ***\nDESTIN_GRID_ID2152  3.4139629  0.2174173    15.702  &lt; 2e-16 ***\nDESTIN_GRID_ID2153  2.7342618  0.2176655    12.562  &lt; 2e-16 ***\nDESTIN_GRID_ID2171  3.0923161  0.2175102    14.217  &lt; 2e-16 ***\nDESTIN_GRID_ID2172  1.9402281  0.2179456     8.902  &lt; 2e-16 ***\nDESTIN_GRID_ID2173  2.2876092  0.2175918    10.513  &lt; 2e-16 ***\nDESTIN_GRID_ID2174  2.6365077  0.2176137    12.116  &lt; 2e-16 ***\nDESTIN_GRID_ID2191  2.5144191  0.2181091    11.528  &lt; 2e-16 ***\nDESTIN_GRID_ID2192  1.6051485  0.2186445     7.341 2.11e-13 ***\nDESTIN_GRID_ID2193  2.2087297  0.2177822    10.142  &lt; 2e-16 ***\nDESTIN_GRID_ID2194  2.9260242  0.2174927    13.453  &lt; 2e-16 ***\nDESTIN_GRID_ID2195  1.4184503  0.2230456     6.359 2.02e-10 ***\nDESTIN_GRID_ID2212  1.6772986  0.2282094     7.350 1.98e-13 ***\nDESTIN_GRID_ID2213  0.1149605  0.2276849     0.505 0.613622    \nDESTIN_GRID_ID2214  0.7787657  0.2242158     3.473 0.000514 ***\nDESTIN_GRID_ID2215  2.6245422  0.2177538    12.053  &lt; 2e-16 ***\nDESTIN_GRID_ID2216  1.3294026  0.2187987     6.076 1.23e-09 ***\nDESTIN_GRID_ID2233  1.3023845  0.2251830     5.784 7.31e-09 ***\nDESTIN_GRID_ID2234  2.7597746  0.2193741    12.580  &lt; 2e-16 ***\nDESTIN_GRID_ID2235  1.8432628  0.2190730     8.414  &lt; 2e-16 ***\nDESTIN_GRID_ID2236  0.6620808  0.2207500     2.999 0.002707 ** \nDESTIN_GRID_ID2237 -0.7608433  0.2859163    -2.661 0.007789 ** \nDESTIN_GRID_ID2256 -0.2876470  0.2421955    -1.188 0.234965    \nDESTIN_GRID_ID2257  1.1311921  0.2209838     5.119 3.07e-07 ***\nDESTIN_GRID_ID2258  0.6396245  0.2217136     2.885 0.003915 ** \nDESTIN_GRID_ID2259  0.7841007  0.2344899     3.344 0.000826 ***\nDESTIN_GRID_ID2277  0.6501535  0.2326218     2.795 0.005192 ** \nDESTIN_GRID_ID2278  0.9337766  0.2235933     4.176 2.96e-05 ***\nDESTIN_GRID_ID2279  0.8567104  0.2207766     3.880 0.000104 ***\nDESTIN_GRID_ID2280 -0.0529677  0.2323948    -0.228 0.819707    \nDESTIN_GRID_ID2297  2.1641670  0.2191967     9.873  &lt; 2e-16 ***\nDESTIN_GRID_ID2300  0.7302509  0.2272001     3.214 0.001308 ** \nDESTIN_GRID_ID2301  0.8299003  0.2203372     3.767 0.000166 ***\nDESTIN_GRID_ID2318  3.1362280  0.2178353    14.397  &lt; 2e-16 ***\nDESTIN_GRID_ID2319  4.1781610  0.2174556    19.214  &lt; 2e-16 ***\nDESTIN_GRID_ID2322  3.8692976  0.2175886    17.783  &lt; 2e-16 ***\nDESTIN_GRID_ID2337  4.5706828  0.2184380    20.924  &lt; 2e-16 ***\nDESTIN_GRID_ID2341  4.8303566  0.2174040    22.218  &lt; 2e-16 ***\nDESTIN_GRID_ID2343  2.3419470  0.2180420    10.741  &lt; 2e-16 ***\nDESTIN_GRID_ID2361  2.6508095  0.2180531    12.157  &lt; 2e-16 ***\nDESTIN_GRID_ID2364  1.5090998  0.2193208     6.881 5.95e-12 ***\nDESTIN_GRID_ID2379 -0.3938915  0.2268400    -1.736 0.082488 .  \nDESTIN_GRID_ID2384  2.1441773  0.2191407     9.784  &lt; 2e-16 ***\nDESTIN_GRID_ID2405  1.8841519  0.2191674     8.597  &lt; 2e-16 ***\nDESTIN_GRID_ID2406  0.0022812  0.2320732     0.010 0.992157    \nDESTIN_GRID_ID2426  1.3526996  0.2284600     5.921 3.20e-09 ***\nDESTIN_GRID_ID2427  1.6196841  0.2202800     7.353 1.94e-13 ***\nDESTIN_GRID_ID2505  2.5199533  0.2354703    10.702  &lt; 2e-16 ***\nlog(dist)          -1.5608598  0.0004981 -3133.742  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 27023218  on 61607  degrees of freedom\nResidual deviance:  5639321  on 59966  degrees of freedom\nAIC: 5930260\n\nNumber of Fisher Scoring iterations: 10\n\n\n\ndbcSIM$coefficients[1642]\n\nlog(dist) \n -1.56086 \n\n\n\nCalcRSquared(dbcSIM$data$MORNING_PEAK, dbcSIM$fitted.values)\n\n[1] 0.6688552\n\n\nFrom the above results, I noticed that most variables are statistically significant(p-value&lt; 0.05) for ORIGIN_GRID_IDxxx and DESTIN_GRID_IDxxx but log(dist) is statistically significant(p-value&lt; 0.05) with coefficient of -1.56. The Rsquared is the highest of all with other 3 models with 0.67.\n\n\n14.9 Model Comparisons\nI will use the compare_performance() for performance package to compare the root mean square error (RMSE) of the SIMs. The better model has lower RMSE.\nI will first create a list called model_list by containing all our fitted SIM models using the code chunk below.\n\nmodel_list &lt;- list(\n  Unconstrained = uncSIM2,\n  Origin_Constrained = orcSIM,\n  Destination_Constrained = decSIM,\n  Doubly_Constrained = dbcSIM)\n\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                    | Model |    RMSE\n-----------------------------------------\nUnconstrained           |   glm | 458.768\nOrigin_Constrained      |   glm | 365.453\nDestination_Constrained |   glm | 391.808\nDoubly_Constrained      |   glm | 302.809\n\n\nThe results above shows that doubly constrained SIM is the best model among all four SIMs as it has the smallest RMSE value of 303.\nI will visualize the actual vs predicted Weekends/Holiday Morning Peak Hourp Trips with my best model as shown below.\n\nflow_data_tidy_plot &lt;- flow_data_tidy\nflow_data_tidy_plot$dbc_predicted_value = as.numeric(dbcSIM$fitted.values)\n\n# Create a ggplot object\nggplot(flow_data_tidy_plot, aes(x = dbc_predicted_value, y = MORNING_PEAK))+\n  geom_point() +\n  geom_smooth(method=lm) +\n  labs(title = \"dbcSIM Model Visualization\",\n       x = \"Predicted\",\n       y = \"Actual Morning Peak\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#removing-the-flow-from-and-to-johor-bahru",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#removing-the-flow-from-and-to-johor-bahru",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "15 Removing the flow from and to Johor Bahru",
    "text": "15 Removing the flow from and to Johor Bahru\nIn this section, I will remove the flow from and to Johor Bahru as I do not have any data of propulsiveness and attractiveness in Johor Bahru. (grid_id = 819, 942, 984).\nNext, I will recalibrate the models.\n\nids_to_remove &lt;- as.factor(c(819,942,984))\n\nflow_data_tidy_sg &lt;- flow_data_tidy[!(flow_data_tidy$ORIGIN_GRID_ID %in% levels(ids_to_remove)), ]\nflow_data_tidy_sg &lt;- flow_data_tidy_sg[!(flow_data_tidy_sg$DESTIN_GRID_ID %in% levels(ids_to_remove)), ]\n\n\n15.1 Doubly Constrained SIM\n\ndbcSIM_sg &lt;- glm(formula = MORNING_PEAK ~                  \n                ORIGIN_GRID_ID +                 \n                DESTIN_GRID_ID +                 \n                log(dist),               \n              family = poisson(link = \"log\"),               \n              data = flow_data_tidy_sg,               \n              na.action = na.exclude) \nwrite_rds(dbcSIM_sg, \"data/rds/dbcSIM_sg.rds\")\n\n\ndbcSIM_sg &lt;- read_rds(\"data/rds/dbcSIM_sg.rds\") \nsummary(dbcSIM_sg)\n\n\nCall:\nglm(formula = MORNING_PEAK ~ ORIGIN_GRID_ID + DESTIN_GRID_ID + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy_sg, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)        10.563701   0.293596    35.980  &lt; 2e-16 ***\nORIGIN_GRID_ID46    1.920070   0.218663     8.781  &lt; 2e-16 ***\nORIGIN_GRID_ID66    1.920166   0.308743     6.219 4.99e-10 ***\nORIGIN_GRID_ID67    2.866338   0.202124    14.181  &lt; 2e-16 ***\nORIGIN_GRID_ID68    0.327641   0.249509     1.313 0.189134    \nORIGIN_GRID_ID86    0.921252   0.209611     4.395 1.11e-05 ***\nORIGIN_GRID_ID87    3.403166   0.234319    14.524  &lt; 2e-16 ***\nORIGIN_GRID_ID88    3.987668   0.199512    19.987  &lt; 2e-16 ***\nORIGIN_GRID_ID89    1.713194   0.270371     6.336 2.35e-10 ***\nORIGIN_GRID_ID90    2.632988   0.224336    11.737  &lt; 2e-16 ***\nORIGIN_GRID_ID109   1.684213   0.224964     7.487 7.07e-14 ***\nORIGIN_GRID_ID110   1.437289   0.214551     6.699 2.10e-11 ***\nORIGIN_GRID_ID111   6.494885   0.201054    32.304  &lt; 2e-16 ***\nORIGIN_GRID_ID112   0.537884   0.259220     2.075 0.037986 *  \nORIGIN_GRID_ID128   5.961495   0.203200    29.338  &lt; 2e-16 ***\nORIGIN_GRID_ID129   2.630776   0.269180     9.773  &lt; 2e-16 ***\nORIGIN_GRID_ID130   1.952291   0.212745     9.177  &lt; 2e-16 ***\nORIGIN_GRID_ID131   1.239921   0.207605     5.972 2.34e-09 ***\nORIGIN_GRID_ID132   1.552667   0.215759     7.196 6.19e-13 ***\nORIGIN_GRID_ID133   1.266730   0.209994     6.032 1.62e-09 ***\nORIGIN_GRID_ID134   2.973231   0.222466    13.365  &lt; 2e-16 ***\nORIGIN_GRID_ID150   6.200747   0.202467    30.626  &lt; 2e-16 ***\nORIGIN_GRID_ID151   2.235365   0.214775    10.408  &lt; 2e-16 ***\nORIGIN_GRID_ID152   2.656051   0.232009    11.448  &lt; 2e-16 ***\nORIGIN_GRID_ID153   3.357248   0.207479    16.181  &lt; 2e-16 ***\nORIGIN_GRID_ID154   3.463916   0.201435    17.196  &lt; 2e-16 ***\nORIGIN_GRID_ID155   0.003784   0.225790     0.017 0.986628    \nORIGIN_GRID_ID156   1.210215   0.217574     5.562 2.66e-08 ***\nORIGIN_GRID_ID172   3.139639   0.222606    14.104  &lt; 2e-16 ***\nORIGIN_GRID_ID174   1.721800   0.217092     7.931 2.17e-15 ***\nORIGIN_GRID_ID175   1.634038   0.211356     7.731 1.07e-14 ***\nORIGIN_GRID_ID176   3.194735   0.201304    15.870  &lt; 2e-16 ***\nORIGIN_GRID_ID195   2.384912   0.210180    11.347  &lt; 2e-16 ***\nORIGIN_GRID_ID196   1.674564   0.206494     8.110 5.08e-16 ***\nORIGIN_GRID_ID197   0.849409   0.263477     3.224 0.001265 ** \nORIGIN_GRID_ID215   3.014132   0.210191    14.340  &lt; 2e-16 ***\nORIGIN_GRID_ID216   3.115056   0.204634    15.223  &lt; 2e-16 ***\nORIGIN_GRID_ID217   2.724772   0.202933    13.427  &lt; 2e-16 ***\nORIGIN_GRID_ID237   2.033793   0.244415     8.321  &lt; 2e-16 ***\nORIGIN_GRID_ID238   1.288129   0.217636     5.919 3.24e-09 ***\nORIGIN_GRID_ID239   1.036406   0.253705     4.085 4.41e-05 ***\nORIGIN_GRID_ID257   3.609585   0.205900    17.531  &lt; 2e-16 ***\nORIGIN_GRID_ID258   0.813757   0.218849     3.718 0.000201 ***\nORIGIN_GRID_ID259   1.928678   0.206945     9.320  &lt; 2e-16 ***\nORIGIN_GRID_ID278   5.219093   0.203445    25.654  &lt; 2e-16 ***\nORIGIN_GRID_ID279   3.008963   0.205191    14.664  &lt; 2e-16 ***\nORIGIN_GRID_ID280   2.156284   0.205685    10.483  &lt; 2e-16 ***\nORIGIN_GRID_ID298   0.776441   0.406555     1.910 0.056158 .  \nORIGIN_GRID_ID299   2.605932   0.214045    12.175  &lt; 2e-16 ***\nORIGIN_GRID_ID300   2.079756   0.208319     9.984  &lt; 2e-16 ***\nORIGIN_GRID_ID320   3.310842   0.209496    15.804  &lt; 2e-16 ***\nORIGIN_GRID_ID321   2.425054   0.221492    10.949  &lt; 2e-16 ***\nORIGIN_GRID_ID322   1.695079   0.216505     7.829 4.91e-15 ***\nORIGIN_GRID_ID340   4.937512   0.204104    24.191  &lt; 2e-16 ***\nORIGIN_GRID_ID341   3.500849   0.206057    16.990  &lt; 2e-16 ***\nORIGIN_GRID_ID342   2.303558   0.207976    11.076  &lt; 2e-16 ***\nORIGIN_GRID_ID363   3.541490   0.205147    17.263  &lt; 2e-16 ***\nORIGIN_GRID_ID364   1.859894   0.206040     9.027  &lt; 2e-16 ***\nORIGIN_GRID_ID383   3.971504   0.203673    19.499  &lt; 2e-16 ***\nORIGIN_GRID_ID384   1.621288   0.209938     7.723 1.14e-14 ***\nORIGIN_GRID_ID385   0.075850   0.246362     0.308 0.758175    \nORIGIN_GRID_ID404   4.060204   0.206271    19.684  &lt; 2e-16 ***\nORIGIN_GRID_ID405   2.949080   0.207017    14.246  &lt; 2e-16 ***\nORIGIN_GRID_ID406   4.576509   0.200772    22.795  &lt; 2e-16 ***\nORIGIN_GRID_ID407   2.889594   0.203171    14.222  &lt; 2e-16 ***\nORIGIN_GRID_ID408   3.753088   0.201532    18.623  &lt; 2e-16 ***\nORIGIN_GRID_ID425   1.640635   0.226022     7.259 3.91e-13 ***\nORIGIN_GRID_ID426   2.198216   0.206027    10.670  &lt; 2e-16 ***\nORIGIN_GRID_ID427   1.760576   0.203354     8.658  &lt; 2e-16 ***\nORIGIN_GRID_ID428   2.740971   0.202742    13.519  &lt; 2e-16 ***\nORIGIN_GRID_ID429   2.741840   0.202958    13.509  &lt; 2e-16 ***\nORIGIN_GRID_ID446   2.663181   0.210094    12.676  &lt; 2e-16 ***\nORIGIN_GRID_ID447   1.187757   0.217483     5.461 4.72e-08 ***\nORIGIN_GRID_ID448   1.291123   0.207199     6.231 4.63e-10 ***\nORIGIN_GRID_ID449   3.492405   0.201150    17.362  &lt; 2e-16 ***\nORIGIN_GRID_ID450   2.581626   0.202064    12.776  &lt; 2e-16 ***\nORIGIN_GRID_ID468   3.119345   0.203833    15.303  &lt; 2e-16 ***\nORIGIN_GRID_ID469   1.595441   0.203656     7.834 4.73e-15 ***\nORIGIN_GRID_ID470   4.174883   0.200864    20.785  &lt; 2e-16 ***\nORIGIN_GRID_ID471   3.875055   0.201577    19.224  &lt; 2e-16 ***\nORIGIN_GRID_ID488   2.109279   0.214498     9.834  &lt; 2e-16 ***\nORIGIN_GRID_ID489  -0.532859   0.334227    -1.594 0.110869    \nORIGIN_GRID_ID490   3.011460   0.201840    14.920  &lt; 2e-16 ***\nORIGIN_GRID_ID491   2.732878   0.201286    13.577  &lt; 2e-16 ***\nORIGIN_GRID_ID493  -0.534743   0.286272    -1.868 0.061768 .  \nORIGIN_GRID_ID494   3.171880   0.203728    15.569  &lt; 2e-16 ***\nORIGIN_GRID_ID509   2.612063   0.206552    12.646  &lt; 2e-16 ***\nORIGIN_GRID_ID510   2.932013   0.202838    14.455  &lt; 2e-16 ***\nORIGIN_GRID_ID511   1.835579   0.202536     9.063  &lt; 2e-16 ***\nORIGIN_GRID_ID512   4.353301   0.200767    21.683  &lt; 2e-16 ***\nORIGIN_GRID_ID513   1.337046   0.207725     6.437 1.22e-10 ***\nORIGIN_GRID_ID514   2.464067   0.205874    11.969  &lt; 2e-16 ***\nORIGIN_GRID_ID515   1.353045   0.227741     5.941 2.83e-09 ***\nORIGIN_GRID_ID530   2.104122   0.215353     9.771  &lt; 2e-16 ***\nORIGIN_GRID_ID531   2.866790   0.203877    14.061  &lt; 2e-16 ***\nORIGIN_GRID_ID532   2.168347   0.202820    10.691  &lt; 2e-16 ***\nORIGIN_GRID_ID533   4.179935   0.200765    20.820  &lt; 2e-16 ***\nORIGIN_GRID_ID534   4.437656   0.200798    22.100  &lt; 2e-16 ***\nORIGIN_GRID_ID536   2.414633   0.205234    11.765  &lt; 2e-16 ***\nORIGIN_GRID_ID537   0.839686   0.255578     3.285 0.001018 ** \nORIGIN_GRID_ID538   0.240097   0.289839     0.828 0.407455    \nORIGIN_GRID_ID551   1.602912   0.217117     7.383 1.55e-13 ***\nORIGIN_GRID_ID552   2.006913   0.207759     9.660  &lt; 2e-16 ***\nORIGIN_GRID_ID553   1.376178   0.202586     6.793 1.10e-11 ***\nORIGIN_GRID_ID554   3.702082   0.200812    18.436  &lt; 2e-16 ***\nORIGIN_GRID_ID555   3.395488   0.201433    16.857  &lt; 2e-16 ***\nORIGIN_GRID_ID559   2.374589   0.215046    11.042  &lt; 2e-16 ***\nORIGIN_GRID_ID560   2.179521   0.220709     9.875  &lt; 2e-16 ***\nORIGIN_GRID_ID572   0.930227   0.250044     3.720 0.000199 ***\nORIGIN_GRID_ID573   2.449043   0.206517    11.859  &lt; 2e-16 ***\nORIGIN_GRID_ID574   3.028890   0.217195    13.946  &lt; 2e-16 ***\nORIGIN_GRID_ID575   5.845999   0.200688    29.130  &lt; 2e-16 ***\nORIGIN_GRID_ID576   3.601911   0.200908    17.928  &lt; 2e-16 ***\nORIGIN_GRID_ID578  -0.700894   0.286287    -2.448 0.014357 *  \nORIGIN_GRID_ID582   1.878659   0.231562     8.113 4.94e-16 ***\nORIGIN_GRID_ID583   2.087270   0.236977     8.808  &lt; 2e-16 ***\nORIGIN_GRID_ID584   3.186718   0.214036    14.889  &lt; 2e-16 ***\nORIGIN_GRID_ID593   1.181990   0.229076     5.160 2.47e-07 ***\nORIGIN_GRID_ID594   2.150110   0.206511    10.412  &lt; 2e-16 ***\nORIGIN_GRID_ID595   1.938354   0.202007     9.595  &lt; 2e-16 ***\nORIGIN_GRID_ID596   3.273762   0.200866    16.298  &lt; 2e-16 ***\nORIGIN_GRID_ID597   0.859463   0.222784     3.858 0.000114 ***\nORIGIN_GRID_ID603   1.542058   0.243218     6.340 2.29e-10 ***\nORIGIN_GRID_ID604   1.667273   0.246362     6.768 1.31e-11 ***\nORIGIN_GRID_ID615   1.042401   0.213613     4.880 1.06e-06 ***\nORIGIN_GRID_ID616   1.821217   0.204182     8.920  &lt; 2e-16 ***\nORIGIN_GRID_ID617   0.901381   0.203996     4.419 9.93e-06 ***\nORIGIN_GRID_ID618   4.134139   0.200795    20.589  &lt; 2e-16 ***\nORIGIN_GRID_ID620   0.648059   0.215116     3.013 0.002590 ** \nORIGIN_GRID_ID637   1.255326   0.205561     6.107 1.02e-09 ***\nORIGIN_GRID_ID638   3.919690   0.200799    19.521  &lt; 2e-16 ***\nORIGIN_GRID_ID657   2.744008   0.202635    13.542  &lt; 2e-16 ***\nORIGIN_GRID_ID658   3.024581   0.201209    15.032  &lt; 2e-16 ***\nORIGIN_GRID_ID659   3.302495   0.200957    16.434  &lt; 2e-16 ***\nORIGIN_GRID_ID660   4.781681   0.200737    23.821  &lt; 2e-16 ***\nORIGIN_GRID_ID662   4.970106   0.201019    24.725  &lt; 2e-16 ***\nORIGIN_GRID_ID677   3.346259   0.203225    16.466  &lt; 2e-16 ***\nORIGIN_GRID_ID678   0.859803   0.210575     4.083 4.44e-05 ***\nORIGIN_GRID_ID679   4.454319   0.200792    22.184  &lt; 2e-16 ***\nORIGIN_GRID_ID680   4.482442   0.200773    22.326  &lt; 2e-16 ***\nORIGIN_GRID_ID681   2.792304   0.201626    13.849  &lt; 2e-16 ***\nORIGIN_GRID_ID699   2.825750   0.202457    13.957  &lt; 2e-16 ***\nORIGIN_GRID_ID700   3.778720   0.200939    18.805  &lt; 2e-16 ***\nORIGIN_GRID_ID701   2.997274   0.201156    14.900  &lt; 2e-16 ***\nORIGIN_GRID_ID702   4.411907   0.200765    21.975  &lt; 2e-16 ***\nORIGIN_GRID_ID704   1.551551   0.205518     7.549 4.37e-14 ***\nORIGIN_GRID_ID722   1.754517   0.202433     8.667  &lt; 2e-16 ***\nORIGIN_GRID_ID725   1.490849   0.205672     7.249 4.21e-13 ***\nORIGIN_GRID_ID730   1.839398   0.219813     8.368  &lt; 2e-16 ***\nORIGIN_GRID_ID741   2.462617   0.203082    12.126  &lt; 2e-16 ***\nORIGIN_GRID_ID743   1.611156   0.202460     7.958 1.75e-15 ***\nORIGIN_GRID_ID744   3.893620   0.200838    19.387  &lt; 2e-16 ***\nORIGIN_GRID_ID752   3.189676   0.205370    15.531  &lt; 2e-16 ***\nORIGIN_GRID_ID761   2.969298   0.202899    14.634  &lt; 2e-16 ***\nORIGIN_GRID_ID762   3.556429   0.201177    17.678  &lt; 2e-16 ***\nORIGIN_GRID_ID763   0.906624   0.204449     4.434 9.23e-06 ***\nORIGIN_GRID_ID764   4.621023   0.200751    23.019  &lt; 2e-16 ***\nORIGIN_GRID_ID765   3.099137   0.201377    15.390  &lt; 2e-16 ***\nORIGIN_GRID_ID767   4.589513   0.200852    22.850  &lt; 2e-16 ***\nORIGIN_GRID_ID772   3.030149   0.204234    14.837  &lt; 2e-16 ***\nORIGIN_GRID_ID784   0.702544   0.205039     3.426 0.000612 ***\nORIGIN_GRID_ID785   3.472026   0.200860    17.286  &lt; 2e-16 ***\nORIGIN_GRID_ID786   2.895112   0.201065    14.399  &lt; 2e-16 ***\nORIGIN_GRID_ID787   3.450564   0.201255    17.145  &lt; 2e-16 ***\nORIGIN_GRID_ID788   3.751928   0.201044    18.662  &lt; 2e-16 ***\nORIGIN_GRID_ID789   2.415783   0.201843    11.969  &lt; 2e-16 ***\nORIGIN_GRID_ID803   1.309239   0.211178     6.200 5.66e-10 ***\nORIGIN_GRID_ID804   4.310903   0.200872    21.461  &lt; 2e-16 ***\nORIGIN_GRID_ID805   4.574353   0.200759    22.785  &lt; 2e-16 ***\nORIGIN_GRID_ID806   3.608245   0.200861    17.964  &lt; 2e-16 ***\nORIGIN_GRID_ID807   4.355740   0.200882    21.683  &lt; 2e-16 ***\nORIGIN_GRID_ID808   2.432632   0.202448    12.016  &lt; 2e-16 ***\nORIGIN_GRID_ID809   4.223608   0.200805    21.033  &lt; 2e-16 ***\nORIGIN_GRID_ID810   3.473184   0.201026    17.277  &lt; 2e-16 ***\nORIGIN_GRID_ID814   2.848679   0.204136    13.955  &lt; 2e-16 ***\nORIGIN_GRID_ID824   2.267816   0.205671    11.026  &lt; 2e-16 ***\nORIGIN_GRID_ID826   1.551546   0.202165     7.675 1.66e-14 ***\nORIGIN_GRID_ID827   3.768590   0.200838    18.764  &lt; 2e-16 ***\nORIGIN_GRID_ID828   4.013035   0.200801    19.985  &lt; 2e-16 ***\nORIGIN_GRID_ID829   3.760121   0.200930    18.714  &lt; 2e-16 ***\nORIGIN_GRID_ID830   3.527319   0.201044    17.545  &lt; 2e-16 ***\nORIGIN_GRID_ID831   5.364903   0.200736    26.726  &lt; 2e-16 ***\nORIGIN_GRID_ID832   4.715522   0.200857    23.477  &lt; 2e-16 ***\nORIGIN_GRID_ID835   1.152101   0.215536     5.345 9.03e-08 ***\nORIGIN_GRID_ID844   1.116259   0.220026     5.073 3.91e-07 ***\nORIGIN_GRID_ID846   3.590559   0.200941    17.869  &lt; 2e-16 ***\nORIGIN_GRID_ID847   3.558329   0.200923    17.710  &lt; 2e-16 ***\nORIGIN_GRID_ID848   3.400964   0.200906    16.928  &lt; 2e-16 ***\nORIGIN_GRID_ID849   2.488234   0.201274    12.362  &lt; 2e-16 ***\nORIGIN_GRID_ID850   3.841730   0.200872    19.125  &lt; 2e-16 ***\nORIGIN_GRID_ID851   3.918855   0.200832    19.513  &lt; 2e-16 ***\nORIGIN_GRID_ID852   3.374078   0.201017    16.785  &lt; 2e-16 ***\nORIGIN_GRID_ID853   5.197150   0.200872    25.873  &lt; 2e-16 ***\nORIGIN_GRID_ID854   1.780215   0.210666     8.450  &lt; 2e-16 ***\nORIGIN_GRID_ID855   0.989249   0.217604     4.546 5.47e-06 ***\nORIGIN_GRID_ID856   3.054717   0.203399    15.018  &lt; 2e-16 ***\nORIGIN_GRID_ID866   2.910102   0.202936    14.340  &lt; 2e-16 ***\nORIGIN_GRID_ID867   2.656640   0.201501    13.184  &lt; 2e-16 ***\nORIGIN_GRID_ID868   2.769032   0.201392    13.749  &lt; 2e-16 ***\nORIGIN_GRID_ID869   3.937618   0.201126    19.578  &lt; 2e-16 ***\nORIGIN_GRID_ID870   4.798575   0.200741    23.904  &lt; 2e-16 ***\nORIGIN_GRID_ID871   4.673770   0.200881    23.266  &lt; 2e-16 ***\nORIGIN_GRID_ID872   2.041861   0.201860    10.115  &lt; 2e-16 ***\nORIGIN_GRID_ID873   2.444319   0.201470    12.132  &lt; 2e-16 ***\nORIGIN_GRID_ID874   2.298458   0.201533    11.405  &lt; 2e-16 ***\nORIGIN_GRID_ID875   1.311760   0.223216     5.877 4.19e-09 ***\nORIGIN_GRID_ID876   0.495542   0.216914     2.285 0.022341 *  \nORIGIN_GRID_ID877   2.922516   0.202855    14.407  &lt; 2e-16 ***\nORIGIN_GRID_ID887   2.308667   0.202034    11.427  &lt; 2e-16 ***\nORIGIN_GRID_ID888   2.832555   0.201256    14.074  &lt; 2e-16 ***\nORIGIN_GRID_ID889   0.701121   0.207677     3.376 0.000735 ***\nORIGIN_GRID_ID890   4.108861   0.200807    20.462  &lt; 2e-16 ***\nORIGIN_GRID_ID891   2.703984   0.201897    13.393  &lt; 2e-16 ***\nORIGIN_GRID_ID893   4.067116   0.200805    20.254  &lt; 2e-16 ***\nORIGIN_GRID_ID894   1.770864   0.202292     8.754  &lt; 2e-16 ***\nORIGIN_GRID_ID895   2.189446   0.202637    10.805  &lt; 2e-16 ***\nORIGIN_GRID_ID896   0.844778   0.209778     4.027 5.65e-05 ***\nORIGIN_GRID_ID897   0.303290   0.211717     1.433 0.151992    \nORIGIN_GRID_ID898   2.254591   0.204864    11.005  &lt; 2e-16 ***\nORIGIN_GRID_ID908   3.201852   0.202461    15.815  &lt; 2e-16 ***\nORIGIN_GRID_ID909   3.180087   0.200957    15.825  &lt; 2e-16 ***\nORIGIN_GRID_ID910   0.340367   0.208729     1.631 0.102960    \nORIGIN_GRID_ID911   3.292994   0.201077    16.377  &lt; 2e-16 ***\nORIGIN_GRID_ID912   4.008323   0.200826    19.959  &lt; 2e-16 ***\nORIGIN_GRID_ID915   3.698251   0.200864    18.412  &lt; 2e-16 ***\nORIGIN_GRID_ID917   4.084933   0.201011    20.322  &lt; 2e-16 ***\nORIGIN_GRID_ID918   1.101847   0.205563     5.360 8.32e-08 ***\nORIGIN_GRID_ID919   2.049900   0.202426    10.127  &lt; 2e-16 ***\nORIGIN_GRID_ID928   2.502168   0.201972    12.389  &lt; 2e-16 ***\nORIGIN_GRID_ID929   3.479352   0.200892    17.319  &lt; 2e-16 ***\nORIGIN_GRID_ID930   4.620719   0.200745    23.018  &lt; 2e-16 ***\nORIGIN_GRID_ID931   1.123790   0.205011     5.482 4.21e-08 ***\nORIGIN_GRID_ID932   1.743347   0.205123     8.499  &lt; 2e-16 ***\nORIGIN_GRID_ID933   3.533230   0.201036    17.575  &lt; 2e-16 ***\nORIGIN_GRID_ID934   0.652006   0.205949     3.166 0.001546 ** \nORIGIN_GRID_ID935   5.346773   0.200728    26.637  &lt; 2e-16 ***\nORIGIN_GRID_ID938   0.122820   0.271493     0.452 0.650989    \nORIGIN_GRID_ID939   5.144208   0.200813    25.617  &lt; 2e-16 ***\nORIGIN_GRID_ID940   0.483206   0.235049     2.056 0.039805 *  \nORIGIN_GRID_ID949   2.703336   0.201614    13.408  &lt; 2e-16 ***\nORIGIN_GRID_ID950   4.618563   0.200807    23.000  &lt; 2e-16 ***\nORIGIN_GRID_ID951   5.006010   0.200734    24.939  &lt; 2e-16 ***\nORIGIN_GRID_ID952   1.969034   0.203109     9.694  &lt; 2e-16 ***\nORIGIN_GRID_ID953   2.892243   0.201563    14.349  &lt; 2e-16 ***\nORIGIN_GRID_ID954   1.347099   0.203375     6.624 3.50e-11 ***\nORIGIN_GRID_ID955   3.969705   0.200885    19.761  &lt; 2e-16 ***\nORIGIN_GRID_ID956   1.727555   0.202008     8.552  &lt; 2e-16 ***\nORIGIN_GRID_ID957   3.780772   0.200930    18.816  &lt; 2e-16 ***\nORIGIN_GRID_ID959   1.762459   0.212189     8.306  &lt; 2e-16 ***\nORIGIN_GRID_ID961   0.667891   0.205650     3.248 0.001163 ** \nORIGIN_GRID_ID970   3.094056   0.201090    15.386  &lt; 2e-16 ***\nORIGIN_GRID_ID971   3.807367   0.200811    18.960  &lt; 2e-16 ***\nORIGIN_GRID_ID972   3.537011   0.200880    17.608  &lt; 2e-16 ***\nORIGIN_GRID_ID974   3.063720   0.201192    15.228  &lt; 2e-16 ***\nORIGIN_GRID_ID975   2.400965   0.201640    11.907  &lt; 2e-16 ***\nORIGIN_GRID_ID976   2.302625   0.201635    11.420  &lt; 2e-16 ***\nORIGIN_GRID_ID977   4.080262   0.200813    20.319  &lt; 2e-16 ***\nORIGIN_GRID_ID978   3.725375   0.201135    18.522  &lt; 2e-16 ***\nORIGIN_GRID_ID982   0.978301   0.203494     4.808 1.53e-06 ***\nORIGIN_GRID_ID983   5.677083   0.200847    28.266  &lt; 2e-16 ***\nORIGIN_GRID_ID991   3.337709   0.201115    16.596  &lt; 2e-16 ***\nORIGIN_GRID_ID992   3.434327   0.200987    17.087  &lt; 2e-16 ***\nORIGIN_GRID_ID993   2.419955   0.201239    12.025  &lt; 2e-16 ***\nORIGIN_GRID_ID994   2.338692   0.201524    11.605  &lt; 2e-16 ***\nORIGIN_GRID_ID995   4.045937   0.200852    20.144  &lt; 2e-16 ***\nORIGIN_GRID_ID996   2.898338   0.201266    14.401  &lt; 2e-16 ***\nORIGIN_GRID_ID997   1.811353   0.205424     8.818  &lt; 2e-16 ***\nORIGIN_GRID_ID998   4.316033   0.200826    21.491  &lt; 2e-16 ***\nORIGIN_GRID_ID999   4.049045   0.200945    20.150  &lt; 2e-16 ***\nORIGIN_GRID_ID1001  1.911748   0.206480     9.259  &lt; 2e-16 ***\nORIGIN_GRID_ID1003  4.377955   0.200818    21.801  &lt; 2e-16 ***\nORIGIN_GRID_ID1004  4.376165   0.200833    21.790  &lt; 2e-16 ***\nORIGIN_GRID_ID1011  1.863807   0.204040     9.135  &lt; 2e-16 ***\nORIGIN_GRID_ID1012  2.830250   0.202110    14.004  &lt; 2e-16 ***\nORIGIN_GRID_ID1013  2.396211   0.201652    11.883  &lt; 2e-16 ***\nORIGIN_GRID_ID1014  2.444385   0.201512    12.130  &lt; 2e-16 ***\nORIGIN_GRID_ID1015  1.727883   0.202401     8.537  &lt; 2e-16 ***\nORIGIN_GRID_ID1016  3.995207   0.200875    19.889  &lt; 2e-16 ***\nORIGIN_GRID_ID1018  3.009505   0.201689    14.922  &lt; 2e-16 ***\nORIGIN_GRID_ID1019  4.740413   0.200850    23.602  &lt; 2e-16 ***\nORIGIN_GRID_ID1023  2.863366   0.201610    14.202  &lt; 2e-16 ***\nORIGIN_GRID_ID1024  3.966331   0.200895    19.743  &lt; 2e-16 ***\nORIGIN_GRID_ID1025  1.128291   0.209035     5.398 6.75e-08 ***\nORIGIN_GRID_ID1033  2.817334   0.201417    13.988  &lt; 2e-16 ***\nORIGIN_GRID_ID1034  3.343840   0.201034    16.633  &lt; 2e-16 ***\nORIGIN_GRID_ID1035  3.533162   0.200963    17.581  &lt; 2e-16 ***\nORIGIN_GRID_ID1036  3.595494   0.200966    17.891  &lt; 2e-16 ***\nORIGIN_GRID_ID1037  3.471366   0.200922    17.277  &lt; 2e-16 ***\nORIGIN_GRID_ID1043  3.595785   0.201875    17.812  &lt; 2e-16 ***\nORIGIN_GRID_ID1045  4.018624   0.200839    20.009  &lt; 2e-16 ***\nORIGIN_GRID_ID1046  3.977087   0.200924    19.794  &lt; 2e-16 ***\nORIGIN_GRID_ID1053  3.389738   0.201124    16.854  &lt; 2e-16 ***\nORIGIN_GRID_ID1054  2.571526   0.201481    12.763  &lt; 2e-16 ***\nORIGIN_GRID_ID1055  3.776587   0.200906    18.798  &lt; 2e-16 ***\nORIGIN_GRID_ID1056  2.885384   0.201270    14.336  &lt; 2e-16 ***\nORIGIN_GRID_ID1064  1.128330   0.269416     4.188 2.81e-05 ***\nORIGIN_GRID_ID1066  4.073487   0.200831    20.283  &lt; 2e-16 ***\nORIGIN_GRID_ID1067 -0.649224   0.264049    -2.459 0.013943 *  \nORIGIN_GRID_ID1074  3.296879   0.201170    16.389  &lt; 2e-16 ***\nORIGIN_GRID_ID1075  1.428480   0.203768     7.010 2.38e-12 ***\nORIGIN_GRID_ID1076  2.683152   0.201249    13.332  &lt; 2e-16 ***\nORIGIN_GRID_ID1077  2.544610   0.201562    12.624  &lt; 2e-16 ***\nORIGIN_GRID_ID1079  3.586317   0.200959    17.846  &lt; 2e-16 ***\nORIGIN_GRID_ID1085 -0.003586   0.226537    -0.016 0.987370    \nORIGIN_GRID_ID1087  3.001654   0.201062    14.929  &lt; 2e-16 ***\nORIGIN_GRID_ID1088  1.753853   0.202047     8.680  &lt; 2e-16 ***\nORIGIN_GRID_ID1094  1.034874   0.217037     4.768 1.86e-06 ***\nORIGIN_GRID_ID1095  1.586286   0.207776     7.635 2.26e-14 ***\nORIGIN_GRID_ID1096  2.277477   0.207172    10.993  &lt; 2e-16 ***\nORIGIN_GRID_ID1097  4.282154   0.200799    21.326  &lt; 2e-16 ***\nORIGIN_GRID_ID1098  1.877510   0.203170     9.241  &lt; 2e-16 ***\nORIGIN_GRID_ID1099  3.339261   0.201018    16.612  &lt; 2e-16 ***\nORIGIN_GRID_ID1105  4.663419   0.201697    23.121  &lt; 2e-16 ***\nORIGIN_GRID_ID1106 -0.140596   0.249231    -0.564 0.572673    \nORIGIN_GRID_ID1107  1.783932   0.204318     8.731  &lt; 2e-16 ***\nORIGIN_GRID_ID1108  5.748131   0.200739    28.635  &lt; 2e-16 ***\nORIGIN_GRID_ID1109  1.205677   0.206085     5.850 4.90e-09 ***\nORIGIN_GRID_ID1116  2.492596   0.201657    12.361  &lt; 2e-16 ***\nORIGIN_GRID_ID1117  2.326362   0.202086    11.512  &lt; 2e-16 ***\nORIGIN_GRID_ID1118  1.548970   0.203865     7.598 3.01e-14 ***\nORIGIN_GRID_ID1119  3.083149   0.201135    15.329  &lt; 2e-16 ***\nORIGIN_GRID_ID1120  2.470297   0.202052    12.226  &lt; 2e-16 ***\nORIGIN_GRID_ID1129  3.648215   0.200928    18.157  &lt; 2e-16 ***\nORIGIN_GRID_ID1130  3.720444   0.200872    18.521  &lt; 2e-16 ***\nORIGIN_GRID_ID1131  3.375911   0.201723    16.735  &lt; 2e-16 ***\nORIGIN_GRID_ID1136  2.245324   0.201971    11.117  &lt; 2e-16 ***\nORIGIN_GRID_ID1138  1.465439   0.204963     7.150 8.69e-13 ***\nORIGIN_GRID_ID1139  3.657184   0.200878    18.206  &lt; 2e-16 ***\nORIGIN_GRID_ID1141  3.297340   0.201052    16.400  &lt; 2e-16 ***\nORIGIN_GRID_ID1148  1.417082   0.211765     6.692 2.20e-11 ***\nORIGIN_GRID_ID1149  2.499491   0.202022    12.372  &lt; 2e-16 ***\nORIGIN_GRID_ID1150  3.754423   0.200848    18.693  &lt; 2e-16 ***\nORIGIN_GRID_ID1151  3.197872   0.201151    15.898  &lt; 2e-16 ***\nORIGIN_GRID_ID1158  2.250044   0.201738    11.153  &lt; 2e-16 ***\nORIGIN_GRID_ID1159  3.205485   0.200970    15.950  &lt; 2e-16 ***\nORIGIN_GRID_ID1160  4.143610   0.200803    20.635  &lt; 2e-16 ***\nORIGIN_GRID_ID1171  4.348061   0.200870    21.646  &lt; 2e-16 ***\nORIGIN_GRID_ID1172  4.529457   0.200821    22.555  &lt; 2e-16 ***\nORIGIN_GRID_ID1173  2.600586   0.202023    12.873  &lt; 2e-16 ***\nORIGIN_GRID_ID1174  0.614292   0.320862     1.915 0.055555 .  \nORIGIN_GRID_ID1178  2.985711   0.201131    14.845  &lt; 2e-16 ***\nORIGIN_GRID_ID1179  3.426114   0.200927    17.052  &lt; 2e-16 ***\nORIGIN_GRID_ID1180  4.025819   0.200807    20.048  &lt; 2e-16 ***\nORIGIN_GRID_ID1181  3.034180   0.201030    15.093  &lt; 2e-16 ***\nORIGIN_GRID_ID1183  2.480112   0.201642    12.300  &lt; 2e-16 ***\nORIGIN_GRID_ID1190  1.313002   0.213091     6.162 7.20e-10 ***\nORIGIN_GRID_ID1192  3.659719   0.200970    18.210  &lt; 2e-16 ***\nORIGIN_GRID_ID1193  3.577099   0.201019    17.795  &lt; 2e-16 ***\nORIGIN_GRID_ID1194  2.783074   0.202226    13.762  &lt; 2e-16 ***\nORIGIN_GRID_ID1200  2.810443   0.201175    13.970  &lt; 2e-16 ***\nORIGIN_GRID_ID1201  3.377213   0.200930    16.808  &lt; 2e-16 ***\nORIGIN_GRID_ID1203  3.634050   0.200940    18.085  &lt; 2e-16 ***\nORIGIN_GRID_ID1204  2.585774   0.201453    12.836  &lt; 2e-16 ***\nORIGIN_GRID_ID1211  3.032709   0.206153    14.711  &lt; 2e-16 ***\nORIGIN_GRID_ID1214  3.986596   0.200903    19.843  &lt; 2e-16 ***\nORIGIN_GRID_ID1215  1.509730   0.208648     7.236 4.63e-13 ***\nORIGIN_GRID_ID1216  2.276533   0.204743    11.119  &lt; 2e-16 ***\nORIGIN_GRID_ID1220  3.692941   0.200878    18.384  &lt; 2e-16 ***\nORIGIN_GRID_ID1221  3.530716   0.200860    17.578  &lt; 2e-16 ***\nORIGIN_GRID_ID1222  3.094195   0.201521    15.354  &lt; 2e-16 ***\nORIGIN_GRID_ID1223  2.436465   0.201538    12.089  &lt; 2e-16 ***\nORIGIN_GRID_ID1224  2.748992   0.201298    13.656  &lt; 2e-16 ***\nORIGIN_GRID_ID1231  1.546494   0.211465     7.313 2.61e-13 ***\nORIGIN_GRID_ID1232  2.469549   0.208969    11.818  &lt; 2e-16 ***\nORIGIN_GRID_ID1235  1.944798   0.202246     9.616  &lt; 2e-16 ***\nORIGIN_GRID_ID1236  3.151501   0.201739    15.622  &lt; 2e-16 ***\nORIGIN_GRID_ID1241  2.474768   0.201272    12.296  &lt; 2e-16 ***\nORIGIN_GRID_ID1242  2.809647   0.201088    13.972  &lt; 2e-16 ***\nORIGIN_GRID_ID1243  3.601776   0.200857    17.932  &lt; 2e-16 ***\nORIGIN_GRID_ID1246  3.351991   0.201008    16.676  &lt; 2e-16 ***\nORIGIN_GRID_ID1256  2.801205   0.201376    13.910  &lt; 2e-16 ***\nORIGIN_GRID_ID1257  4.000140   0.201026    19.899  &lt; 2e-16 ***\nORIGIN_GRID_ID1258  3.283334   0.201712    16.277  &lt; 2e-16 ***\nORIGIN_GRID_ID1262  2.177631   0.201439    10.810  &lt; 2e-16 ***\nORIGIN_GRID_ID1263  3.804904   0.200806    18.948  &lt; 2e-16 ***\nORIGIN_GRID_ID1264  2.668274   0.201321    13.254  &lt; 2e-16 ***\nORIGIN_GRID_ID1265  2.748832   0.201314    13.654  &lt; 2e-16 ***\nORIGIN_GRID_ID1266  3.157489   0.201160    15.696  &lt; 2e-16 ***\nORIGIN_GRID_ID1267  2.682147   0.202119    13.270  &lt; 2e-16 ***\nORIGIN_GRID_ID1272  0.041414   0.228818     0.181 0.856374    \nORIGIN_GRID_ID1273  2.845194   0.201838    14.096  &lt; 2e-16 ***\nORIGIN_GRID_ID1277  4.240653   0.200871    21.111  &lt; 2e-16 ***\nORIGIN_GRID_ID1278  2.772115   0.201711    13.743  &lt; 2e-16 ***\nORIGIN_GRID_ID1283  4.678272   0.200774    23.301  &lt; 2e-16 ***\nORIGIN_GRID_ID1284  3.561677   0.200859    17.732  &lt; 2e-16 ***\nORIGIN_GRID_ID1285  4.239596   0.200784    21.115  &lt; 2e-16 ***\nORIGIN_GRID_ID1286  2.770589   0.201316    13.762  &lt; 2e-16 ***\nORIGIN_GRID_ID1289  1.895509   0.204641     9.263  &lt; 2e-16 ***\nORIGIN_GRID_ID1293  1.290384   0.214437     6.018 1.77e-09 ***\nORIGIN_GRID_ID1294  3.965507   0.201170    19.712  &lt; 2e-16 ***\nORIGIN_GRID_ID1295  2.538581   0.202350    12.545  &lt; 2e-16 ***\nORIGIN_GRID_ID1298  2.911451   0.201234    14.468  &lt; 2e-16 ***\nORIGIN_GRID_ID1299  3.758335   0.201091    18.690  &lt; 2e-16 ***\nORIGIN_GRID_ID1304  3.822799   0.200835    19.034  &lt; 2e-16 ***\nORIGIN_GRID_ID1305  3.607170   0.200817    17.962  &lt; 2e-16 ***\nORIGIN_GRID_ID1307  1.062269   0.204568     5.193 2.07e-07 ***\nORIGIN_GRID_ID1308  3.358097   0.200986    16.708  &lt; 2e-16 ***\nORIGIN_GRID_ID1310  0.511621   0.229758     2.227 0.025962 *  \nORIGIN_GRID_ID1316  1.124059   0.206352     5.447 5.11e-08 ***\nORIGIN_GRID_ID1317  1.973120   0.202211     9.758  &lt; 2e-16 ***\nORIGIN_GRID_ID1318  1.096293   0.204308     5.366 8.06e-08 ***\nORIGIN_GRID_ID1319  4.621328   0.200826    23.012  &lt; 2e-16 ***\nORIGIN_GRID_ID1320  3.231269   0.201538    16.033  &lt; 2e-16 ***\nORIGIN_GRID_ID1325  1.511545   0.202188     7.476 7.66e-14 ***\nORIGIN_GRID_ID1326  3.523739   0.200848    17.544  &lt; 2e-16 ***\nORIGIN_GRID_ID1327  3.441934   0.200858    17.136  &lt; 2e-16 ***\nORIGIN_GRID_ID1328  2.786472   0.201045    13.860  &lt; 2e-16 ***\nORIGIN_GRID_ID1329  3.095372   0.201247    15.381  &lt; 2e-16 ***\nORIGIN_GRID_ID1330  2.792932   0.201565    13.856  &lt; 2e-16 ***\nORIGIN_GRID_ID1331 -0.058683   0.273466    -0.215 0.830087    \nORIGIN_GRID_ID1333  2.569335   0.201820    12.731  &lt; 2e-16 ***\nORIGIN_GRID_ID1334  2.924932   0.201618    14.507  &lt; 2e-16 ***\nORIGIN_GRID_ID1335  3.029507   0.201653    15.023  &lt; 2e-16 ***\nORIGIN_GRID_ID1336  0.705797   0.230469     3.062 0.002195 ** \nORIGIN_GRID_ID1337  0.449267   0.210640     2.133 0.032935 *  \nORIGIN_GRID_ID1338 -0.275062   0.217795    -1.263 0.206610    \nORIGIN_GRID_ID1339  4.830807   0.200785    24.060  &lt; 2e-16 ***\nORIGIN_GRID_ID1340  3.592261   0.201041    17.868  &lt; 2e-16 ***\nORIGIN_GRID_ID1341 -1.883624   0.735050    -2.563 0.010390 *  \nORIGIN_GRID_ID1346  3.544281   0.200960    17.637  &lt; 2e-16 ***\nORIGIN_GRID_ID1347  4.562273   0.200762    22.725  &lt; 2e-16 ***\nORIGIN_GRID_ID1348  3.342539   0.200861    16.641  &lt; 2e-16 ***\nORIGIN_GRID_ID1349  3.761202   0.200841    18.727  &lt; 2e-16 ***\nORIGIN_GRID_ID1350  2.451132   0.201884    12.141  &lt; 2e-16 ***\nORIGIN_GRID_ID1353  2.985933   0.201193    14.841  &lt; 2e-16 ***\nORIGIN_GRID_ID1354  2.182178   0.202066    10.799  &lt; 2e-16 ***\nORIGIN_GRID_ID1355  3.155038   0.201261    15.676  &lt; 2e-16 ***\nORIGIN_GRID_ID1357  1.345471   0.205836     6.537 6.29e-11 ***\nORIGIN_GRID_ID1358  3.287597   0.201121    16.346  &lt; 2e-16 ***\nORIGIN_GRID_ID1359  3.372024   0.200975    16.778  &lt; 2e-16 ***\nORIGIN_GRID_ID1360  3.236554   0.201028    16.100  &lt; 2e-16 ***\nORIGIN_GRID_ID1361  4.227125   0.200913    21.040  &lt; 2e-16 ***\nORIGIN_GRID_ID1362  0.914584   0.218176     4.192 2.77e-05 ***\nORIGIN_GRID_ID1368  2.548975   0.201118    12.674  &lt; 2e-16 ***\nORIGIN_GRID_ID1369  2.108182   0.201256    10.475  &lt; 2e-16 ***\nORIGIN_GRID_ID1370  4.247267   0.200760    21.156  &lt; 2e-16 ***\nORIGIN_GRID_ID1371  2.742516   0.201330    13.622  &lt; 2e-16 ***\nORIGIN_GRID_ID1372  1.428398   0.202941     7.038 1.94e-12 ***\nORIGIN_GRID_ID1373  0.774690   0.209032     3.706 0.000210 ***\nORIGIN_GRID_ID1374  2.178583   0.201650    10.804  &lt; 2e-16 ***\nORIGIN_GRID_ID1375  3.403303   0.201223    16.913  &lt; 2e-16 ***\nORIGIN_GRID_ID1376  2.596830   0.202088    12.850  &lt; 2e-16 ***\nORIGIN_GRID_ID1379  0.714957   0.210280     3.400 0.000674 ***\nORIGIN_GRID_ID1380  4.740520   0.200779    23.611  &lt; 2e-16 ***\nORIGIN_GRID_ID1381  4.599932   0.200801    22.908  &lt; 2e-16 ***\nORIGIN_GRID_ID1382  3.775258   0.201022    18.780  &lt; 2e-16 ***\nORIGIN_GRID_ID1383  1.243900   0.205266     6.060 1.36e-09 ***\nORIGIN_GRID_ID1388  2.968417   0.201008    14.768  &lt; 2e-16 ***\nORIGIN_GRID_ID1389  2.497907   0.201078    12.423  &lt; 2e-16 ***\nORIGIN_GRID_ID1390  2.983480   0.200918    14.849  &lt; 2e-16 ***\nORIGIN_GRID_ID1391  2.909435   0.200999    14.475  &lt; 2e-16 ***\nORIGIN_GRID_ID1392  2.632792   0.201832    13.044  &lt; 2e-16 ***\nORIGIN_GRID_ID1393  1.275922   0.202848     6.290 3.17e-10 ***\nORIGIN_GRID_ID1394  3.331846   0.200956    16.580  &lt; 2e-16 ***\nORIGIN_GRID_ID1395  3.332981   0.200956    16.586  &lt; 2e-16 ***\nORIGIN_GRID_ID1396  3.910177   0.200882    19.465  &lt; 2e-16 ***\nORIGIN_GRID_ID1397  3.617057   0.201020    17.993  &lt; 2e-16 ***\nORIGIN_GRID_ID1398  2.738891   0.202016    13.558  &lt; 2e-16 ***\nORIGIN_GRID_ID1400  2.965819   0.201370    14.728  &lt; 2e-16 ***\nORIGIN_GRID_ID1401  3.995759   0.200833    19.896  &lt; 2e-16 ***\nORIGIN_GRID_ID1402  4.106543   0.200864    20.444  &lt; 2e-16 ***\nORIGIN_GRID_ID1404  4.301896   0.201890    21.308  &lt; 2e-16 ***\nORIGIN_GRID_ID1410  2.745743   0.201002    13.660  &lt; 2e-16 ***\nORIGIN_GRID_ID1411  2.642278   0.201044    13.143  &lt; 2e-16 ***\nORIGIN_GRID_ID1412  3.974488   0.200772    19.796  &lt; 2e-16 ***\nORIGIN_GRID_ID1413  3.652160   0.200841    18.184  &lt; 2e-16 ***\nORIGIN_GRID_ID1414  2.882700   0.201000    14.342  &lt; 2e-16 ***\nORIGIN_GRID_ID1415  2.578323   0.201207    12.814  &lt; 2e-16 ***\nORIGIN_GRID_ID1416  2.659550   0.201177    13.220  &lt; 2e-16 ***\nORIGIN_GRID_ID1417  3.160225   0.200963    15.725  &lt; 2e-16 ***\nORIGIN_GRID_ID1418  3.688024   0.200894    18.358  &lt; 2e-16 ***\nORIGIN_GRID_ID1419  3.118483   0.201163    15.502  &lt; 2e-16 ***\nORIGIN_GRID_ID1422  3.735850   0.201007    18.586  &lt; 2e-16 ***\nORIGIN_GRID_ID1423  4.669421   0.200831    23.251  &lt; 2e-16 ***\nORIGIN_GRID_ID1430  3.440390   0.200925    17.123  &lt; 2e-16 ***\nORIGIN_GRID_ID1431  4.649363   0.200745    23.161  &lt; 2e-16 ***\nORIGIN_GRID_ID1432  3.668689   0.200794    18.271  &lt; 2e-16 ***\nORIGIN_GRID_ID1433  2.021039   0.202117     9.999  &lt; 2e-16 ***\nORIGIN_GRID_ID1434  3.942837   0.200814    19.634  &lt; 2e-16 ***\nORIGIN_GRID_ID1435  3.435677   0.200857    17.105  &lt; 2e-16 ***\nORIGIN_GRID_ID1436  1.191392   0.203410     5.857 4.71e-09 ***\nORIGIN_GRID_ID1437  3.846639   0.200839    19.153  &lt; 2e-16 ***\nORIGIN_GRID_ID1438  4.034113   0.200794    20.091  &lt; 2e-16 ***\nORIGIN_GRID_ID1439  4.218384   0.200816    21.006  &lt; 2e-16 ***\nORIGIN_GRID_ID1440  1.815739   0.203259     8.933  &lt; 2e-16 ***\nORIGIN_GRID_ID1442  3.254074   0.201318    16.164  &lt; 2e-16 ***\nORIGIN_GRID_ID1443  4.518701   0.200861    22.497  &lt; 2e-16 ***\nORIGIN_GRID_ID1444  4.064613   0.201126    20.209  &lt; 2e-16 ***\nORIGIN_GRID_ID1452  3.273383   0.200890    16.294  &lt; 2e-16 ***\nORIGIN_GRID_ID1453  3.155075   0.200866    15.707  &lt; 2e-16 ***\nORIGIN_GRID_ID1454  2.661547   0.201308    13.221  &lt; 2e-16 ***\nORIGIN_GRID_ID1455  2.815880   0.201136    14.000  &lt; 2e-16 ***\nORIGIN_GRID_ID1456  3.651559   0.200855    18.180  &lt; 2e-16 ***\nORIGIN_GRID_ID1457  3.775644   0.200832    18.800  &lt; 2e-16 ***\nORIGIN_GRID_ID1458  4.676697   0.200758    23.295  &lt; 2e-16 ***\nORIGIN_GRID_ID1459  3.410560   0.200880    16.978  &lt; 2e-16 ***\nORIGIN_GRID_ID1460  3.366526   0.200905    16.757  &lt; 2e-16 ***\nORIGIN_GRID_ID1461  2.354361   0.202066    11.651  &lt; 2e-16 ***\nORIGIN_GRID_ID1464  4.597682   0.200870    22.889  &lt; 2e-16 ***\nORIGIN_GRID_ID1465  4.252461   0.200993    21.157  &lt; 2e-16 ***\nORIGIN_GRID_ID1472  1.658857   0.202360     8.198 2.45e-16 ***\nORIGIN_GRID_ID1473  2.520009   0.201098    12.531  &lt; 2e-16 ***\nORIGIN_GRID_ID1474  3.914674   0.200768    19.499  &lt; 2e-16 ***\nORIGIN_GRID_ID1475  4.494213   0.200758    22.386  &lt; 2e-16 ***\nORIGIN_GRID_ID1476  3.202442   0.200964    15.935  &lt; 2e-16 ***\nORIGIN_GRID_ID1477  4.973920   0.200730    24.779  &lt; 2e-16 ***\nORIGIN_GRID_ID1478  2.663100   0.201069    13.245  &lt; 2e-16 ***\nORIGIN_GRID_ID1479  2.898185   0.200995    14.419  &lt; 2e-16 ***\nORIGIN_GRID_ID1480  5.068683   0.200735    25.251  &lt; 2e-16 ***\nORIGIN_GRID_ID1481  2.048608   0.201812    10.151  &lt; 2e-16 ***\nORIGIN_GRID_ID1482  2.256917   0.202437    11.149  &lt; 2e-16 ***\nORIGIN_GRID_ID1485  4.052719   0.201018    20.161  &lt; 2e-16 ***\nORIGIN_GRID_ID1494  2.337873   0.201731    11.589  &lt; 2e-16 ***\nORIGIN_GRID_ID1495  3.055608   0.200893    15.210  &lt; 2e-16 ***\nORIGIN_GRID_ID1496  4.394465   0.200743    21.891  &lt; 2e-16 ***\nORIGIN_GRID_ID1497  3.900522   0.200830    19.422  &lt; 2e-16 ***\nORIGIN_GRID_ID1498  3.776493   0.200822    18.805  &lt; 2e-16 ***\nORIGIN_GRID_ID1499  3.896382   0.200800    19.404  &lt; 2e-16 ***\nORIGIN_GRID_ID1500  3.768129   0.200956    18.751  &lt; 2e-16 ***\nORIGIN_GRID_ID1501  4.069857   0.200793    20.269  &lt; 2e-16 ***\nORIGIN_GRID_ID1502  3.542980   0.200889    17.637  &lt; 2e-16 ***\nORIGIN_GRID_ID1506 -0.368475   0.258118    -1.428 0.153424    \nORIGIN_GRID_ID1514 -2.061341   1.020146    -2.021 0.043318 *  \nORIGIN_GRID_ID1515  2.249999   0.201723    11.154  &lt; 2e-16 ***\nORIGIN_GRID_ID1516  3.878960   0.200786    19.319  &lt; 2e-16 ***\nORIGIN_GRID_ID1517  3.393469   0.200886    16.892  &lt; 2e-16 ***\nORIGIN_GRID_ID1518  3.130436   0.201009    15.574  &lt; 2e-16 ***\nORIGIN_GRID_ID1519  3.735949   0.200924    18.594  &lt; 2e-16 ***\nORIGIN_GRID_ID1520  2.504435   0.201157    12.450  &lt; 2e-16 ***\nORIGIN_GRID_ID1521  1.331045   0.202585     6.570 5.02e-11 ***\nORIGIN_GRID_ID1522  4.159405   0.200804    20.714  &lt; 2e-16 ***\nORIGIN_GRID_ID1523  3.057263   0.202137    15.125  &lt; 2e-16 ***\nORIGIN_GRID_ID1524  2.995179   0.201569    14.859  &lt; 2e-16 ***\nORIGIN_GRID_ID1527  2.156378   0.204391    10.550  &lt; 2e-16 ***\nORIGIN_GRID_ID1535  3.860376   0.204133    18.911  &lt; 2e-16 ***\nORIGIN_GRID_ID1536  2.567258   0.201775    12.723  &lt; 2e-16 ***\nORIGIN_GRID_ID1537  2.756854   0.201056    13.712  &lt; 2e-16 ***\nORIGIN_GRID_ID1538  3.506530   0.200821    17.461  &lt; 2e-16 ***\nORIGIN_GRID_ID1539  3.490153   0.200831    17.379  &lt; 2e-16 ***\nORIGIN_GRID_ID1540  3.495342   0.200861    17.402  &lt; 2e-16 ***\nORIGIN_GRID_ID1541  4.573175   0.200926    22.760  &lt; 2e-16 ***\nORIGIN_GRID_ID1542  1.980200   0.202287     9.789  &lt; 2e-16 ***\nORIGIN_GRID_ID1543  2.460968   0.204227    12.050  &lt; 2e-16 ***\nORIGIN_GRID_ID1544  3.466967   0.201090    17.241  &lt; 2e-16 ***\nORIGIN_GRID_ID1547  1.166651   0.212934     5.479 4.28e-08 ***\nORIGIN_GRID_ID1556  2.564775   0.211306    12.138  &lt; 2e-16 ***\nORIGIN_GRID_ID1557  2.720613   0.201659    13.491  &lt; 2e-16 ***\nORIGIN_GRID_ID1558  1.666100   0.203202     8.199 2.42e-16 ***\nORIGIN_GRID_ID1559  3.822149   0.200793    19.035  &lt; 2e-16 ***\nORIGIN_GRID_ID1560  4.123395   0.200782    20.537  &lt; 2e-16 ***\nORIGIN_GRID_ID1561  3.628364   0.200931    18.058  &lt; 2e-16 ***\nORIGIN_GRID_ID1562  1.454971   0.202752     7.176 7.17e-13 ***\nORIGIN_GRID_ID1563  2.676457   0.201133    13.307  &lt; 2e-16 ***\nORIGIN_GRID_ID1564  2.064364   0.201809    10.229  &lt; 2e-16 ***\nORIGIN_GRID_ID1565  1.984888   0.202192     9.817  &lt; 2e-16 ***\nORIGIN_GRID_ID1566  1.714536   0.203428     8.428  &lt; 2e-16 ***\nORIGIN_GRID_ID1567  0.077656   0.237562     0.327 0.743752    \nORIGIN_GRID_ID1568  1.338448   0.211426     6.331 2.44e-10 ***\nORIGIN_GRID_ID1578  0.371932   0.257873     1.442 0.149216    \nORIGIN_GRID_ID1580  2.616697   0.201765    12.969  &lt; 2e-16 ***\nORIGIN_GRID_ID1581  1.206609   0.202349     5.963 2.48e-09 ***\nORIGIN_GRID_ID1582  3.741763   0.200812    18.633  &lt; 2e-16 ***\nORIGIN_GRID_ID1583  1.979011   0.204387     9.683  &lt; 2e-16 ***\nORIGIN_GRID_ID1584  2.190427   0.201577    10.866  &lt; 2e-16 ***\nORIGIN_GRID_ID1585  3.780112   0.200951    18.811  &lt; 2e-16 ***\nORIGIN_GRID_ID1586  2.054309   0.201886    10.176  &lt; 2e-16 ***\nORIGIN_GRID_ID1589  0.636414   0.218803     2.909 0.003630 ** \nORIGIN_GRID_ID1590  1.036437   0.217227     4.771 1.83e-06 ***\nORIGIN_GRID_ID1600  3.926826   0.201430    19.495  &lt; 2e-16 ***\nORIGIN_GRID_ID1601  3.030491   0.200927    15.083  &lt; 2e-16 ***\nORIGIN_GRID_ID1602  3.419019   0.200927    17.016  &lt; 2e-16 ***\nORIGIN_GRID_ID1603  3.956147   0.200818    19.700  &lt; 2e-16 ***\nORIGIN_GRID_ID1604  2.572191   0.201137    12.788  &lt; 2e-16 ***\nORIGIN_GRID_ID1605  3.714125   0.200828    18.494  &lt; 2e-16 ***\nORIGIN_GRID_ID1606  3.517100   0.201302    17.472  &lt; 2e-16 ***\nORIGIN_GRID_ID1607  2.256940   0.201568    11.197  &lt; 2e-16 ***\nORIGIN_GRID_ID1608  4.165560   0.200881    20.736  &lt; 2e-16 ***\nORIGIN_GRID_ID1609  3.876030   0.201003    19.283  &lt; 2e-16 ***\nORIGIN_GRID_ID1610  1.066646   0.221694     4.811 1.50e-06 ***\nORIGIN_GRID_ID1622  3.287509   0.201918    16.281  &lt; 2e-16 ***\nORIGIN_GRID_ID1623  3.788155   0.200807    18.865  &lt; 2e-16 ***\nORIGIN_GRID_ID1624  2.966235   0.201105    14.750  &lt; 2e-16 ***\nORIGIN_GRID_ID1625  3.679417   0.200879    18.317  &lt; 2e-16 ***\nORIGIN_GRID_ID1626  5.048977   0.200738    25.152  &lt; 2e-16 ***\nORIGIN_GRID_ID1627  2.712107   0.201098    13.486  &lt; 2e-16 ***\nORIGIN_GRID_ID1628  4.296761   0.200799    21.398  &lt; 2e-16 ***\nORIGIN_GRID_ID1629  2.927983   0.201312    14.545  &lt; 2e-16 ***\nORIGIN_GRID_ID1630  3.102318   0.201247    15.415  &lt; 2e-16 ***\nORIGIN_GRID_ID1631  0.250785   0.222420     1.128 0.259521    \nORIGIN_GRID_ID1642  1.501408   0.205470     7.307 2.73e-13 ***\nORIGIN_GRID_ID1643  3.607064   0.200836    17.960  &lt; 2e-16 ***\nORIGIN_GRID_ID1644  1.916449   0.202569     9.461  &lt; 2e-16 ***\nORIGIN_GRID_ID1645  3.199413   0.200990    15.918  &lt; 2e-16 ***\nORIGIN_GRID_ID1646  2.529382   0.201499    12.553  &lt; 2e-16 ***\nORIGIN_GRID_ID1647  3.456787   0.200857    17.210  &lt; 2e-16 ***\nORIGIN_GRID_ID1648  3.505673   0.200882    17.451  &lt; 2e-16 ***\nORIGIN_GRID_ID1649  4.058225   0.200833    20.207  &lt; 2e-16 ***\nORIGIN_GRID_ID1650  4.084533   0.200935    20.328  &lt; 2e-16 ***\nORIGIN_GRID_ID1664  0.024223   0.228873     0.106 0.915713    \nORIGIN_GRID_ID1665  4.010963   0.200792    19.976  &lt; 2e-16 ***\nORIGIN_GRID_ID1666  2.962799   0.200996    14.741  &lt; 2e-16 ***\nORIGIN_GRID_ID1667  3.482875   0.201446    17.289  &lt; 2e-16 ***\nORIGIN_GRID_ID1668  3.496059   0.200880    17.404  &lt; 2e-16 ***\nORIGIN_GRID_ID1670  4.183733   0.200793    20.836  &lt; 2e-16 ***\nORIGIN_GRID_ID1671  4.458824   0.200984    22.185  &lt; 2e-16 ***\nORIGIN_GRID_ID1672  3.695710   0.201087    18.379  &lt; 2e-16 ***\nORIGIN_GRID_ID1684  2.779402   0.201859    13.769  &lt; 2e-16 ***\nORIGIN_GRID_ID1685  3.478807   0.200888    17.317  &lt; 2e-16 ***\nORIGIN_GRID_ID1686  3.491736   0.200885    17.382  &lt; 2e-16 ***\nORIGIN_GRID_ID1687  3.203165   0.201222    15.919  &lt; 2e-16 ***\nORIGIN_GRID_ID1688  2.872362   0.201077    14.285  &lt; 2e-16 ***\nORIGIN_GRID_ID1689  2.285206   0.201440    11.344  &lt; 2e-16 ***\nORIGIN_GRID_ID1690  2.668243   0.201253    13.258  &lt; 2e-16 ***\nORIGIN_GRID_ID1691  3.668184   0.200874    18.261  &lt; 2e-16 ***\nORIGIN_GRID_ID1692  3.034351   0.201388    15.067  &lt; 2e-16 ***\nORIGIN_GRID_ID1706  3.397994   0.200991    16.906  &lt; 2e-16 ***\nORIGIN_GRID_ID1707  3.262416   0.200887    16.240  &lt; 2e-16 ***\nORIGIN_GRID_ID1708  3.730878   0.200847    18.576  &lt; 2e-16 ***\nORIGIN_GRID_ID1709  3.055182   0.201041    15.197  &lt; 2e-16 ***\nORIGIN_GRID_ID1710  3.845814   0.200863    19.146  &lt; 2e-16 ***\nORIGIN_GRID_ID1711  4.582363   0.200779    22.823  &lt; 2e-16 ***\nORIGIN_GRID_ID1712  4.344388   0.200772    21.638  &lt; 2e-16 ***\nORIGIN_GRID_ID1713  1.505968   0.202478     7.438 1.02e-13 ***\nORIGIN_GRID_ID1714  4.270567   0.200865    21.261  &lt; 2e-16 ***\nORIGIN_GRID_ID1726 -0.658095   0.538787    -1.221 0.221921    \nORIGIN_GRID_ID1727  3.344240   0.200934    16.643  &lt; 2e-16 ***\nORIGIN_GRID_ID1728  4.045467   0.200798    20.147  &lt; 2e-16 ***\nORIGIN_GRID_ID1729  3.118090   0.200980    15.514  &lt; 2e-16 ***\nORIGIN_GRID_ID1730  1.606139   0.203090     7.909 2.61e-15 ***\nORIGIN_GRID_ID1731  3.624423   0.200890    18.042  &lt; 2e-16 ***\nORIGIN_GRID_ID1732  3.843422   0.200811    19.139  &lt; 2e-16 ***\nORIGIN_GRID_ID1733  3.378981   0.200892    16.820  &lt; 2e-16 ***\nORIGIN_GRID_ID1734  3.678938   0.200872    18.315  &lt; 2e-16 ***\nORIGIN_GRID_ID1735  4.634392   0.201198    23.034  &lt; 2e-16 ***\nORIGIN_GRID_ID1748  2.725355   0.201167    13.548  &lt; 2e-16 ***\nORIGIN_GRID_ID1749  4.234009   0.200775    21.088  &lt; 2e-16 ***\nORIGIN_GRID_ID1750  2.935373   0.200985    14.605  &lt; 2e-16 ***\nORIGIN_GRID_ID1751  2.129876   0.201847    10.552  &lt; 2e-16 ***\nORIGIN_GRID_ID1753  3.884313   0.200836    19.341  &lt; 2e-16 ***\nORIGIN_GRID_ID1754  4.706461   0.200754    23.444  &lt; 2e-16 ***\nORIGIN_GRID_ID1755  3.811646   0.200830    18.979  &lt; 2e-16 ***\nORIGIN_GRID_ID1756  3.445505   0.200929    17.148  &lt; 2e-16 ***\nORIGIN_GRID_ID1757  0.722619   0.210756     3.429 0.000606 ***\nORIGIN_GRID_ID1768  0.043815   0.248138     0.177 0.859842    \nORIGIN_GRID_ID1769  3.077260   0.200955    15.313  &lt; 2e-16 ***\nORIGIN_GRID_ID1770  3.842490   0.200969    19.120  &lt; 2e-16 ***\nORIGIN_GRID_ID1771  2.536828   0.201370    12.598  &lt; 2e-16 ***\nORIGIN_GRID_ID1772  2.982633   0.203278    14.673  &lt; 2e-16 ***\nORIGIN_GRID_ID1774  3.671483   0.200851    18.280  &lt; 2e-16 ***\nORIGIN_GRID_ID1775  3.180549   0.200954    15.827  &lt; 2e-16 ***\nORIGIN_GRID_ID1776  4.876465   0.200753    24.291  &lt; 2e-16 ***\nORIGIN_GRID_ID1777  3.779880   0.200898    18.815  &lt; 2e-16 ***\nORIGIN_GRID_ID1778  3.455546   0.201995    17.107  &lt; 2e-16 ***\nORIGIN_GRID_ID1790  4.228895   0.200808    21.059  &lt; 2e-16 ***\nORIGIN_GRID_ID1791  3.920931   0.200843    19.522  &lt; 2e-16 ***\nORIGIN_GRID_ID1792  3.329349   0.201090    16.557  &lt; 2e-16 ***\nORIGIN_GRID_ID1793  2.802904   0.201270    13.926  &lt; 2e-16 ***\nORIGIN_GRID_ID1794  2.277764   0.209917    10.851  &lt; 2e-16 ***\nORIGIN_GRID_ID1795  0.456906   0.210073     2.175 0.029632 *  \nORIGIN_GRID_ID1796  3.867216   0.200861    19.253  &lt; 2e-16 ***\nORIGIN_GRID_ID1797  3.865960   0.200830    19.250  &lt; 2e-16 ***\nORIGIN_GRID_ID1798  3.707323   0.200852    18.458  &lt; 2e-16 ***\nORIGIN_GRID_ID1799  2.768001   0.201357    13.747  &lt; 2e-16 ***\nORIGIN_GRID_ID1800  2.040919   0.205294     9.941  &lt; 2e-16 ***\nORIGIN_GRID_ID1811  3.354071   0.200930    16.693  &lt; 2e-16 ***\nORIGIN_GRID_ID1812  4.377137   0.200768    21.802  &lt; 2e-16 ***\nORIGIN_GRID_ID1813  3.784317   0.200843    18.842  &lt; 2e-16 ***\nORIGIN_GRID_ID1817  3.493848   0.200999    17.382  &lt; 2e-16 ***\nORIGIN_GRID_ID1818  3.632474   0.200867    18.084  &lt; 2e-16 ***\nORIGIN_GRID_ID1819  4.800205   0.200768    23.909  &lt; 2e-16 ***\nORIGIN_GRID_ID1820  1.507334   0.206273     7.307 2.72e-13 ***\nORIGIN_GRID_ID1832  4.672635   0.200775    23.273  &lt; 2e-16 ***\nORIGIN_GRID_ID1833  3.185312   0.200951    15.851  &lt; 2e-16 ***\nORIGIN_GRID_ID1834  3.221212   0.200938    16.031  &lt; 2e-16 ***\nORIGIN_GRID_ID1835  2.517638   0.201383    12.502  &lt; 2e-16 ***\nORIGIN_GRID_ID1837  1.696483   0.225683     7.517 5.60e-14 ***\nORIGIN_GRID_ID1839  3.324012   0.201074    16.531  &lt; 2e-16 ***\nORIGIN_GRID_ID1840  4.744907   0.200767    23.634  &lt; 2e-16 ***\nORIGIN_GRID_ID1841  2.369533   0.202506    11.701  &lt; 2e-16 ***\nORIGIN_GRID_ID1842  4.987706   0.201462    24.758  &lt; 2e-16 ***\nORIGIN_GRID_ID1853  3.334897   0.200902    16.600  &lt; 2e-16 ***\nORIGIN_GRID_ID1854  3.703343   0.200860    18.437  &lt; 2e-16 ***\nORIGIN_GRID_ID1855  3.846962   0.200868    19.152  &lt; 2e-16 ***\nORIGIN_GRID_ID1858  2.390289   0.204576    11.684  &lt; 2e-16 ***\nORIGIN_GRID_ID1860  4.170400   0.201430    20.704  &lt; 2e-16 ***\nORIGIN_GRID_ID1861  3.708871   0.200912    18.460  &lt; 2e-16 ***\nORIGIN_GRID_ID1874  3.562343   0.200981    17.725  &lt; 2e-16 ***\nORIGIN_GRID_ID1875  1.816325   0.202295     8.979  &lt; 2e-16 ***\nORIGIN_GRID_ID1876  3.883758   0.201909    19.235  &lt; 2e-16 ***\nORIGIN_GRID_ID1877  3.524302   0.200920    17.541  &lt; 2e-16 ***\nORIGIN_GRID_ID1880  1.392168   0.213104     6.533 6.46e-11 ***\nORIGIN_GRID_ID1882  3.815530   0.200911    18.991  &lt; 2e-16 ***\nORIGIN_GRID_ID1883  3.595558   0.201696    17.827  &lt; 2e-16 ***\nORIGIN_GRID_ID1895  3.612127   0.200888    17.981  &lt; 2e-16 ***\nORIGIN_GRID_ID1896  2.974148   0.201034    14.794  &lt; 2e-16 ***\nORIGIN_GRID_ID1897  2.984682   0.201185    14.836  &lt; 2e-16 ***\nORIGIN_GRID_ID1898 -0.177099   0.226190    -0.783 0.433647    \nORIGIN_GRID_ID1901  1.011275   0.220985     4.576 4.73e-06 ***\nORIGIN_GRID_ID1903  3.121060   0.201604    15.481  &lt; 2e-16 ***\nORIGIN_GRID_ID1916  0.666841   0.212936     3.132 0.001738 ** \nORIGIN_GRID_ID1917  2.824856   0.201140    14.044  &lt; 2e-16 ***\nORIGIN_GRID_ID1918  3.635398   0.200972    18.089  &lt; 2e-16 ***\nORIGIN_GRID_ID1919  3.595250   0.200916    17.894  &lt; 2e-16 ***\nORIGIN_GRID_ID1922  1.935932   0.207711     9.320  &lt; 2e-16 ***\nORIGIN_GRID_ID1924  3.351922   0.201558    16.630  &lt; 2e-16 ***\nORIGIN_GRID_ID1937  3.255359   0.201034    16.193  &lt; 2e-16 ***\nORIGIN_GRID_ID1938  3.720567   0.200841    18.525  &lt; 2e-16 ***\nORIGIN_GRID_ID1939  3.873304   0.200879    19.282  &lt; 2e-16 ***\nORIGIN_GRID_ID1942  1.467514   0.209761     6.996 2.63e-12 ***\nORIGIN_GRID_ID1958  0.187070   0.280637     0.667 0.505034    \nORIGIN_GRID_ID1959  2.911420   0.201186    14.471  &lt; 2e-16 ***\nORIGIN_GRID_ID1960  5.362048   0.200729    26.713  &lt; 2e-16 ***\nORIGIN_GRID_ID1961  2.908911   0.201165    14.460  &lt; 2e-16 ***\nORIGIN_GRID_ID1962  3.728505   0.200903    18.559  &lt; 2e-16 ***\nORIGIN_GRID_ID1964  1.674884   0.210803     7.945 1.94e-15 ***\nORIGIN_GRID_ID1979  3.014098   0.201196    14.981  &lt; 2e-16 ***\nORIGIN_GRID_ID1980  1.118102   0.202625     5.518 3.43e-08 ***\nORIGIN_GRID_ID1981  3.343982   0.200898    16.645  &lt; 2e-16 ***\nORIGIN_GRID_ID1982  2.905788   0.201619    14.412  &lt; 2e-16 ***\nORIGIN_GRID_ID1983  3.758317   0.200890    18.708  &lt; 2e-16 ***\nORIGIN_GRID_ID1984  2.613769   0.201331    12.982  &lt; 2e-16 ***\nORIGIN_GRID_ID1985  2.943207   0.201207    14.628  &lt; 2e-16 ***\nORIGIN_GRID_ID2001  3.357973   0.200966    16.709  &lt; 2e-16 ***\nORIGIN_GRID_ID2002  3.724212   0.200819    18.545  &lt; 2e-16 ***\nORIGIN_GRID_ID2003  3.656247   0.200873    18.202  &lt; 2e-16 ***\nORIGIN_GRID_ID2004  4.342898   0.200807    21.627  &lt; 2e-16 ***\nORIGIN_GRID_ID2005  3.676802   0.200887    18.303  &lt; 2e-16 ***\nORIGIN_GRID_ID2006  3.133529   0.201102    15.582  &lt; 2e-16 ***\nORIGIN_GRID_ID2007  1.594045   0.204224     7.805 5.93e-15 ***\nORIGIN_GRID_ID2022  3.833646   0.200950    19.078  &lt; 2e-16 ***\nORIGIN_GRID_ID2023  4.028526   0.200811    20.061  &lt; 2e-16 ***\nORIGIN_GRID_ID2024  3.598206   0.200855    17.914  &lt; 2e-16 ***\nORIGIN_GRID_ID2025  3.181459   0.200913    15.835  &lt; 2e-16 ***\nORIGIN_GRID_ID2026  1.875297   0.202045     9.282  &lt; 2e-16 ***\nORIGIN_GRID_ID2027  4.128194   0.200843    20.554  &lt; 2e-16 ***\nORIGIN_GRID_ID2043  3.040594   0.201185    15.113  &lt; 2e-16 ***\nORIGIN_GRID_ID2044  3.517533   0.200880    17.511  &lt; 2e-16 ***\nORIGIN_GRID_ID2045  0.955581   0.216409     4.416 1.01e-05 ***\nORIGIN_GRID_ID2046  4.062298   0.200781    20.233  &lt; 2e-16 ***\nORIGIN_GRID_ID2047  3.123409   0.200986    15.540  &lt; 2e-16 ***\nORIGIN_GRID_ID2048  3.423708   0.200917    17.040  &lt; 2e-16 ***\nORIGIN_GRID_ID2049  2.486466   0.202633    12.271  &lt; 2e-16 ***\nORIGIN_GRID_ID2064  3.554736   0.200939    17.691  &lt; 2e-16 ***\nORIGIN_GRID_ID2065  2.664415   0.201171    13.245  &lt; 2e-16 ***\nORIGIN_GRID_ID2066  2.017417   0.203452     9.916  &lt; 2e-16 ***\nORIGIN_GRID_ID2067  5.298351   0.200733    26.395  &lt; 2e-16 ***\nORIGIN_GRID_ID2068  2.961707   0.201238    14.717  &lt; 2e-16 ***\nORIGIN_GRID_ID2069  3.540738   0.200948    17.620  &lt; 2e-16 ***\nORIGIN_GRID_ID2085  2.623696   0.201457    13.024  &lt; 2e-16 ***\nORIGIN_GRID_ID2086  3.898229   0.200862    19.407  &lt; 2e-16 ***\nORIGIN_GRID_ID2087  3.081644   0.201033    15.329  &lt; 2e-16 ***\nORIGIN_GRID_ID2088  3.484761   0.200844    17.351  &lt; 2e-16 ***\nORIGIN_GRID_ID2089  2.849446   0.201101    14.169  &lt; 2e-16 ***\nORIGIN_GRID_ID2090  4.806611   0.200762    23.942  &lt; 2e-16 ***\nORIGIN_GRID_ID2091  1.257010   0.209584     5.998 2.00e-09 ***\nORIGIN_GRID_ID2105  2.052112   0.214955     9.547  &lt; 2e-16 ***\nORIGIN_GRID_ID2106  1.448098   0.202895     7.137 9.53e-13 ***\nORIGIN_GRID_ID2107  2.573544   0.201232    12.789  &lt; 2e-16 ***\nORIGIN_GRID_ID2108  3.782202   0.200883    18.828  &lt; 2e-16 ***\nORIGIN_GRID_ID2109  3.227209   0.200894    16.064  &lt; 2e-16 ***\nORIGIN_GRID_ID2110  2.507817   0.201294    12.458  &lt; 2e-16 ***\nORIGIN_GRID_ID2111 -0.330765   0.224050    -1.476 0.139862    \nORIGIN_GRID_ID2128  2.506319   0.201828    12.418  &lt; 2e-16 ***\nORIGIN_GRID_ID2129  2.129528   0.201688    10.559  &lt; 2e-16 ***\nORIGIN_GRID_ID2130  3.969407   0.200806    19.767  &lt; 2e-16 ***\nORIGIN_GRID_ID2131  4.047183   0.200878    20.148  &lt; 2e-16 ***\nORIGIN_GRID_ID2132  3.434059   0.200933    17.091  &lt; 2e-16 ***\nORIGIN_GRID_ID2148  3.419597   0.201398    16.979  &lt; 2e-16 ***\nORIGIN_GRID_ID2149  1.113652   0.203892     5.462 4.71e-08 ***\nORIGIN_GRID_ID2150  3.726418   0.200902    18.548  &lt; 2e-16 ***\nORIGIN_GRID_ID2151  4.120798   0.200797    20.522  &lt; 2e-16 ***\nORIGIN_GRID_ID2152  4.270792   0.200809    21.268  &lt; 2e-16 ***\nORIGIN_GRID_ID2153  3.598640   0.201017    17.902  &lt; 2e-16 ***\nORIGIN_GRID_ID2171  3.102164   0.201113    15.425  &lt; 2e-16 ***\nORIGIN_GRID_ID2172  2.731818   0.201299    13.571  &lt; 2e-16 ***\nORIGIN_GRID_ID2173  3.069220   0.200985    15.271  &lt; 2e-16 ***\nORIGIN_GRID_ID2174  3.501883   0.200984    17.424  &lt; 2e-16 ***\nORIGIN_GRID_ID2191  2.685004   0.201811    13.305  &lt; 2e-16 ***\nORIGIN_GRID_ID2192  2.346406   0.201747    11.630  &lt; 2e-16 ***\nORIGIN_GRID_ID2193  3.045369   0.201121    15.142  &lt; 2e-16 ***\nORIGIN_GRID_ID2194  3.650929   0.200901    18.173  &lt; 2e-16 ***\nORIGIN_GRID_ID2195  2.350854   0.205017    11.467  &lt; 2e-16 ***\nORIGIN_GRID_ID2212  1.584955   0.212843     7.447 9.58e-14 ***\nORIGIN_GRID_ID2213  0.879782   0.209419     4.201 2.66e-05 ***\nORIGIN_GRID_ID2214  2.305189   0.203550    11.325  &lt; 2e-16 ***\nORIGIN_GRID_ID2215  3.342034   0.201136    16.616  &lt; 2e-16 ***\nORIGIN_GRID_ID2216  2.287951   0.201961    11.329  &lt; 2e-16 ***\nORIGIN_GRID_ID2233  2.091071   0.205550    10.173  &lt; 2e-16 ***\nORIGIN_GRID_ID2234  2.703334   0.205045    13.184  &lt; 2e-16 ***\nORIGIN_GRID_ID2235  2.620381   0.202270    12.955  &lt; 2e-16 ***\nORIGIN_GRID_ID2236  1.420715   0.204251     6.956 3.51e-12 ***\nORIGIN_GRID_ID2237  1.491329   0.211404     7.054 1.73e-12 ***\nORIGIN_GRID_ID2256  1.568186   0.209144     7.498 6.47e-14 ***\nORIGIN_GRID_ID2257  2.005544   0.204073     9.828  &lt; 2e-16 ***\nORIGIN_GRID_ID2258  2.057838   0.202608    10.157  &lt; 2e-16 ***\nORIGIN_GRID_ID2259  2.270580   0.208965    10.866  &lt; 2e-16 ***\nORIGIN_GRID_ID2277  1.718422   0.212641     8.081 6.41e-16 ***\nORIGIN_GRID_ID2278  2.032244   0.205017     9.913  &lt; 2e-16 ***\nORIGIN_GRID_ID2279  1.849483   0.203730     9.078  &lt; 2e-16 ***\nORIGIN_GRID_ID2280  0.656835   0.216458     3.034 0.002410 ** \nORIGIN_GRID_ID2297  3.587823   0.201479    17.807  &lt; 2e-16 ***\nORIGIN_GRID_ID2300 -0.244761   0.253200    -0.967 0.333707    \nORIGIN_GRID_ID2301  1.496185   0.204035     7.333 2.25e-13 ***\nORIGIN_GRID_ID2318  0.988654   0.206763     4.782 1.74e-06 ***\nORIGIN_GRID_ID2319  3.045446   0.201170    15.139  &lt; 2e-16 ***\nORIGIN_GRID_ID2322  4.561072   0.201033    22.688  &lt; 2e-16 ***\nORIGIN_GRID_ID2337  5.636394   0.201507    27.971  &lt; 2e-16 ***\nORIGIN_GRID_ID2341  3.897053   0.201015    19.387  &lt; 2e-16 ***\nORIGIN_GRID_ID2343  2.934958   0.201638    14.556  &lt; 2e-16 ***\nORIGIN_GRID_ID2361  2.932962   0.201534    14.553  &lt; 2e-16 ***\nORIGIN_GRID_ID2364  1.957669   0.206381     9.486  &lt; 2e-16 ***\nORIGIN_GRID_ID2379  0.137893   0.217686     0.633 0.526441    \nORIGIN_GRID_ID2384  3.447842   0.202044    17.065  &lt; 2e-16 ***\nORIGIN_GRID_ID2405  3.293676   0.202128    16.295  &lt; 2e-16 ***\nORIGIN_GRID_ID2406  2.242232   0.206276    10.870  &lt; 2e-16 ***\nORIGIN_GRID_ID2426  3.264119   0.206445    15.811  &lt; 2e-16 ***\nORIGIN_GRID_ID2427  3.172928   0.202731    15.651  &lt; 2e-16 ***\nORIGIN_GRID_ID2505  2.479341   0.211840    11.704  &lt; 2e-16 ***\nDESTIN_GRID_ID46    0.243956   0.228531     1.067 0.285749    \nDESTIN_GRID_ID66    0.769568   0.545484     1.411 0.158304    \nDESTIN_GRID_ID67   -0.676598   0.227246    -2.977 0.002907 ** \nDESTIN_GRID_ID68    0.068426   0.224613     0.305 0.760641    \nDESTIN_GRID_ID86    1.304538   0.261794     4.983 6.26e-07 ***\nDESTIN_GRID_ID88    0.270386   0.221243     1.222 0.221663    \nDESTIN_GRID_ID89    2.379337   0.238498     9.976  &lt; 2e-16 ***\nDESTIN_GRID_ID90   -1.591211   0.739558    -2.152 0.031431 *  \nDESTIN_GRID_ID109   0.680753   0.289079     2.355 0.018527 *  \nDESTIN_GRID_ID110  -4.278642   0.462301    -9.255  &lt; 2e-16 ***\nDESTIN_GRID_ID111   4.196670   0.217120    19.329  &lt; 2e-16 ***\nDESTIN_GRID_ID112  -3.389238   0.344465    -9.839  &lt; 2e-16 ***\nDESTIN_GRID_ID128   4.040336   0.218489    18.492  &lt; 2e-16 ***\nDESTIN_GRID_ID129   1.088605   0.415672     2.619 0.008821 ** \nDESTIN_GRID_ID130   2.233537   0.253394     8.814  &lt; 2e-16 ***\nDESTIN_GRID_ID131  -2.078551   0.236354    -8.794  &lt; 2e-16 ***\nDESTIN_GRID_ID132   0.241749   0.230725     1.048 0.294741    \nDESTIN_GRID_ID133  -0.994854   0.241171    -4.125 3.71e-05 ***\nDESTIN_GRID_ID134   3.162789   0.217251    14.558  &lt; 2e-16 ***\nDESTIN_GRID_ID150  -0.755633   0.228460    -3.308 0.000941 ***\nDESTIN_GRID_ID151  -1.148554   0.264351    -4.345 1.39e-05 ***\nDESTIN_GRID_ID152   1.071435   0.255956     4.186 2.84e-05 ***\nDESTIN_GRID_ID153   0.951301   0.233514     4.074 4.62e-05 ***\nDESTIN_GRID_ID154   0.264321   0.230790     1.145 0.252090    \nDESTIN_GRID_ID155   1.352813   0.219748     6.156 7.45e-10 ***\nDESTIN_GRID_ID156  -0.311588   0.241321    -1.291 0.196644    \nDESTIN_GRID_ID172   0.744672   0.289798     2.570 0.010181 *  \nDESTIN_GRID_ID174  -0.346237   0.261921    -1.322 0.186197    \nDESTIN_GRID_ID175   2.985114   0.217328    13.736  &lt; 2e-16 ***\nDESTIN_GRID_ID176  -0.062484   0.230096    -0.272 0.785963    \nDESTIN_GRID_ID195  -0.929859   0.332578    -2.796 0.005175 ** \nDESTIN_GRID_ID196  -0.179762   0.234601    -0.766 0.443529    \nDESTIN_GRID_ID197  -1.318336   0.268721    -4.906 9.30e-07 ***\nDESTIN_GRID_ID215   0.340983   0.259789     1.313 0.189339    \nDESTIN_GRID_ID216   2.741131   0.218439    12.549  &lt; 2e-16 ***\nDESTIN_GRID_ID217   1.549351   0.222575     6.961 3.38e-12 ***\nDESTIN_GRID_ID237  -1.584562   0.345521    -4.586 4.52e-06 ***\nDESTIN_GRID_ID238   0.171025   0.243244     0.703 0.481991    \nDESTIN_GRID_ID239   1.709532   0.229934     7.435 1.05e-13 ***\nDESTIN_GRID_ID257  -0.714740   0.230312    -3.103 0.001913 ** \nDESTIN_GRID_ID258  -0.586380   0.246257    -2.381 0.017258 *  \nDESTIN_GRID_ID259  -0.083909   0.245268    -0.342 0.732266    \nDESTIN_GRID_ID278   0.007623   0.231768     0.033 0.973762    \nDESTIN_GRID_ID279   0.508558   0.232233     2.190 0.028535 *  \nDESTIN_GRID_ID280   1.059553   0.226737     4.673 2.97e-06 ***\nDESTIN_GRID_ID299  -0.117289   0.249763    -0.470 0.638638    \nDESTIN_GRID_ID300   2.036945   0.219948     9.261  &lt; 2e-16 ***\nDESTIN_GRID_ID320  -0.034232   0.238945    -0.143 0.886081    \nDESTIN_GRID_ID321  -0.158173   0.301182    -0.525 0.599463    \nDESTIN_GRID_ID322   0.230410   0.230820     0.998 0.318170    \nDESTIN_GRID_ID340   1.398885   0.224924     6.219 4.99e-10 ***\nDESTIN_GRID_ID341  -1.110910   0.239728    -4.634 3.59e-06 ***\nDESTIN_GRID_ID342   0.847994   0.227286     3.731 0.000191 ***\nDESTIN_GRID_ID363   0.703638   0.231600     3.038 0.002380 ** \nDESTIN_GRID_ID364   0.087499   0.229464     0.381 0.702968    \nDESTIN_GRID_ID383   0.053712   0.225507     0.238 0.811738    \nDESTIN_GRID_ID384   0.442226   0.225661     1.960 0.050032 .  \nDESTIN_GRID_ID385  -1.941264   0.320598    -6.055 1.40e-09 ***\nDESTIN_GRID_ID404   1.726187   0.234233     7.370 1.71e-13 ***\nDESTIN_GRID_ID405  -0.819027   0.242872    -3.372 0.000746 ***\nDESTIN_GRID_ID406   3.578875   0.217271    16.472  &lt; 2e-16 ***\nDESTIN_GRID_ID407   2.057564   0.219205     9.386  &lt; 2e-16 ***\nDESTIN_GRID_ID408   3.180974   0.217791    14.606  &lt; 2e-16 ***\nDESTIN_GRID_ID425  -1.119066   0.264929    -4.224 2.40e-05 ***\nDESTIN_GRID_ID426  -0.605819   0.242877    -2.494 0.012619 *  \nDESTIN_GRID_ID427   0.612685   0.219997     2.785 0.005353 ** \nDESTIN_GRID_ID428   1.236480   0.219611     5.630 1.80e-08 ***\nDESTIN_GRID_ID429   1.873481   0.220291     8.505  &lt; 2e-16 ***\nDESTIN_GRID_ID446   0.719207   0.248033     2.900 0.003736 ** \nDESTIN_GRID_ID447  -1.231118   0.264618    -4.652 3.28e-06 ***\nDESTIN_GRID_ID448  -1.197889   0.243981    -4.910 9.12e-07 ***\nDESTIN_GRID_ID449   2.330501   0.217783    10.701  &lt; 2e-16 ***\nDESTIN_GRID_ID450   1.617014   0.218542     7.399 1.37e-13 ***\nDESTIN_GRID_ID468   0.871576   0.227264     3.835 0.000126 ***\nDESTIN_GRID_ID469   0.160956   0.222211     0.724 0.468857    \nDESTIN_GRID_ID470   3.163861   0.217418    14.552  &lt; 2e-16 ***\nDESTIN_GRID_ID471   2.298586   0.218841    10.503  &lt; 2e-16 ***\nDESTIN_GRID_ID488   0.397853   0.247041     1.610 0.107294    \nDESTIN_GRID_ID489  -1.467324   0.361286    -4.061 4.88e-05 ***\nDESTIN_GRID_ID490   1.423007   0.219533     6.482 9.05e-11 ***\nDESTIN_GRID_ID491   1.587346   0.217973     7.282 3.28e-13 ***\nDESTIN_GRID_ID493  -2.335304   0.414974    -5.628 1.83e-08 ***\nDESTIN_GRID_ID494   1.339492   0.223311     5.998 1.99e-09 ***\nDESTIN_GRID_ID509   0.329036   0.231860     1.419 0.155865    \nDESTIN_GRID_ID510   0.087219   0.230606     0.378 0.705270    \nDESTIN_GRID_ID511   1.184632   0.218338     5.426 5.77e-08 ***\nDESTIN_GRID_ID512   3.230073   0.217343    14.862  &lt; 2e-16 ***\nDESTIN_GRID_ID513  -0.158465   0.227077    -0.698 0.485274    \nDESTIN_GRID_ID514   0.068702   0.236425     0.291 0.771367    \nDESTIN_GRID_ID515  -0.364202   0.261862    -1.391 0.164281    \nDESTIN_GRID_ID530   0.113545   0.261788     0.434 0.664485    \nDESTIN_GRID_ID531   1.111942   0.223330     4.979 6.39e-07 ***\nDESTIN_GRID_ID532   0.217170   0.222307     0.977 0.328621    \nDESTIN_GRID_ID533   3.570768   0.217290    16.433  &lt; 2e-16 ***\nDESTIN_GRID_ID534   3.370584   0.217360    15.507  &lt; 2e-16 ***\nDESTIN_GRID_ID536   0.977278   0.222628     4.390 1.13e-05 ***\nDESTIN_GRID_ID537  -0.859185   0.295505    -2.908 0.003643 ** \nDESTIN_GRID_ID538  -0.891154   0.315993    -2.820 0.004800 ** \nDESTIN_GRID_ID539   0.629980   0.752379     0.837 0.402414    \nDESTIN_GRID_ID551  -0.516194   0.275518    -1.874 0.060994 .  \nDESTIN_GRID_ID552  -0.468813   0.252707    -1.855 0.063573 .  \nDESTIN_GRID_ID553  -0.020861   0.220413    -0.095 0.924596    \nDESTIN_GRID_ID554   2.635399   0.217385    12.123  &lt; 2e-16 ***\nDESTIN_GRID_ID555   2.046549   0.218240     9.378  &lt; 2e-16 ***\nDESTIN_GRID_ID559   0.895258   0.235086     3.808 0.000140 ***\nDESTIN_GRID_ID560  -0.891613   0.383675    -2.324 0.020132 *  \nDESTIN_GRID_ID561  -0.811925   0.435968    -1.862 0.062554 .  \nDESTIN_GRID_ID572  -3.020262   0.739754    -4.083 4.45e-05 ***\nDESTIN_GRID_ID573   0.959833   0.224581     4.274 1.92e-05 ***\nDESTIN_GRID_ID574   0.494819   0.224342     2.206 0.027409 *  \nDESTIN_GRID_ID575   5.084038   0.217242    23.403  &lt; 2e-16 ***\nDESTIN_GRID_ID576   2.443867   0.217486    11.237  &lt; 2e-16 ***\nDESTIN_GRID_ID578  -0.906381   0.280124    -3.236 0.001214 ** \nDESTIN_GRID_ID582  -0.501477   0.298115    -1.682 0.092538 .  \nDESTIN_GRID_ID583   0.762128   0.262571     2.903 0.003701 ** \nDESTIN_GRID_ID584   1.153164   0.246047     4.687 2.78e-06 ***\nDESTIN_GRID_ID593  -0.805330   0.298114    -2.701 0.006905 ** \nDESTIN_GRID_ID594   0.397774   0.228087     1.744 0.081166 .  \nDESTIN_GRID_ID595  -0.379038   0.222608    -1.703 0.088622 .  \nDESTIN_GRID_ID596   2.358374   0.217408    10.848  &lt; 2e-16 ***\nDESTIN_GRID_ID597  -1.161780   0.251144    -4.626 3.73e-06 ***\nDESTIN_GRID_ID603  -0.657528   0.325795    -2.018 0.043568 *  \nDESTIN_GRID_ID604   0.202891   0.285813     0.710 0.477783    \nDESTIN_GRID_ID615  -0.869212   0.244697    -3.552 0.000382 ***\nDESTIN_GRID_ID616   0.402661   0.222593     1.809 0.070458 .  \nDESTIN_GRID_ID617   0.048169   0.219692     0.219 0.826449    \nDESTIN_GRID_ID618   3.055836   0.217361    14.059  &lt; 2e-16 ***\nDESTIN_GRID_ID620  -0.569403   0.230643    -2.469 0.013558 *  \nDESTIN_GRID_ID637  -0.495478   0.227158    -2.181 0.029168 *  \nDESTIN_GRID_ID638   2.896094   0.217362    13.324  &lt; 2e-16 ***\nDESTIN_GRID_ID657   0.108719   0.224912     0.483 0.628822    \nDESTIN_GRID_ID658   1.689494   0.217937     7.752 9.03e-15 ***\nDESTIN_GRID_ID659   2.317480   0.217519    10.654  &lt; 2e-16 ***\nDESTIN_GRID_ID660   3.618972   0.217306    16.654  &lt; 2e-16 ***\nDESTIN_GRID_ID662   3.559409   0.217674    16.352  &lt; 2e-16 ***\nDESTIN_GRID_ID677   0.529772   0.229874     2.305 0.021188 *  \nDESTIN_GRID_ID678  -0.789505   0.230944    -3.419 0.000629 ***\nDESTIN_GRID_ID679   3.251287   0.217376    14.957  &lt; 2e-16 ***\nDESTIN_GRID_ID680   3.945035   0.217291    18.156  &lt; 2e-16 ***\nDESTIN_GRID_ID681   1.780789   0.218190     8.162 3.30e-16 ***\nDESTIN_GRID_ID699   0.741026   0.221928     3.339 0.000841 ***\nDESTIN_GRID_ID700   2.822868   0.217482    12.980  &lt; 2e-16 ***\nDESTIN_GRID_ID701   1.630535   0.217965     7.481 7.39e-14 ***\nDESTIN_GRID_ID702   3.326930   0.217331    15.308  &lt; 2e-16 ***\nDESTIN_GRID_ID704  -0.470488   0.227105    -2.072 0.038295 *  \nDESTIN_GRID_ID722   1.053470   0.218596     4.819 1.44e-06 ***\nDESTIN_GRID_ID725  -0.179817   0.224649    -0.800 0.423459    \nDESTIN_GRID_ID730   1.070269   0.239989     4.460 8.21e-06 ***\nDESTIN_GRID_ID741   1.956033   0.218498     8.952  &lt; 2e-16 ***\nDESTIN_GRID_ID743   0.896302   0.218628     4.100 4.14e-05 ***\nDESTIN_GRID_ID744   2.847564   0.217402    13.098  &lt; 2e-16 ***\nDESTIN_GRID_ID752   1.727776   0.223915     7.716 1.20e-14 ***\nDESTIN_GRID_ID761   0.695620   0.225973     3.078 0.002082 ** \nDESTIN_GRID_ID762   2.195310   0.217986    10.071  &lt; 2e-16 ***\nDESTIN_GRID_ID763   0.638232   0.219313     2.910 0.003613 ** \nDESTIN_GRID_ID764   3.579789   0.217311    16.473  &lt; 2e-16 ***\nDESTIN_GRID_ID765   1.244669   0.218765     5.690 1.27e-08 ***\nDESTIN_GRID_ID767   3.182406   0.217449    14.635  &lt; 2e-16 ***\nDESTIN_GRID_ID772   1.944064   0.220494     8.817  &lt; 2e-16 ***\nDESTIN_GRID_ID784   0.182601   0.221331     0.825 0.409364    \nDESTIN_GRID_ID785   2.501951   0.217427    11.507  &lt; 2e-16 ***\nDESTIN_GRID_ID786   1.792806   0.217634     8.238  &lt; 2e-16 ***\nDESTIN_GRID_ID787   1.874840   0.218163     8.594  &lt; 2e-16 ***\nDESTIN_GRID_ID788   2.416667   0.217641    11.104  &lt; 2e-16 ***\nDESTIN_GRID_ID789   1.046545   0.218674     4.786 1.70e-06 ***\nDESTIN_GRID_ID803  -1.041029   0.257782    -4.038 5.38e-05 ***\nDESTIN_GRID_ID804   3.274201   0.217446    15.058  &lt; 2e-16 ***\nDESTIN_GRID_ID805   4.215767   0.217282    19.402  &lt; 2e-16 ***\nDESTIN_GRID_ID806   2.493875   0.217441    11.469  &lt; 2e-16 ***\nDESTIN_GRID_ID807   3.251170   0.217431    14.953  &lt; 2e-16 ***\nDESTIN_GRID_ID808   0.878457   0.220008     3.993 6.53e-05 ***\nDESTIN_GRID_ID809   3.038337   0.217367    13.978  &lt; 2e-16 ***\nDESTIN_GRID_ID810   2.349050   0.217601    10.795  &lt; 2e-16 ***\nDESTIN_GRID_ID814   2.074618   0.219877     9.435  &lt; 2e-16 ***\nDESTIN_GRID_ID824   0.047311   0.233300     0.203 0.839298    \nDESTIN_GRID_ID826   0.796510   0.218557     3.644 0.000268 ***\nDESTIN_GRID_ID827   2.830573   0.217405    13.020  &lt; 2e-16 ***\nDESTIN_GRID_ID828   2.842846   0.217375    13.078  &lt; 2e-16 ***\nDESTIN_GRID_ID829   2.633304   0.217505    12.107  &lt; 2e-16 ***\nDESTIN_GRID_ID830   2.152569   0.217676     9.889  &lt; 2e-16 ***\nDESTIN_GRID_ID831   4.451471   0.217284    20.487  &lt; 2e-16 ***\nDESTIN_GRID_ID832   3.762610   0.217391    17.308  &lt; 2e-16 ***\nDESTIN_GRID_ID835  -0.602745   0.249400    -2.417 0.015659 *  \nDESTIN_GRID_ID844  -1.003172   0.301139    -3.331 0.000865 ***\nDESTIN_GRID_ID846   2.581984   0.217524    11.870  &lt; 2e-16 ***\nDESTIN_GRID_ID847   3.378571   0.217366    15.543  &lt; 2e-16 ***\nDESTIN_GRID_ID848   2.407369   0.217466    11.070  &lt; 2e-16 ***\nDESTIN_GRID_ID849   1.549197   0.217772     7.114 1.13e-12 ***\nDESTIN_GRID_ID850   2.627594   0.217446    12.084  &lt; 2e-16 ***\nDESTIN_GRID_ID851   2.663853   0.217406    12.253  &lt; 2e-16 ***\nDESTIN_GRID_ID852   2.132774   0.217635     9.800  &lt; 2e-16 ***\nDESTIN_GRID_ID853   4.135971   0.217426    19.022  &lt; 2e-16 ***\nDESTIN_GRID_ID854  -0.054968   0.239414    -0.230 0.818406    \nDESTIN_GRID_ID855  -0.982800   0.251738    -3.904 9.46e-05 ***\nDESTIN_GRID_ID856   0.938685   0.222898     4.211 2.54e-05 ***\nDESTIN_GRID_ID866   1.158740   0.222300     5.212 1.86e-07 ***\nDESTIN_GRID_ID867   1.339966   0.218624     6.129 8.84e-10 ***\nDESTIN_GRID_ID868   1.938469   0.218031     8.891  &lt; 2e-16 ***\nDESTIN_GRID_ID869   2.686300   0.217883    12.329  &lt; 2e-16 ***\nDESTIN_GRID_ID870   3.997240   0.217286    18.396  &lt; 2e-16 ***\nDESTIN_GRID_ID871   3.750014   0.217400    17.249  &lt; 2e-16 ***\nDESTIN_GRID_ID872   0.726851   0.218637     3.324 0.000886 ***\nDESTIN_GRID_ID873   2.057027   0.217831     9.443  &lt; 2e-16 ***\nDESTIN_GRID_ID874   0.989857   0.218333     4.534 5.80e-06 ***\nDESTIN_GRID_ID875  -1.000112   0.271210    -3.688 0.000226 ***\nDESTIN_GRID_ID876  -0.699769   0.239415    -2.923 0.003469 ** \nDESTIN_GRID_ID877   1.431823   0.220121     6.505 7.79e-11 ***\nDESTIN_GRID_ID887   1.503585   0.218419     6.884 5.82e-12 ***\nDESTIN_GRID_ID888   1.904028   0.217834     8.741  &lt; 2e-16 ***\nDESTIN_GRID_ID889  -0.305490   0.227269    -1.344 0.178891    \nDESTIN_GRID_ID890   3.075157   0.217376    14.147  &lt; 2e-16 ***\nDESTIN_GRID_ID891   1.803346   0.218373     8.258  &lt; 2e-16 ***\nDESTIN_GRID_ID893   2.972245   0.217365    13.674  &lt; 2e-16 ***\nDESTIN_GRID_ID894   0.618534   0.218970     2.825 0.004732 ** \nDESTIN_GRID_ID895   0.863383   0.219736     3.929 8.52e-05 ***\nDESTIN_GRID_ID896  -0.398306   0.228441    -1.744 0.081231 .  \nDESTIN_GRID_ID897   0.602017   0.220462     2.731 0.006320 ** \nDESTIN_GRID_ID898   0.497742   0.225727     2.205 0.027450 *  \nDESTIN_GRID_ID908   2.040105   0.219626     9.289  &lt; 2e-16 ***\nDESTIN_GRID_ID909   2.138153   0.217561     9.828  &lt; 2e-16 ***\nDESTIN_GRID_ID910  -0.653070   0.224863    -2.904 0.003681 ** \nDESTIN_GRID_ID911   2.065987   0.217740     9.488  &lt; 2e-16 ***\nDESTIN_GRID_ID912   2.800953   0.217420    12.883  &lt; 2e-16 ***\nDESTIN_GRID_ID915   2.575813   0.217434    11.846  &lt; 2e-16 ***\nDESTIN_GRID_ID917   2.621764   0.217763    12.040  &lt; 2e-16 ***\nDESTIN_GRID_ID918  -1.503167   0.245719    -6.117 9.51e-10 ***\nDESTIN_GRID_ID919   0.697499   0.219491     3.178 0.001484 ** \nDESTIN_GRID_ID928   1.963217   0.218176     8.998  &lt; 2e-16 ***\nDESTIN_GRID_ID929   2.632506   0.217448    12.106  &lt; 2e-16 ***\nDESTIN_GRID_ID930   3.582562   0.217314    16.486  &lt; 2e-16 ***\nDESTIN_GRID_ID931   0.056718   0.222388     0.255 0.798690    \nDESTIN_GRID_ID932   0.561724   0.221211     2.539 0.011107 *  \nDESTIN_GRID_ID933   2.378504   0.217665    10.927  &lt; 2e-16 ***\nDESTIN_GRID_ID934  -0.378868   0.223193    -1.697 0.089604 .  \nDESTIN_GRID_ID935   4.498157   0.217275    20.703  &lt; 2e-16 ***\nDESTIN_GRID_ID938  -2.570836   0.415051    -6.194 5.86e-10 ***\nDESTIN_GRID_ID939   4.279892   0.217355    19.691  &lt; 2e-16 ***\nDESTIN_GRID_ID940  -1.950323   0.260860    -7.477 7.63e-14 ***\nDESTIN_GRID_ID949   1.970919   0.218092     9.037  &lt; 2e-16 ***\nDESTIN_GRID_ID950   3.699675   0.217381    17.019  &lt; 2e-16 ***\nDESTIN_GRID_ID951   4.481155   0.217276    20.624  &lt; 2e-16 ***\nDESTIN_GRID_ID952   0.271311   0.222604     1.219 0.222918    \nDESTIN_GRID_ID953   1.789932   0.218153     8.205 2.31e-16 ***\nDESTIN_GRID_ID954   0.464623   0.219626     2.116 0.034385 *  \nDESTIN_GRID_ID955   3.310637   0.217390    15.229  &lt; 2e-16 ***\nDESTIN_GRID_ID956   1.029198   0.218279     4.715 2.42e-06 ***\nDESTIN_GRID_ID957   2.803950   0.217458    12.894  &lt; 2e-16 ***\nDESTIN_GRID_ID959  -0.251158   0.236862    -1.060 0.288982    \nDESTIN_GRID_ID961  -0.128538   0.223083    -0.576 0.564486    \nDESTIN_GRID_ID962   4.511943   0.217391    20.755  &lt; 2e-16 ***\nDESTIN_GRID_ID970   2.241194   0.217659    10.297  &lt; 2e-16 ***\nDESTIN_GRID_ID971   2.987229   0.217364    13.743  &lt; 2e-16 ***\nDESTIN_GRID_ID972   2.789348   0.217425    12.829  &lt; 2e-16 ***\nDESTIN_GRID_ID974   2.171493   0.217746     9.973  &lt; 2e-16 ***\nDESTIN_GRID_ID975   1.443343   0.218207     6.615 3.73e-11 ***\nDESTIN_GRID_ID976   1.327170   0.218291     6.080 1.20e-09 ***\nDESTIN_GRID_ID977   2.768681   0.217400    12.735  &lt; 2e-16 ***\nDESTIN_GRID_ID978   2.627482   0.217660    12.072  &lt; 2e-16 ***\nDESTIN_GRID_ID982   0.218053   0.219770     0.992 0.321107    \nDESTIN_GRID_ID991   2.445136   0.217732    11.230  &lt; 2e-16 ***\nDESTIN_GRID_ID992   2.602569   0.217548    11.963  &lt; 2e-16 ***\nDESTIN_GRID_ID993   1.606880   0.217809     7.377 1.61e-13 ***\nDESTIN_GRID_ID994   1.881004   0.217812     8.636  &lt; 2e-16 ***\nDESTIN_GRID_ID995   2.596794   0.217534    11.937  &lt; 2e-16 ***\nDESTIN_GRID_ID996   1.852981   0.217956     8.502  &lt; 2e-16 ***\nDESTIN_GRID_ID997   0.967990   0.221160     4.377 1.20e-05 ***\nDESTIN_GRID_ID998   3.284864   0.217388    15.111  &lt; 2e-16 ***\nDESTIN_GRID_ID999   2.618020   0.217561    12.033  &lt; 2e-16 ***\nDESTIN_GRID_ID1001  0.573557   0.223757     2.563 0.010368 *  \nDESTIN_GRID_ID1003  3.505504   0.217359    16.128  &lt; 2e-16 ***\nDESTIN_GRID_ID1004  3.440701   0.217373    15.829  &lt; 2e-16 ***\nDESTIN_GRID_ID1011  0.681272   0.223961     3.042 0.002351 ** \nDESTIN_GRID_ID1012  2.473638   0.218121    11.341  &lt; 2e-16 ***\nDESTIN_GRID_ID1013  1.463857   0.218289     6.706 2.00e-11 ***\nDESTIN_GRID_ID1014  1.483448   0.218201     6.799 1.06e-11 ***\nDESTIN_GRID_ID1015  0.522771   0.219650     2.380 0.017312 *  \nDESTIN_GRID_ID1016  3.657641   0.217346    16.829  &lt; 2e-16 ***\nDESTIN_GRID_ID1018  1.643357   0.218490     7.521 5.42e-14 ***\nDESTIN_GRID_ID1019  3.096499   0.217428    14.242  &lt; 2e-16 ***\nDESTIN_GRID_ID1023  2.018419   0.218045     9.257  &lt; 2e-16 ***\nDESTIN_GRID_ID1024  2.743423   0.217487    12.614  &lt; 2e-16 ***\nDESTIN_GRID_ID1025  0.084643   0.223765     0.378 0.705233    \nDESTIN_GRID_ID1033  1.641457   0.218403     7.516 5.66e-14 ***\nDESTIN_GRID_ID1034  2.468276   0.217614    11.342  &lt; 2e-16 ***\nDESTIN_GRID_ID1035  2.875913   0.217482    13.224  &lt; 2e-16 ***\nDESTIN_GRID_ID1036  2.697805   0.217535    12.402  &lt; 2e-16 ***\nDESTIN_GRID_ID1037  2.704532   0.217458    12.437  &lt; 2e-16 ***\nDESTIN_GRID_ID1043  2.359566   0.218534    10.797  &lt; 2e-16 ***\nDESTIN_GRID_ID1045  2.937017   0.217410    13.509  &lt; 2e-16 ***\nDESTIN_GRID_ID1046  2.940761   0.217512    13.520  &lt; 2e-16 ***\nDESTIN_GRID_ID1053  3.176925   0.217512    14.606  &lt; 2e-16 ***\nDESTIN_GRID_ID1054  1.966292   0.217879     9.025  &lt; 2e-16 ***\nDESTIN_GRID_ID1055  2.922665   0.217483    13.439  &lt; 2e-16 ***\nDESTIN_GRID_ID1056  1.982372   0.217907     9.097  &lt; 2e-16 ***\nDESTIN_GRID_ID1064 -1.453007   0.286011    -5.080 3.77e-07 ***\nDESTIN_GRID_ID1066  3.324998   0.217375    15.296  &lt; 2e-16 ***\nDESTIN_GRID_ID1067 -2.131213   0.292702    -7.281 3.31e-13 ***\nDESTIN_GRID_ID1074  2.419503   0.217850    11.106  &lt; 2e-16 ***\nDESTIN_GRID_ID1075  0.976165   0.219617     4.445 8.80e-06 ***\nDESTIN_GRID_ID1076  1.271437   0.218276     5.825 5.71e-09 ***\nDESTIN_GRID_ID1077  1.711574   0.218030     7.850 4.15e-15 ***\nDESTIN_GRID_ID1079  3.020109   0.217450    13.889  &lt; 2e-16 ***\nDESTIN_GRID_ID1085 -0.574577   0.320622    -1.792 0.073122 .  \nDESTIN_GRID_ID1087  2.298505   0.217572    10.564  &lt; 2e-16 ***\nDESTIN_GRID_ID1088  0.692574   0.218880     3.164 0.001555 ** \nDESTIN_GRID_ID1094  0.373597   0.227057     1.645 0.099890 .  \nDESTIN_GRID_ID1095  0.966674   0.224557     4.305 1.67e-05 ***\nDESTIN_GRID_ID1096  0.772314   0.227879     3.389 0.000701 ***\nDESTIN_GRID_ID1097  3.510682   0.217361    16.151  &lt; 2e-16 ***\nDESTIN_GRID_ID1098  0.959616   0.220064     4.361 1.30e-05 ***\nDESTIN_GRID_ID1099  2.353959   0.217632    10.816  &lt; 2e-16 ***\nDESTIN_GRID_ID1105  3.928056   0.217993    18.019  &lt; 2e-16 ***\nDESTIN_GRID_ID1106 -1.306378   0.276978    -4.717 2.40e-06 ***\nDESTIN_GRID_ID1107  2.149392   0.218095     9.855  &lt; 2e-16 ***\nDESTIN_GRID_ID1108  5.045658   0.217286    23.221  &lt; 2e-16 ***\nDESTIN_GRID_ID1109  0.381048   0.222957     1.709 0.087438 .  \nDESTIN_GRID_ID1116  1.674000   0.218421     7.664 1.80e-14 ***\nDESTIN_GRID_ID1117  1.610119   0.218680     7.363 1.80e-13 ***\nDESTIN_GRID_ID1118  1.901453   0.218439     8.705  &lt; 2e-16 ***\nDESTIN_GRID_ID1119  2.134086   0.217764     9.800  &lt; 2e-16 ***\nDESTIN_GRID_ID1120  1.696783   0.218535     7.764 8.21e-15 ***\nDESTIN_GRID_ID1129  2.746722   0.217493    12.629  &lt; 2e-16 ***\nDESTIN_GRID_ID1130  2.704634   0.217454    12.438  &lt; 2e-16 ***\nDESTIN_GRID_ID1131  2.214493   0.218445    10.138  &lt; 2e-16 ***\nDESTIN_GRID_ID1136  1.425054   0.218884     6.511 7.49e-11 ***\nDESTIN_GRID_ID1138  0.796903   0.221435     3.599 0.000320 ***\nDESTIN_GRID_ID1139  2.907951   0.217428    13.374  &lt; 2e-16 ***\nDESTIN_GRID_ID1141  2.434070   0.217622    11.185  &lt; 2e-16 ***\nDESTIN_GRID_ID1148 -0.648422   0.249820    -2.596 0.009444 ** \nDESTIN_GRID_ID1149  1.271060   0.219498     5.791 7.01e-09 ***\nDESTIN_GRID_ID1150  2.857115   0.217405    13.142  &lt; 2e-16 ***\nDESTIN_GRID_ID1151  1.946182   0.217855     8.933  &lt; 2e-16 ***\nDESTIN_GRID_ID1158  1.366977   0.218446     6.258 3.91e-10 ***\nDESTIN_GRID_ID1159  2.534575   0.217527    11.652  &lt; 2e-16 ***\nDESTIN_GRID_ID1160  3.455774   0.217357    15.899  &lt; 2e-16 ***\nDESTIN_GRID_ID1171  3.357616   0.217444    15.441  &lt; 2e-16 ***\nDESTIN_GRID_ID1172  3.925554   0.217343    18.062  &lt; 2e-16 ***\nDESTIN_GRID_ID1173  1.102249   0.219297     5.026 5.00e-07 ***\nDESTIN_GRID_ID1178  2.416948   0.217656    11.104  &lt; 2e-16 ***\nDESTIN_GRID_ID1179  3.132536   0.217400    14.409  &lt; 2e-16 ***\nDESTIN_GRID_ID1180  3.304391   0.217368    15.202  &lt; 2e-16 ***\nDESTIN_GRID_ID1181  2.338993   0.217577    10.750  &lt; 2e-16 ***\nDESTIN_GRID_ID1183  1.450799   0.218523     6.639 3.16e-11 ***\nDESTIN_GRID_ID1190  1.566313   0.222565     7.038 1.96e-12 ***\nDESTIN_GRID_ID1192  2.631195   0.217548    12.095  &lt; 2e-16 ***\nDESTIN_GRID_ID1193  2.269269   0.217676    10.425  &lt; 2e-16 ***\nDESTIN_GRID_ID1194  0.700691   0.221113     3.169 0.001530 ** \nDESTIN_GRID_ID1200  2.376150   0.217667    10.916  &lt; 2e-16 ***\nDESTIN_GRID_ID1201  2.993618   0.217438    13.768  &lt; 2e-16 ***\nDESTIN_GRID_ID1203  2.538555   0.217597    11.666  &lt; 2e-16 ***\nDESTIN_GRID_ID1204  1.836014   0.217972     8.423  &lt; 2e-16 ***\nDESTIN_GRID_ID1211 -1.098915   0.320835    -3.425 0.000614 ***\nDESTIN_GRID_ID1214  2.838862   0.217497    13.052  &lt; 2e-16 ***\nDESTIN_GRID_ID1215 -1.018842   0.253897    -4.013 6.00e-05 ***\nDESTIN_GRID_ID1216  0.652168   0.224114     2.910 0.003614 ** \nDESTIN_GRID_ID1220  3.043480   0.217442    13.997  &lt; 2e-16 ***\nDESTIN_GRID_ID1221  2.990409   0.217406    13.755  &lt; 2e-16 ***\nDESTIN_GRID_ID1222  2.479458   0.218002    11.374  &lt; 2e-16 ***\nDESTIN_GRID_ID1223  1.955953   0.217916     8.976  &lt; 2e-16 ***\nDESTIN_GRID_ID1224  2.202491   0.217737    10.115  &lt; 2e-16 ***\nDESTIN_GRID_ID1231  0.704959   0.226100     3.118 0.001821 ** \nDESTIN_GRID_ID1232  0.890071   0.230313     3.865 0.000111 ***\nDESTIN_GRID_ID1235  0.347122   0.219934     1.578 0.114496    \nDESTIN_GRID_ID1236  1.621742   0.218566     7.420 1.17e-13 ***\nDESTIN_GRID_ID1241  1.739520   0.218001     7.979 1.47e-15 ***\nDESTIN_GRID_ID1242  2.346992   0.217613    10.785  &lt; 2e-16 ***\nDESTIN_GRID_ID1243  2.980373   0.217418    13.708  &lt; 2e-16 ***\nDESTIN_GRID_ID1246  2.628734   0.217548    12.083  &lt; 2e-16 ***\nDESTIN_GRID_ID1256  1.673128   0.218030     7.674 1.67e-14 ***\nDESTIN_GRID_ID1257  2.385438   0.217812    10.952  &lt; 2e-16 ***\nDESTIN_GRID_ID1258  1.417822   0.219417     6.462 1.03e-10 ***\nDESTIN_GRID_ID1262  1.366924   0.218260     6.263 3.78e-10 ***\nDESTIN_GRID_ID1263  3.265236   0.217353    15.023  &lt; 2e-16 ***\nDESTIN_GRID_ID1264  1.974578   0.217950     9.060  &lt; 2e-16 ***\nDESTIN_GRID_ID1265  2.038449   0.217944     9.353  &lt; 2e-16 ***\nDESTIN_GRID_ID1266  2.265671   0.217767    10.404  &lt; 2e-16 ***\nDESTIN_GRID_ID1267  1.804140   0.218551     8.255  &lt; 2e-16 ***\nDESTIN_GRID_ID1272 -1.450808   0.272529    -5.323 1.02e-07 ***\nDESTIN_GRID_ID1273  1.950229   0.218247     8.936  &lt; 2e-16 ***\nDESTIN_GRID_ID1277  3.333571   0.217405    15.333  &lt; 2e-16 ***\nDESTIN_GRID_ID1278  1.009600   0.218967     4.611 4.01e-06 ***\nDESTIN_GRID_ID1283  4.600992   0.217295    21.174  &lt; 2e-16 ***\nDESTIN_GRID_ID1284  2.969692   0.217421    13.659  &lt; 2e-16 ***\nDESTIN_GRID_ID1285  3.530772   0.217349    16.245  &lt; 2e-16 ***\nDESTIN_GRID_ID1286  1.668090   0.218341     7.640 2.18e-14 ***\nDESTIN_GRID_ID1289 -0.005921   0.228708    -0.026 0.979344    \nDESTIN_GRID_ID1293 -0.647262   0.244710    -2.645 0.008169 ** \nDESTIN_GRID_ID1294  3.125280   0.217648    14.359  &lt; 2e-16 ***\nDESTIN_GRID_ID1295  0.846133   0.220626     3.835 0.000125 ***\nDESTIN_GRID_ID1298  2.064723   0.217736     9.483  &lt; 2e-16 ***\nDESTIN_GRID_ID1299  2.725331   0.217607    12.524  &lt; 2e-16 ***\nDESTIN_GRID_ID1304  3.274870   0.217402    15.064  &lt; 2e-16 ***\nDESTIN_GRID_ID1305  2.980784   0.217378    13.712  &lt; 2e-16 ***\nDESTIN_GRID_ID1307  1.487474   0.220355     6.750 1.47e-11 ***\nDESTIN_GRID_ID1308  2.773661   0.217504    12.752  &lt; 2e-16 ***\nDESTIN_GRID_ID1310 -0.926665   0.269922    -3.433 0.000597 ***\nDESTIN_GRID_ID1316  0.165474   0.222361     0.744 0.456776    \nDESTIN_GRID_ID1317  0.887276   0.218756     4.056 4.99e-05 ***\nDESTIN_GRID_ID1318  0.371852   0.220118     1.689 0.091156 .  \nDESTIN_GRID_ID1319  3.871227   0.217355    17.811  &lt; 2e-16 ***\nDESTIN_GRID_ID1320  1.567053   0.218733     7.164 7.82e-13 ***\nDESTIN_GRID_ID1324  3.460347   0.218291    15.852  &lt; 2e-16 ***\nDESTIN_GRID_ID1325  1.184399   0.218495     5.421 5.94e-08 ***\nDESTIN_GRID_ID1326  2.940755   0.217412    13.526  &lt; 2e-16 ***\nDESTIN_GRID_ID1327  2.827000   0.217424    13.002  &lt; 2e-16 ***\nDESTIN_GRID_ID1328  2.227999   0.217613    10.238  &lt; 2e-16 ***\nDESTIN_GRID_ID1329  2.408584   0.217790    11.059  &lt; 2e-16 ***\nDESTIN_GRID_ID1330  3.190356   0.217666    14.657  &lt; 2e-16 ***\nDESTIN_GRID_ID1331 -1.258490   0.311779    -4.036 5.43e-05 ***\nDESTIN_GRID_ID1333  1.467909   0.218809     6.709 1.96e-11 ***\nDESTIN_GRID_ID1334  1.838101   0.218410     8.416  &lt; 2e-16 ***\nDESTIN_GRID_ID1335  1.513548   0.218957     6.913 4.76e-12 ***\nDESTIN_GRID_ID1336 -0.258219   0.247581    -1.043 0.296963    \nDESTIN_GRID_ID1337  0.589157   0.221558     2.659 0.007834 ** \nDESTIN_GRID_ID1338 -1.858462   0.249271    -7.456 8.95e-14 ***\nDESTIN_GRID_ID1339  3.655953   0.217354    16.820  &lt; 2e-16 ***\nDESTIN_GRID_ID1340  2.956476   0.217520    13.592  &lt; 2e-16 ***\nDESTIN_GRID_ID1341 -1.846456   0.415021    -4.449 8.62e-06 ***\nDESTIN_GRID_ID1346  2.411764   0.217754    11.076  &lt; 2e-16 ***\nDESTIN_GRID_ID1347  4.125492   0.217314    18.984  &lt; 2e-16 ***\nDESTIN_GRID_ID1348  2.887891   0.217424    13.282  &lt; 2e-16 ***\nDESTIN_GRID_ID1349  3.517156   0.217378    16.180  &lt; 2e-16 ***\nDESTIN_GRID_ID1350  1.471487   0.218866     6.723 1.78e-11 ***\nDESTIN_GRID_ID1353  2.700194   0.217551    12.412  &lt; 2e-16 ***\nDESTIN_GRID_ID1354  0.867611   0.219280     3.957 7.60e-05 ***\nDESTIN_GRID_ID1355  1.906922   0.218025     8.746  &lt; 2e-16 ***\nDESTIN_GRID_ID1357  0.567233   0.222445     2.550 0.010772 *  \nDESTIN_GRID_ID1358  3.592776   0.217379    16.528  &lt; 2e-16 ***\nDESTIN_GRID_ID1359  2.292596   0.217536    10.539  &lt; 2e-16 ***\nDESTIN_GRID_ID1360  1.836555   0.217704     8.436  &lt; 2e-16 ***\nDESTIN_GRID_ID1361  3.126010   0.217494    14.373  &lt; 2e-16 ***\nDESTIN_GRID_ID1362 -0.816280   0.259305    -3.148 0.001644 ** \nDESTIN_GRID_ID1368  1.937047   0.217731     8.896  &lt; 2e-16 ***\nDESTIN_GRID_ID1369  1.873033   0.217704     8.604  &lt; 2e-16 ***\nDESTIN_GRID_ID1370  4.232541   0.217290    19.479  &lt; 2e-16 ***\nDESTIN_GRID_ID1371  2.087646   0.217755     9.587  &lt; 2e-16 ***\nDESTIN_GRID_ID1372  0.899660   0.219403     4.100 4.12e-05 ***\nDESTIN_GRID_ID1373  0.348301   0.223233     1.560 0.118698    \nDESTIN_GRID_ID1374  1.590813   0.218072     7.295 2.99e-13 ***\nDESTIN_GRID_ID1375  2.914677   0.217621    13.393  &lt; 2e-16 ***\nDESTIN_GRID_ID1376  1.358407   0.219217     6.197 5.77e-10 ***\nDESTIN_GRID_ID1379  0.684216   0.222004     3.082 0.002056 ** \nDESTIN_GRID_ID1380  3.775058   0.217335    17.370  &lt; 2e-16 ***\nDESTIN_GRID_ID1381  4.141591   0.217313    19.058  &lt; 2e-16 ***\nDESTIN_GRID_ID1382  3.166897   0.217464    14.563  &lt; 2e-16 ***\nDESTIN_GRID_ID1383  0.631448   0.220372     2.865 0.004165 ** \nDESTIN_GRID_ID1388  2.450265   0.217554    11.263  &lt; 2e-16 ***\nDESTIN_GRID_ID1389  2.093301   0.217614     9.619  &lt; 2e-16 ***\nDESTIN_GRID_ID1390  2.505632   0.217498    11.520  &lt; 2e-16 ***\nDESTIN_GRID_ID1391  3.057996   0.217421    14.065  &lt; 2e-16 ***\nDESTIN_GRID_ID1392  1.847513   0.220879     8.364  &lt; 2e-16 ***\nDESTIN_GRID_ID1393  0.555470   0.219719     2.528 0.011469 *  \nDESTIN_GRID_ID1394  2.486595   0.217536    11.431  &lt; 2e-16 ***\nDESTIN_GRID_ID1395  2.634593   0.217488    12.114  &lt; 2e-16 ***\nDESTIN_GRID_ID1396  3.081008   0.217431    14.170  &lt; 2e-16 ***\nDESTIN_GRID_ID1397  2.820628   0.217491    12.969  &lt; 2e-16 ***\nDESTIN_GRID_ID1398  1.766079   0.218719     8.075 6.77e-16 ***\nDESTIN_GRID_ID1400  2.208248   0.217780    10.140  &lt; 2e-16 ***\nDESTIN_GRID_ID1401  3.371145   0.217342    15.511  &lt; 2e-16 ***\nDESTIN_GRID_ID1402  2.516527   0.217497    11.570  &lt; 2e-16 ***\nDESTIN_GRID_ID1404  3.547571   0.218224    16.257  &lt; 2e-16 ***\nDESTIN_GRID_ID1410  2.840784   0.217423    13.066  &lt; 2e-16 ***\nDESTIN_GRID_ID1411  2.236491   0.217619    10.277  &lt; 2e-16 ***\nDESTIN_GRID_ID1412  3.902922   0.217305    17.961  &lt; 2e-16 ***\nDESTIN_GRID_ID1413  2.857228   0.217435    13.141  &lt; 2e-16 ***\nDESTIN_GRID_ID1414  2.119221   0.217597     9.739  &lt; 2e-16 ***\nDESTIN_GRID_ID1415  2.062379   0.217685     9.474  &lt; 2e-16 ***\nDESTIN_GRID_ID1416  2.152602   0.217673     9.889  &lt; 2e-16 ***\nDESTIN_GRID_ID1417  2.046815   0.217614     9.406  &lt; 2e-16 ***\nDESTIN_GRID_ID1418  2.726008   0.217472    12.535  &lt; 2e-16 ***\nDESTIN_GRID_ID1419  2.119173   0.217788     9.730  &lt; 2e-16 ***\nDESTIN_GRID_ID1422  2.414483   0.217535    11.099  &lt; 2e-16 ***\nDESTIN_GRID_ID1423  2.797919   0.217464    12.866  &lt; 2e-16 ***\nDESTIN_GRID_ID1430  2.844156   0.217547    13.074  &lt; 2e-16 ***\nDESTIN_GRID_ID1431  4.437271   0.217289    20.421  &lt; 2e-16 ***\nDESTIN_GRID_ID1432  3.523094   0.217325    16.211  &lt; 2e-16 ***\nDESTIN_GRID_ID1433  1.132549   0.219089     5.169 2.35e-07 ***\nDESTIN_GRID_ID1434  3.338303   0.217363    15.358  &lt; 2e-16 ***\nDESTIN_GRID_ID1435  2.815543   0.217404    12.951  &lt; 2e-16 ***\nDESTIN_GRID_ID1436  0.409338   0.220173     1.859 0.063004 .  \nDESTIN_GRID_ID1437  2.974147   0.217411    13.680  &lt; 2e-16 ***\nDESTIN_GRID_ID1438  3.385896   0.217333    15.579  &lt; 2e-16 ***\nDESTIN_GRID_ID1439  3.497308   0.217358    16.090  &lt; 2e-16 ***\nDESTIN_GRID_ID1440  0.756272   0.220781     3.425 0.000614 ***\nDESTIN_GRID_ID1442  1.715235   0.218114     7.864 3.72e-15 ***\nDESTIN_GRID_ID1443  2.620206   0.217497    12.047  &lt; 2e-16 ***\nDESTIN_GRID_ID1444  1.880526   0.218230     8.617  &lt; 2e-16 ***\nDESTIN_GRID_ID1452  2.913505   0.217432    13.400  &lt; 2e-16 ***\nDESTIN_GRID_ID1453  3.117357   0.217376    14.341  &lt; 2e-16 ***\nDESTIN_GRID_ID1454  2.370901   0.217629    10.894  &lt; 2e-16 ***\nDESTIN_GRID_ID1455  1.947098   0.217783     8.941  &lt; 2e-16 ***\nDESTIN_GRID_ID1456  2.872762   0.217431    13.212  &lt; 2e-16 ***\nDESTIN_GRID_ID1457  3.418145   0.217375    15.725  &lt; 2e-16 ***\nDESTIN_GRID_ID1458  4.257586   0.217296    19.594  &lt; 2e-16 ***\nDESTIN_GRID_ID1459  2.309598   0.217497    10.619  &lt; 2e-16 ***\nDESTIN_GRID_ID1460  3.045034   0.217376    14.008  &lt; 2e-16 ***\nDESTIN_GRID_ID1461  1.544385   0.218470     7.069 1.56e-12 ***\nDESTIN_GRID_ID1464  2.822629   0.217505    12.977  &lt; 2e-16 ***\nDESTIN_GRID_ID1465  2.241149   0.217736    10.293  &lt; 2e-16 ***\nDESTIN_GRID_ID1472  1.826191   0.218213     8.369  &lt; 2e-16 ***\nDESTIN_GRID_ID1473  2.415050   0.217532    11.102  &lt; 2e-16 ***\nDESTIN_GRID_ID1474  3.706151   0.217306    17.055  &lt; 2e-16 ***\nDESTIN_GRID_ID1475  3.827393   0.217309    17.613  &lt; 2e-16 ***\nDESTIN_GRID_ID1476  2.418248   0.217524    11.117  &lt; 2e-16 ***\nDESTIN_GRID_ID1477  4.389964   0.217280    20.204  &lt; 2e-16 ***\nDESTIN_GRID_ID1478  1.923448   0.217620     8.839  &lt; 2e-16 ***\nDESTIN_GRID_ID1479  2.051970   0.217563     9.432  &lt; 2e-16 ***\nDESTIN_GRID_ID1480  4.288502   0.217288    19.737  &lt; 2e-16 ***\nDESTIN_GRID_ID1481  1.056402   0.218631     4.832 1.35e-06 ***\nDESTIN_GRID_ID1482  1.169957   0.219491     5.330 9.80e-08 ***\nDESTIN_GRID_ID1485  1.548669   0.218134     7.100 1.25e-12 ***\nDESTIN_GRID_ID1494  1.770515   0.218034     8.120 4.65e-16 ***\nDESTIN_GRID_ID1495  3.014330   0.217385    13.866  &lt; 2e-16 ***\nDESTIN_GRID_ID1496  4.081885   0.217290    18.785  &lt; 2e-16 ***\nDESTIN_GRID_ID1497  3.081816   0.217389    14.177  &lt; 2e-16 ***\nDESTIN_GRID_ID1498  2.839737   0.217422    13.061  &lt; 2e-16 ***\nDESTIN_GRID_ID1499  3.086331   0.217358    14.199  &lt; 2e-16 ***\nDESTIN_GRID_ID1500  2.877438   0.217540    13.227  &lt; 2e-16 ***\nDESTIN_GRID_ID1501  2.990691   0.217374    13.758  &lt; 2e-16 ***\nDESTIN_GRID_ID1502  2.778946   0.217430    12.781  &lt; 2e-16 ***\nDESTIN_GRID_ID1506 -0.185269   0.292722    -0.633 0.526789    \nDESTIN_GRID_ID1514 -2.996914   0.617999    -4.849 1.24e-06 ***\nDESTIN_GRID_ID1515  2.059109   0.219288     9.390  &lt; 2e-16 ***\nDESTIN_GRID_ID1516  3.745849   0.217311    17.237  &lt; 2e-16 ***\nDESTIN_GRID_ID1517  3.529756   0.217373    16.238  &lt; 2e-16 ***\nDESTIN_GRID_ID1518  2.497433   0.217492    11.483  &lt; 2e-16 ***\nDESTIN_GRID_ID1519  2.928824   0.217494    13.466  &lt; 2e-16 ***\nDESTIN_GRID_ID1520  1.594112   0.217811     7.319 2.50e-13 ***\nDESTIN_GRID_ID1521  0.394556   0.219566     1.797 0.072338 .  \nDESTIN_GRID_ID1522  3.288901   0.217361    15.131  &lt; 2e-16 ***\nDESTIN_GRID_ID1523  1.842214   0.218541     8.430  &lt; 2e-16 ***\nDESTIN_GRID_ID1524  2.175313   0.218093     9.974  &lt; 2e-16 ***\nDESTIN_GRID_ID1527  0.872859   0.220389     3.961 7.48e-05 ***\nDESTIN_GRID_ID1535  2.425794   0.226332    10.718  &lt; 2e-16 ***\nDESTIN_GRID_ID1536  2.332564   0.218285    10.686  &lt; 2e-16 ***\nDESTIN_GRID_ID1537  3.174563   0.217398    14.603  &lt; 2e-16 ***\nDESTIN_GRID_ID1538  3.327687   0.217343    15.311  &lt; 2e-16 ***\nDESTIN_GRID_ID1539  2.887835   0.217382    13.285  &lt; 2e-16 ***\nDESTIN_GRID_ID1540  2.779388   0.217400    12.785  &lt; 2e-16 ***\nDESTIN_GRID_ID1541  3.447942   0.217566    15.848  &lt; 2e-16 ***\nDESTIN_GRID_ID1542  1.275917   0.218930     5.828 5.61e-09 ***\nDESTIN_GRID_ID1543  1.622480   0.221270     7.333 2.26e-13 ***\nDESTIN_GRID_ID1544  2.229600   0.217886    10.233  &lt; 2e-16 ***\nDESTIN_GRID_ID1547 -0.292117   0.235985    -1.238 0.215767    \nDESTIN_GRID_ID1556  2.374506   0.220968    10.746  &lt; 2e-16 ***\nDESTIN_GRID_ID1557  3.265568   0.217595    15.008  &lt; 2e-16 ***\nDESTIN_GRID_ID1558  2.709395   0.218584    12.395  &lt; 2e-16 ***\nDESTIN_GRID_ID1559  3.304847   0.217346    15.205  &lt; 2e-16 ***\nDESTIN_GRID_ID1560  3.518210   0.217332    16.188  &lt; 2e-16 ***\nDESTIN_GRID_ID1561  2.751265   0.217525    12.648  &lt; 2e-16 ***\nDESTIN_GRID_ID1562  0.195957   0.220396     0.889 0.373941    \nDESTIN_GRID_ID1563  1.981621   0.217649     9.105  &lt; 2e-16 ***\nDESTIN_GRID_ID1564  0.745074   0.218900     3.404 0.000665 ***\nDESTIN_GRID_ID1565  0.844691   0.219050     3.856 0.000115 ***\nDESTIN_GRID_ID1566  0.670630   0.220278     3.044 0.002331 ** \nDESTIN_GRID_ID1567 -1.235917   0.261727    -4.722 2.33e-06 ***\nDESTIN_GRID_ID1568  0.142014   0.231217     0.614 0.539082    \nDESTIN_GRID_ID1578  1.297956   0.238700     5.438 5.40e-08 ***\nDESTIN_GRID_ID1580  1.758806   0.218268     8.058 7.75e-16 ***\nDESTIN_GRID_ID1581  0.769825   0.218633     3.521 0.000430 ***\nDESTIN_GRID_ID1582  3.041994   0.217367    13.995  &lt; 2e-16 ***\nDESTIN_GRID_ID1583  1.921068   0.219190     8.764  &lt; 2e-16 ***\nDESTIN_GRID_ID1584  1.811537   0.217974     8.311  &lt; 2e-16 ***\nDESTIN_GRID_ID1585  2.884500   0.217500    13.262  &lt; 2e-16 ***\nDESTIN_GRID_ID1586  0.728007   0.218990     3.324 0.000886 ***\nDESTIN_GRID_ID1589 -0.467309   0.234208    -1.995 0.046014 *  \nDESTIN_GRID_ID1590  0.073993   0.234717     0.315 0.752576    \nDESTIN_GRID_ID1600  3.097609   0.218088    14.203  &lt; 2e-16 ***\nDESTIN_GRID_ID1601  2.481915   0.217466    11.413  &lt; 2e-16 ***\nDESTIN_GRID_ID1602  2.703078   0.217479    12.429  &lt; 2e-16 ***\nDESTIN_GRID_ID1603  3.453950   0.217362    15.890  &lt; 2e-16 ***\nDESTIN_GRID_ID1604  1.827419   0.217706     8.394  &lt; 2e-16 ***\nDESTIN_GRID_ID1605  2.858274   0.217399    13.148  &lt; 2e-16 ***\nDESTIN_GRID_ID1606  2.771989   0.217779    12.728  &lt; 2e-16 ***\nDESTIN_GRID_ID1607  0.939675   0.218481     4.301 1.70e-05 ***\nDESTIN_GRID_ID1608  3.076845   0.217452    14.150  &lt; 2e-16 ***\nDESTIN_GRID_ID1609  2.906771   0.217556    13.361  &lt; 2e-16 ***\nDESTIN_GRID_ID1610  0.304347   0.234713     1.297 0.194742    \nDESTIN_GRID_ID1622  2.942045   0.218109    13.489  &lt; 2e-16 ***\nDESTIN_GRID_ID1623  3.345231   0.217338    15.392  &lt; 2e-16 ***\nDESTIN_GRID_ID1624  1.966986   0.217731     9.034  &lt; 2e-16 ***\nDESTIN_GRID_ID1625  3.181167   0.217396    14.633  &lt; 2e-16 ***\nDESTIN_GRID_ID1626  4.632690   0.217281    21.321  &lt; 2e-16 ***\nDESTIN_GRID_ID1627  1.752426   0.217702     8.050 8.30e-16 ***\nDESTIN_GRID_ID1628  3.482816   0.217363    16.023  &lt; 2e-16 ***\nDESTIN_GRID_ID1629  1.760337   0.217927     8.078 6.60e-16 ***\nDESTIN_GRID_ID1630  1.973715   0.217858     9.060  &lt; 2e-16 ***\nDESTIN_GRID_ID1631 -0.986538   0.242859    -4.062 4.86e-05 ***\nDESTIN_GRID_ID1642  0.822525   0.221933     3.706 0.000210 ***\nDESTIN_GRID_ID1643  2.929079   0.217411    13.473  &lt; 2e-16 ***\nDESTIN_GRID_ID1644  1.819194   0.218085     8.342  &lt; 2e-16 ***\nDESTIN_GRID_ID1645  2.419139   0.217538    11.121  &lt; 2e-16 ***\nDESTIN_GRID_ID1646  2.051697   0.217924     9.415  &lt; 2e-16 ***\nDESTIN_GRID_ID1647  2.746899   0.217403    12.635  &lt; 2e-16 ***\nDESTIN_GRID_ID1648  2.538327   0.217453    11.673  &lt; 2e-16 ***\nDESTIN_GRID_ID1649  2.797771   0.217419    12.868  &lt; 2e-16 ***\nDESTIN_GRID_ID1650  3.080874   0.217477    14.166  &lt; 2e-16 ***\nDESTIN_GRID_ID1664 -0.535503   0.243221    -2.202 0.027686 *  \nDESTIN_GRID_ID1665  3.317326   0.217346    15.263  &lt; 2e-16 ***\nDESTIN_GRID_ID1666  2.164117   0.217553     9.948  &lt; 2e-16 ***\nDESTIN_GRID_ID1667  1.036173   0.221962     4.668 3.04e-06 ***\nDESTIN_GRID_ID1668  2.728831   0.217434    12.550  &lt; 2e-16 ***\nDESTIN_GRID_ID1670  3.265020   0.217352    15.022  &lt; 2e-16 ***\nDESTIN_GRID_ID1671  3.384537   0.217609    15.553  &lt; 2e-16 ***\nDESTIN_GRID_ID1672  2.585827   0.217687    11.879  &lt; 2e-16 ***\nDESTIN_GRID_ID1684  1.873947   0.218492     8.577  &lt; 2e-16 ***\nDESTIN_GRID_ID1685  2.751418   0.217457    12.653  &lt; 2e-16 ***\nDESTIN_GRID_ID1686  2.532694   0.217476    11.646  &lt; 2e-16 ***\nDESTIN_GRID_ID1687  2.294526   0.217839    10.533  &lt; 2e-16 ***\nDESTIN_GRID_ID1688  1.624138   0.217852     7.455 8.97e-14 ***\nDESTIN_GRID_ID1689  1.455682   0.217973     6.678 2.42e-11 ***\nDESTIN_GRID_ID1690  1.680615   0.217842     7.715 1.21e-14 ***\nDESTIN_GRID_ID1691  2.774263   0.217422    12.760  &lt; 2e-16 ***\nDESTIN_GRID_ID1692  1.973732   0.217928     9.057  &lt; 2e-16 ***\nDESTIN_GRID_ID1706  2.599725   0.217584    11.948  &lt; 2e-16 ***\nDESTIN_GRID_ID1707  2.394430   0.217474    11.010  &lt; 2e-16 ***\nDESTIN_GRID_ID1708  2.761811   0.217423    12.702  &lt; 2e-16 ***\nDESTIN_GRID_ID1709  2.306366   0.217568    10.601  &lt; 2e-16 ***\nDESTIN_GRID_ID1710  2.872241   0.217440    13.209  &lt; 2e-16 ***\nDESTIN_GRID_ID1711  3.887932   0.217323    17.890  &lt; 2e-16 ***\nDESTIN_GRID_ID1712  3.291110   0.217343    15.142  &lt; 2e-16 ***\nDESTIN_GRID_ID1713  1.065639   0.218441     4.878 1.07e-06 ***\nDESTIN_GRID_ID1714  3.065479   0.217471    14.096  &lt; 2e-16 ***\nDESTIN_GRID_ID1726 -1.329754   0.295348    -4.502 6.72e-06 ***\nDESTIN_GRID_ID1727  2.873793   0.217449    13.216  &lt; 2e-16 ***\nDESTIN_GRID_ID1728  3.156185   0.217359    14.521  &lt; 2e-16 ***\nDESTIN_GRID_ID1729  2.354339   0.217517    10.824  &lt; 2e-16 ***\nDESTIN_GRID_ID1730  0.354601   0.220800     1.606 0.108277    \nDESTIN_GRID_ID1731  2.661638   0.217464    12.239  &lt; 2e-16 ***\nDESTIN_GRID_ID1732  2.921409   0.217371    13.440  &lt; 2e-16 ***\nDESTIN_GRID_ID1733  2.427692   0.217467    11.163  &lt; 2e-16 ***\nDESTIN_GRID_ID1734  3.093126   0.217387    14.229  &lt; 2e-16 ***\nDESTIN_GRID_ID1735  3.533747   0.217874    16.219  &lt; 2e-16 ***\nDESTIN_GRID_ID1748  2.036128   0.217741     9.351  &lt; 2e-16 ***\nDESTIN_GRID_ID1749  3.826283   0.217307    17.608  &lt; 2e-16 ***\nDESTIN_GRID_ID1750  2.317434   0.217509    10.654  &lt; 2e-16 ***\nDESTIN_GRID_ID1751  1.080938   0.218642     4.944 7.66e-07 ***\nDESTIN_GRID_ID1753  3.055467   0.217386    14.055  &lt; 2e-16 ***\nDESTIN_GRID_ID1754  4.167153   0.217293    19.178  &lt; 2e-16 ***\nDESTIN_GRID_ID1755  3.231229   0.217353    14.866  &lt; 2e-16 ***\nDESTIN_GRID_ID1756  2.493928   0.217483    11.467  &lt; 2e-16 ***\nDESTIN_GRID_ID1757 -0.062410   0.226092    -0.276 0.782519    \nDESTIN_GRID_ID1768 -0.366146   0.235257    -1.556 0.119620    \nDESTIN_GRID_ID1769  2.405657   0.217512    11.060  &lt; 2e-16 ***\nDESTIN_GRID_ID1770  2.859794   0.217506    13.148  &lt; 2e-16 ***\nDESTIN_GRID_ID1771  2.016142   0.217799     9.257  &lt; 2e-16 ***\nDESTIN_GRID_ID1772  1.486241   0.221740     6.703 2.05e-11 ***\nDESTIN_GRID_ID1774  2.521178   0.217475    11.593  &lt; 2e-16 ***\nDESTIN_GRID_ID1775  2.197879   0.217540    10.103  &lt; 2e-16 ***\nDESTIN_GRID_ID1776  4.174457   0.217300    19.211  &lt; 2e-16 ***\nDESTIN_GRID_ID1777  2.735157   0.217487    12.576  &lt; 2e-16 ***\nDESTIN_GRID_ID1778  2.108198   0.219293     9.614  &lt; 2e-16 ***\nDESTIN_GRID_ID1790  3.592967   0.217360    16.530  &lt; 2e-16 ***\nDESTIN_GRID_ID1791  3.284405   0.217399    15.108  &lt; 2e-16 ***\nDESTIN_GRID_ID1792  2.583798   0.217689    11.869  &lt; 2e-16 ***\nDESTIN_GRID_ID1793  1.704958   0.217972     7.822 5.20e-15 ***\nDESTIN_GRID_ID1794 -0.335159   0.260035    -1.289 0.197432    \nDESTIN_GRID_ID1795 -0.164427   0.225171    -0.730 0.465250    \nDESTIN_GRID_ID1796  2.906811   0.217430    13.369  &lt; 2e-16 ***\nDESTIN_GRID_ID1797  2.904060   0.217396    13.358  &lt; 2e-16 ***\nDESTIN_GRID_ID1798  2.873165   0.217407    13.216  &lt; 2e-16 ***\nDESTIN_GRID_ID1799  2.001082   0.217823     9.187  &lt; 2e-16 ***\nDESTIN_GRID_ID1800  1.933268   0.221576     8.725  &lt; 2e-16 ***\nDESTIN_GRID_ID1811  2.576501   0.217501    11.846  &lt; 2e-16 ***\nDESTIN_GRID_ID1812  3.591149   0.217322    16.525  &lt; 2e-16 ***\nDESTIN_GRID_ID1813  2.963665   0.217398    13.632  &lt; 2e-16 ***\nDESTIN_GRID_ID1817  2.496077   0.217584    11.472  &lt; 2e-16 ***\nDESTIN_GRID_ID1818  2.683279   0.217425    12.341  &lt; 2e-16 ***\nDESTIN_GRID_ID1819  4.158831   0.217309    19.138  &lt; 2e-16 ***\nDESTIN_GRID_ID1820  0.704432   0.220899     3.189 0.001428 ** \nDESTIN_GRID_ID1832  4.095249   0.217321    18.844  &lt; 2e-16 ***\nDESTIN_GRID_ID1833  2.292427   0.217540    10.538  &lt; 2e-16 ***\nDESTIN_GRID_ID1834  2.330531   0.217511    10.715  &lt; 2e-16 ***\nDESTIN_GRID_ID1835  1.528615   0.218131     7.008 2.42e-12 ***\nDESTIN_GRID_ID1837 -0.458689   0.251671    -1.823 0.068368 .  \nDESTIN_GRID_ID1839  2.280798   0.217661    10.479  &lt; 2e-16 ***\nDESTIN_GRID_ID1840  3.886053   0.217321    17.882  &lt; 2e-16 ***\nDESTIN_GRID_ID1841  1.527285   0.218853     6.979 2.98e-12 ***\nDESTIN_GRID_ID1842  3.747740   0.218166    17.178  &lt; 2e-16 ***\nDESTIN_GRID_ID1853  2.588937   0.217465    11.905  &lt; 2e-16 ***\nDESTIN_GRID_ID1854  2.897195   0.217413    13.326  &lt; 2e-16 ***\nDESTIN_GRID_ID1855  3.119138   0.217410    14.347  &lt; 2e-16 ***\nDESTIN_GRID_ID1858 -0.122213   0.236121    -0.518 0.604747    \nDESTIN_GRID_ID1860  3.101277   0.218117    14.218  &lt; 2e-16 ***\nDESTIN_GRID_ID1861  2.627329   0.217505    12.079  &lt; 2e-16 ***\nDESTIN_GRID_ID1874  2.997135   0.217494    13.780  &lt; 2e-16 ***\nDESTIN_GRID_ID1875  1.107095   0.218897     5.058 4.25e-07 ***\nDESTIN_GRID_ID1876  2.989512   0.218413    13.687  &lt; 2e-16 ***\nDESTIN_GRID_ID1877  2.780201   0.217474    12.784  &lt; 2e-16 ***\nDESTIN_GRID_ID1880 -0.358752   0.252730    -1.420 0.155751    \nDESTIN_GRID_ID1882  2.875394   0.217471    13.222  &lt; 2e-16 ***\nDESTIN_GRID_ID1883  2.486236   0.218444    11.382  &lt; 2e-16 ***\nDESTIN_GRID_ID1895  2.573385   0.217520    11.831  &lt; 2e-16 ***\nDESTIN_GRID_ID1896  1.947024   0.217694     8.944  &lt; 2e-16 ***\nDESTIN_GRID_ID1897  1.602161   0.218069     7.347 2.03e-13 ***\nDESTIN_GRID_ID1898 -0.709998   0.248853    -2.853 0.004330 ** \nDESTIN_GRID_ID1901 -0.474849   0.257058    -1.847 0.064712 .  \nDESTIN_GRID_ID1903  2.261170   0.218133    10.366  &lt; 2e-16 ***\nDESTIN_GRID_ID1916  0.132354   0.229577     0.577 0.564269    \nDESTIN_GRID_ID1917  2.032687   0.217707     9.337  &lt; 2e-16 ***\nDESTIN_GRID_ID1918  2.973598   0.217504    13.671  &lt; 2e-16 ***\nDESTIN_GRID_ID1919  3.233072   0.217403    14.871  &lt; 2e-16 ***\nDESTIN_GRID_ID1922  0.208130   0.232643     0.895 0.370983    \nDESTIN_GRID_ID1924  2.236281   0.218182    10.250  &lt; 2e-16 ***\nDESTIN_GRID_ID1937  2.576345   0.217580    11.841  &lt; 2e-16 ***\nDESTIN_GRID_ID1938  2.931377   0.217405    13.484  &lt; 2e-16 ***\nDESTIN_GRID_ID1939  3.027192   0.217449    13.921  &lt; 2e-16 ***\nDESTIN_GRID_ID1942  0.559750   0.227762     2.458 0.013986 *  \nDESTIN_GRID_ID1958 -0.682480   0.255749    -2.669 0.007618 ** \nDESTIN_GRID_ID1959  2.196636   0.217749    10.088  &lt; 2e-16 ***\nDESTIN_GRID_ID1960  4.745018   0.217280    21.838  &lt; 2e-16 ***\nDESTIN_GRID_ID1961  2.233324   0.217696    10.259  &lt; 2e-16 ***\nDESTIN_GRID_ID1962  2.839751   0.217482    13.057  &lt; 2e-16 ***\nDESTIN_GRID_ID1964  0.569890   0.235563     2.419 0.015552 *  \nDESTIN_GRID_ID1979  2.316940   0.217767    10.640  &lt; 2e-16 ***\nDESTIN_GRID_ID1980  0.510194   0.218909     2.331 0.019773 *  \nDESTIN_GRID_ID1981  2.654425   0.217485    12.205  &lt; 2e-16 ***\nDESTIN_GRID_ID1982  1.434836   0.218754     6.559 5.41e-11 ***\nDESTIN_GRID_ID1983  2.936831   0.217465    13.505  &lt; 2e-16 ***\nDESTIN_GRID_ID1984  1.740486   0.218054     7.982 1.44e-15 ***\nDESTIN_GRID_ID1985  2.265258   0.217752    10.403  &lt; 2e-16 ***\nDESTIN_GRID_ID2001  2.594257   0.217537    11.926  &lt; 2e-16 ***\nDESTIN_GRID_ID2002  3.018434   0.217373    13.886  &lt; 2e-16 ***\nDESTIN_GRID_ID2003  3.159106   0.217394    14.532  &lt; 2e-16 ***\nDESTIN_GRID_ID2004  3.490790   0.217380    16.058  &lt; 2e-16 ***\nDESTIN_GRID_ID2005  2.789941   0.217488    12.828  &lt; 2e-16 ***\nDESTIN_GRID_ID2006  3.317619   0.217438    15.258  &lt; 2e-16 ***\nDESTIN_GRID_ID2007  0.733975   0.221531     3.313 0.000922 ***\nDESTIN_GRID_ID2022  2.957356   0.217563    13.593  &lt; 2e-16 ***\nDESTIN_GRID_ID2023  3.340490   0.217372    15.368  &lt; 2e-16 ***\nDESTIN_GRID_ID2024  2.929014   0.217407    13.472  &lt; 2e-16 ***\nDESTIN_GRID_ID2025  2.531716   0.217467    11.642  &lt; 2e-16 ***\nDESTIN_GRID_ID2026  1.824865   0.218029     8.370  &lt; 2e-16 ***\nDESTIN_GRID_ID2027  3.328602   0.217416    15.310  &lt; 2e-16 ***\nDESTIN_GRID_ID2043  2.395384   0.217715    11.002  &lt; 2e-16 ***\nDESTIN_GRID_ID2044  2.933449   0.217423    13.492  &lt; 2e-16 ***\nDESTIN_GRID_ID2045  0.317298   0.223100     1.422 0.154961    \nDESTIN_GRID_ID2046  3.612890   0.217323    16.625  &lt; 2e-16 ***\nDESTIN_GRID_ID2047  2.454197   0.217523    11.282  &lt; 2e-16 ***\nDESTIN_GRID_ID2048  2.680690   0.217504    12.325  &lt; 2e-16 ***\nDESTIN_GRID_ID2049  0.714767   0.220753     3.238 0.001204 ** \nDESTIN_GRID_ID2064  2.879698   0.217496    13.240  &lt; 2e-16 ***\nDESTIN_GRID_ID2065  2.081404   0.217701     9.561  &lt; 2e-16 ***\nDESTIN_GRID_ID2066  0.445534   0.222039     2.007 0.044797 *  \nDESTIN_GRID_ID2067  4.922262   0.217280    22.654  &lt; 2e-16 ***\nDESTIN_GRID_ID2068  2.583494   0.217707    11.867  &lt; 2e-16 ***\nDESTIN_GRID_ID2069  2.818049   0.217538    12.954  &lt; 2e-16 ***\nDESTIN_GRID_ID2085  2.136635   0.217854     9.808  &lt; 2e-16 ***\nDESTIN_GRID_ID2086  3.685255   0.217360    16.955  &lt; 2e-16 ***\nDESTIN_GRID_ID2087  2.493261   0.217565    11.460  &lt; 2e-16 ***\nDESTIN_GRID_ID2088  2.753565   0.217416    12.665  &lt; 2e-16 ***\nDESTIN_GRID_ID2089  2.039313   0.217752     9.365  &lt; 2e-16 ***\nDESTIN_GRID_ID2090  4.479553   0.217300    20.615  &lt; 2e-16 ***\nDESTIN_GRID_ID2091  1.618575   0.221000     7.324 2.41e-13 ***\nDESTIN_GRID_ID2105  1.777163   0.235400     7.550 4.37e-14 ***\nDESTIN_GRID_ID2106  0.717130   0.219591     3.266 0.001092 ** \nDESTIN_GRID_ID2107  1.727604   0.217922     7.928 2.23e-15 ***\nDESTIN_GRID_ID2108  3.375897   0.217405    15.528  &lt; 2e-16 ***\nDESTIN_GRID_ID2109  2.533838   0.217456    11.652  &lt; 2e-16 ***\nDESTIN_GRID_ID2110  1.825497   0.217890     8.378  &lt; 2e-16 ***\nDESTIN_GRID_ID2111 -0.106237   0.228355    -0.465 0.641769    \nDESTIN_GRID_ID2128  1.723863   0.218611     7.886 3.13e-15 ***\nDESTIN_GRID_ID2129  1.746521   0.218741     7.984 1.41e-15 ***\nDESTIN_GRID_ID2130  3.257157   0.217370    14.984  &lt; 2e-16 ***\nDESTIN_GRID_ID2131  3.298801   0.217453    15.170  &lt; 2e-16 ***\nDESTIN_GRID_ID2132  3.057954   0.217431    14.064  &lt; 2e-16 ***\nDESTIN_GRID_ID2148  2.482019   0.218202    11.375  &lt; 2e-16 ***\nDESTIN_GRID_ID2149  0.820046   0.219756     3.732 0.000190 ***\nDESTIN_GRID_ID2150  3.171301   0.217452    14.584  &lt; 2e-16 ***\nDESTIN_GRID_ID2151  3.711050   0.217333    17.075  &lt; 2e-16 ***\nDESTIN_GRID_ID2152  3.414016   0.217389    15.705  &lt; 2e-16 ***\nDESTIN_GRID_ID2153  2.734343   0.217638    12.564  &lt; 2e-16 ***\nDESTIN_GRID_ID2171  3.092244   0.217482    14.218  &lt; 2e-16 ***\nDESTIN_GRID_ID2172  1.940433   0.217918     8.904  &lt; 2e-16 ***\nDESTIN_GRID_ID2173  2.287735   0.217564    10.515  &lt; 2e-16 ***\nDESTIN_GRID_ID2174  2.636731   0.217586    12.118  &lt; 2e-16 ***\nDESTIN_GRID_ID2191  2.514477   0.218081    11.530  &lt; 2e-16 ***\nDESTIN_GRID_ID2192  1.605138   0.218617     7.342 2.10e-13 ***\nDESTIN_GRID_ID2193  2.208844   0.217754    10.144  &lt; 2e-16 ***\nDESTIN_GRID_ID2194  2.926063   0.217465    13.455  &lt; 2e-16 ***\nDESTIN_GRID_ID2195  1.418862   0.223018     6.362 1.99e-10 ***\nDESTIN_GRID_ID2212  1.677078   0.228183     7.350 1.99e-13 ***\nDESTIN_GRID_ID2213  0.115059   0.227658     0.505 0.613276    \nDESTIN_GRID_ID2214  0.779117   0.224189     3.475 0.000510 ***\nDESTIN_GRID_ID2215  2.624630   0.217726    12.055  &lt; 2e-16 ***\nDESTIN_GRID_ID2216  1.329486   0.218771     6.077 1.22e-09 ***\nDESTIN_GRID_ID2233  1.302406   0.225156     5.784 7.27e-09 ***\nDESTIN_GRID_ID2234  2.759821   0.219346    12.582  &lt; 2e-16 ***\nDESTIN_GRID_ID2235  1.843362   0.219045     8.415  &lt; 2e-16 ***\nDESTIN_GRID_ID2236  0.662122   0.220722     3.000 0.002702 ** \nDESTIN_GRID_ID2237 -0.760467   0.285895    -2.660 0.007815 ** \nDESTIN_GRID_ID2256 -0.287389   0.242170    -1.187 0.235337    \nDESTIN_GRID_ID2257  1.131316   0.220956     5.120 3.05e-07 ***\nDESTIN_GRID_ID2258  0.639653   0.221686     2.885 0.003909 ** \nDESTIN_GRID_ID2259  0.784079   0.234464     3.344 0.000825 ***\nDESTIN_GRID_ID2277  0.650254   0.232596     2.796 0.005180 ** \nDESTIN_GRID_ID2278  0.933704   0.223566     4.176 2.96e-05 ***\nDESTIN_GRID_ID2279  0.856597   0.220749     3.880 0.000104 ***\nDESTIN_GRID_ID2280 -0.052133   0.232369    -0.224 0.822482    \nDESTIN_GRID_ID2297  2.163623   0.219169     9.872  &lt; 2e-16 ***\nDESTIN_GRID_ID2300  0.730213   0.227173     3.214 0.001307 ** \nDESTIN_GRID_ID2301  0.830171   0.220309     3.768 0.000164 ***\nDESTIN_GRID_ID2318  3.135708   0.217807    14.397  &lt; 2e-16 ***\nDESTIN_GRID_ID2319  4.177981   0.217427    19.216  &lt; 2e-16 ***\nDESTIN_GRID_ID2322  3.868816   0.217561    17.783  &lt; 2e-16 ***\nDESTIN_GRID_ID2337  4.570151   0.218410    20.925  &lt; 2e-16 ***\nDESTIN_GRID_ID2341  4.829841   0.217376    22.219  &lt; 2e-16 ***\nDESTIN_GRID_ID2343  2.342227   0.218014    10.743  &lt; 2e-16 ***\nDESTIN_GRID_ID2361  2.650586   0.218025    12.157  &lt; 2e-16 ***\nDESTIN_GRID_ID2364  1.509647   0.219293     6.884 5.81e-12 ***\nDESTIN_GRID_ID2379 -0.392672   0.226811    -1.731 0.083404 .  \nDESTIN_GRID_ID2384  2.144202   0.219113     9.786  &lt; 2e-16 ***\nDESTIN_GRID_ID2405  1.884538   0.219139     8.600  &lt; 2e-16 ***\nDESTIN_GRID_ID2406  0.002676   0.232047     0.012 0.990798    \nDESTIN_GRID_ID2426  1.353138   0.228433     5.924 3.15e-09 ***\nDESTIN_GRID_ID2427  1.619868   0.220252     7.355 1.91e-13 ***\nDESTIN_GRID_ID2505  2.519095   0.235444    10.699  &lt; 2e-16 ***\nlog(dist)          -1.560187   0.000498 -3133.037  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 26294811  on 61595  degrees of freedom\nResidual deviance:  5622291  on 59960  degrees of freedom\nAIC: 5913155\n\nNumber of Fisher Scoring iterations: 8\n\n\n\nCalcRSquared(dbcSIM_sg$data$MORNING_PEAK, dbcSIM_sg$fitted.values)\n\n[1] 0.6040924\n\n\n\nmodel_list1 &lt;- list(   \n  Doubly_Constrained = dbcSIM,\n  Doubly_Constrained_sg = dbcSIM_sg\n  )\n\n\ncompare_performance(model_list1, metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                  | Model |    RMSE\n---------------------------------------\nDoubly_Constrained    |   glm | 302.809\nDoubly_Constrained_sg |   glm | 302.427\n\n\nThe results above shows that doubly constrained SIM has lower RMSE but no significant change."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#conclusion",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#conclusion",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "16 Conclusion",
    "text": "16 Conclusion\nIn conclusion, four Spatial Interaction Model are constructed and compared to identify important factors influencing public bus commuter flow in Weekends/Holiday Morning Peak Hour from 11am to 2pm. The R-squared for unconstrained, origin constrained, destination constrained and doubly constrained are 0.24, 0.52, 0.45, and 0.67 respectively. The RMSE are 459, 365, 392, and 303 respectively. The significant factor for unconstrained and origin constrained, the most influential variables are distance, destination mrt exit count, destination finserv count. While for destination constrained, the most influential variables are distance, origin mrt exit count, origin finserv count and for doubly constrained, it is distance. In summary, for attractiveness and propulsiveness, distance plays a crucial part. It is followed by mrt exit count, an indicative that people use public bus and transfer to/from MRT/LRT. Then, the number of financial service is also important, it may be related to the number of population in which the more financial service/banks in an area, the highly populated the area is and thus the flow of people taking bus are higher."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#references",
    "href": "Take-home_Exercise/Take-home_Ex2/Take-home_Ex2.html#references",
    "title": "Take-home-Ex2:Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "17 References",
    "text": "17 References\n\nLong vs Wide Data Picture from https://www.statology.org/long-vs-wide-data/\nProf. Kam Tin Seong Lectures from https://isss624-ay2023-24nov.netlify.app/lesson"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/FinServ.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/FinServ.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/entertn.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/entertn.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1_dump.html",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1_dump.html",
    "title": "Take-home_Ex1_dump",
    "section": "",
    "text": "This section provides a comprehensive step-by step walkthrough to calculate the number of trips within each hexagonal grid during Weekday Morning Peak Hour with a subsequent plan to replicate the same process for Weekday Afternoon Peak Hour, Weekends/Holiday Morning Peak, and Weekends/Holiday Evening Peak in the subsequent section\n\n\nThe code chunk below will be used to calculate the the number of trips in each origin bus stop.\n{r} odbus_weekday_6_9_ori &lt;- odbus_weekday_6_9 %&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(WEEKDAY_MORNING_ORI = sum(TRIPS))%&gt;%    mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE))}\nThe code chunk below will be used to calculate the the number of trips in each destination bus stop.\n{r} odbus_weekday_6_9_des &lt;- odbus_weekday_6_9 %&gt;%   group_by(DESTINATION_PT_CODE) %&gt;%   summarise(WEEKDAY_MORNING_DES = sum(TRIPS))%&gt;%    mutate(DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))}\nThe code chunk below will be used to combine both origin and destination trips in each bus stop and rename the ORIGIN_PT_CODE to BUS_STOP_ID.\n{r} odbus_weekday_6_9_data &lt;- full_join(odbus_weekday_6_9_ori , odbus_weekday_6_9_des,                                     by =c(\"ORIGIN_PT_CODE\"=\"DESTINATION_PT_CODE\"))%&gt;%   rename(BUS_STOP_ID = ORIGIN_PT_CODE)}\nNext, I will calculate the total trips from both origin and destination trips by summing both the columns.\n{r} odbus_weekday_6_9_data$WEEKDAY_MORNING_TRIPS &lt;- with(odbus_weekday_6_9_data,    ifelse(is.na(WEEKDAY_MORNING_ORI), 0, WEEKDAY_MORNING_ORI) +   ifelse(is.na(WEEKDAY_MORNING_DES), 0, WEEKDAY_MORNING_DES) )}\nTaking a glimpse of the odbus_weekday_6_9_data to make sure that the code chunk above are correct.\n{r} glimpse(odbus_weekday_6_9_data)}\n\n\n\nThe code chunk below will be used to join the busstop3414 SpatialPolygonsDataframe and odbus_weekday_6_9_data by BUS_STOP_N for busstop3414 and BUS_STOP_ID for original_destination_bus). This is performed by using left_join() of dplyr package.\n{r} total_trips_per_busstop_wdmp &lt;- left_join(busstop3414, odbus_weekday_6_9_data, by = c(\"BUS_STOP_N\" = \"BUS_STOP_ID\"))}\n\n\n\nThe code chunk below will be used to join the total_trips_per_busstop and honeycomb grid spatially and remove the grid without any busstop (remove rows with NA value on the BUS_STOP_N).\n{r} total_trips_per_busstop_honeycomb_wdmp &lt;- st_join(honeycomb_grid_sf,total_trips_per_busstop_wdmp) %&gt;%   filter(!is.na(BUS_STOP_N))}\n\n\n\nThe code chunk below will be used to calculate the total trips in a hexagonal grid.\n{r} total_trips_per_grid_wdmp &lt;- total_trips_per_busstop_honeycomb_wdmp %&gt;%   group_by(grid_id) %&gt;%   summarise(total_trips = sum(WEEKDAY_MORNING_TRIPS))}"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1_dump.html#task-1-geovisualisation-and-analysis",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1_dump.html#task-1-geovisualisation-and-analysis",
    "title": "Take-home_Ex1_dump",
    "section": "1 Task 1: Geovisualisation and Analysis",
    "text": "1 Task 1: Geovisualisation and Analysis\n\n1.1 Weekday Afternoon Peak\n{r} tmap_mode(\"view\")  map_honeycomb = tm_shape(total_trips_per_grid_wdmp) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\n1.2 Weekday Afternoon Peak\n{r} tmap_mode(\"view\")  map_honeycomb = tm_shape(total_trips_per_grid_wdap) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\n1.3 Weekends/Holiday Morning Peak\n{r} map_honeycomb = tm_shape(total_trips_per_grid_wemp) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\n1.4 Weekends/Holiday Evening Peak\n{r} map_honeycomb = tm_shape(total_trips_per_grid_weep) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\nFrom the above, we can see there are more number of trip in the morning..??????"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/dump.html",
    "href": "Take-home_Exercise/Take-home_Ex1/dump.html",
    "title": "Untitled",
    "section": "",
    "text": "irh tm_shape(mpsz) +   tm_polygons() %&gt;%   tm_shape() +   tm_lines(lwd = \"MORNING_PEAK\",            style = \"quantile\",            scale = c(0.1, 1, 3, 5, 7, 10),            n = 6,            alpha = 0.3)}\nirh tmap_mode(\"view\")  map_honeycomb = tm_shape(odbus_weekday_6_9_data) +   tm_fill(     col = \"MORNING_PEAK\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"MORNING_PEAK\"),     popup.format = list(       MORNING_PEAK = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\nThe code chunk below will be used to calculate the the number of trips in each bus stop.\nirh total_trips_in_origin_busstop &lt;-odbus %&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}\n\n\n\nThe code chunk below will be used to join the busstop SpatialPolygonsDataframe and original_destination_bus by the bus stop id (BUS_STOP_N for busstop and ORIGIN_PT_CODE for original_destination_bus). This is performed by using left_join() of dplyr package.\nirh total_trips_in_origin_busstop &lt;- left_join(busstop3414, total_trips_in_origin_busstop, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))}\n\n\n\nThe code chunk below will be used to join the total_trips_in_origin_busstop and honeycomb grid spatially.\n\n\n\n\nThe code chunk below will be used to remove the grid id without\nirh # Remove rows with NA values in the 'bus_stop_N' column total_trips_in_origin_busstop_honeycomb &lt;- total_trips_in_origin_busstop_honeycomb %&gt;%   filter(!is.na(BUS_STOP_N))}\n\n\n\nThe code chunk below is used to calculate the sum of trips in each grid. Some grids consist of more than 1 bus stop and thus the number of trips will be summed.\nirh trips_per_grid &lt;- total_trips_in_origin_busstop_honeycomb %&gt;%   group_by(grid_id) %&gt;%   summarise(total_trips = sum(TOTAL_TRIPS))}\n\n\n\nirh tmap_mode(\"view\")  map_honeycomb = tm_shape(trips_per_grid) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\n\nI will further analyse on the peak hours:\n\n\n\n\nThe chunk code below is to ???\nirh weekday_morning &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9) & DAY_TYPE == 'WEEKDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekday_afternoon &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20) & DAY_TYPE == 'WEEKDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday_morning &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday__evening &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}\n\n\n\nirh weekday_morning &lt;- left_join(busstop, weekday_morning, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekday_afternoon &lt;- left_join(busstop, weekday_afternoon, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekend_holiday_morning &lt;- left_join(busstop, weekend_holiday_morning, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekend_holiday__evening &lt;- left_join(busstop, weekend_holiday__evening, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))}\n\n\n\nirh # Spatially join the trip data with the honeycomb grid #busstop_weekday_morning_honeycomb &lt;- st_join(honeycomb_grid_sf,busstop_weekday_morning)  # Remove rows with NA values in the 'bus_stop_N' column #busstop_weekday_morning_honeycomb &lt;- busstop_weekday_morning_honeycomb %&gt;% #  filter(!is.na(BUS_STOP_N))}\nirh # Group by grid ID and calculate the sum of TOTAL_TRIPS #trips_per_grid_busstop_weekday_morning &lt;- busstop_weekday_morning_honeycomb %&gt;% #  group_by(grid_id) %&gt;%  # summarise(total_trips = sum(TOTAL_TRIPS))}\nirh #tmap_mode(\"view\")  #map_honeycomb = tm_shape(trips_per_grid_busstop_weekday_morning) + #  tm_fill(  #   col = \"total_trips\",  #   palette = \"Reds\",   #  style = \"cont\",   #  title = \"Number of Trips\",   #  id = \"grid_id\",    # showNA = FALSE,   #  alpha = 0.6,   #  popup.vars = c(\"total_trips\"),   #  popup.format = list(   #    total_trips = list(format = \"f\", digits = 0))  ## ) +  # tm_borders(col = \"grey40\", lwd = 0.7)  #map_honeycomb}\n\nirh  #filtered_df &lt;- origin_destination_bus %&gt;%  # filter(   #  (TIME_PER_HOUR %in% peak_hours$`WeekdayMorningPeak` & DAY_TYPE == 'WEEKDAY') |    # (TIME_PER_HOUR %in% peak_hours$`WeekdayAfternoonPeak` & DAY_TYPE == 'WEEKDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayMorningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayEveningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY')   #)}"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/dump.html#task-1-geovisualisation-and-analysis",
    "href": "Take-home_Exercise/Take-home_Ex1/dump.html#task-1-geovisualisation-and-analysis",
    "title": "Untitled",
    "section": "",
    "text": "irh tm_shape(mpsz) +   tm_polygons() %&gt;%   tm_shape() +   tm_lines(lwd = \"MORNING_PEAK\",            style = \"quantile\",            scale = c(0.1, 1, 3, 5, 7, 10),            n = 6,            alpha = 0.3)}\nirh tmap_mode(\"view\")  map_honeycomb = tm_shape(odbus_weekday_6_9_data) +   tm_fill(     col = \"MORNING_PEAK\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"MORNING_PEAK\"),     popup.format = list(       MORNING_PEAK = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\nThe code chunk below will be used to calculate the the number of trips in each bus stop.\nirh total_trips_in_origin_busstop &lt;-odbus %&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}\n\n\n\nThe code chunk below will be used to join the busstop SpatialPolygonsDataframe and original_destination_bus by the bus stop id (BUS_STOP_N for busstop and ORIGIN_PT_CODE for original_destination_bus). This is performed by using left_join() of dplyr package.\nirh total_trips_in_origin_busstop &lt;- left_join(busstop3414, total_trips_in_origin_busstop, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))}\n\n\n\nThe code chunk below will be used to join the total_trips_in_origin_busstop and honeycomb grid spatially.\n\n\n\n\nThe code chunk below will be used to remove the grid id without\nirh # Remove rows with NA values in the 'bus_stop_N' column total_trips_in_origin_busstop_honeycomb &lt;- total_trips_in_origin_busstop_honeycomb %&gt;%   filter(!is.na(BUS_STOP_N))}\n\n\n\nThe code chunk below is used to calculate the sum of trips in each grid. Some grids consist of more than 1 bus stop and thus the number of trips will be summed.\nirh trips_per_grid &lt;- total_trips_in_origin_busstop_honeycomb %&gt;%   group_by(grid_id) %&gt;%   summarise(total_trips = sum(TOTAL_TRIPS))}\n\n\n\nirh tmap_mode(\"view\")  map_honeycomb = tm_shape(trips_per_grid) +   tm_fill(     col = \"total_trips\",     palette = \"Reds\",     style = \"cont\",     title = \"Number of Trips\",     id = \"grid_id\",     showNA = FALSE,     alpha = 0.6,     popup.vars = c(\"total_trips\"),     popup.format = list(       total_trips = list(format = \"f\", digits = 0))   ) +   tm_borders(col = \"grey40\", lwd = 0.7)  map_honeycomb}\n\n\n\nI will further analyse on the peak hours:\n\n\n\n\nThe chunk code below is to ???\nirh weekday_morning &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9) & DAY_TYPE == 'WEEKDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekday_afternoon &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20) & DAY_TYPE == 'WEEKDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday_morning &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday__evening &lt;- origin_destination_bus %&gt;%   filter((TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%&gt;%   group_by(ORIGIN_PT_CODE) %&gt;%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}\n\n\n\nirh weekday_morning &lt;- left_join(busstop, weekday_morning, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekday_afternoon &lt;- left_join(busstop, weekday_afternoon, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekend_holiday_morning &lt;- left_join(busstop, weekend_holiday_morning, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))  weekend_holiday__evening &lt;- left_join(busstop, weekend_holiday__evening, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))}\n\n\n\nirh # Spatially join the trip data with the honeycomb grid #busstop_weekday_morning_honeycomb &lt;- st_join(honeycomb_grid_sf,busstop_weekday_morning)  # Remove rows with NA values in the 'bus_stop_N' column #busstop_weekday_morning_honeycomb &lt;- busstop_weekday_morning_honeycomb %&gt;% #  filter(!is.na(BUS_STOP_N))}\nirh # Group by grid ID and calculate the sum of TOTAL_TRIPS #trips_per_grid_busstop_weekday_morning &lt;- busstop_weekday_morning_honeycomb %&gt;% #  group_by(grid_id) %&gt;%  # summarise(total_trips = sum(TOTAL_TRIPS))}\nirh #tmap_mode(\"view\")  #map_honeycomb = tm_shape(trips_per_grid_busstop_weekday_morning) + #  tm_fill(  #   col = \"total_trips\",  #   palette = \"Reds\",   #  style = \"cont\",   #  title = \"Number of Trips\",   #  id = \"grid_id\",    # showNA = FALSE,   #  alpha = 0.6,   #  popup.vars = c(\"total_trips\"),   #  popup.format = list(   #    total_trips = list(format = \"f\", digits = 0))  ## ) +  # tm_borders(col = \"grey40\", lwd = 0.7)  #map_honeycomb}\n\nirh  #filtered_df &lt;- origin_destination_bus %&gt;%  # filter(   #  (TIME_PER_HOUR %in% peak_hours$`WeekdayMorningPeak` & DAY_TYPE == 'WEEKDAY') |    # (TIME_PER_HOUR %in% peak_hours$`WeekdayAfternoonPeak` & DAY_TYPE == 'WEEKDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayMorningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayEveningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY')   #)}"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class_Ex5",
    "section": "",
    "text": "Install from github for development version of spflow package.\n\ndevtools::install_github(\"LukeCe/spflow\")\n\nNext, I willl load spflow and other R packages in R environment.\n\npacman::p_load(tmap,sf, spdep, sp, Matrix, spflow, reshape2, knitr, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#getting-started",
    "title": "In-class_Ex5",
    "section": "",
    "text": "Install from github for development version of spflow package.\n\ndevtools::install_github(\"LukeCe/spflow\")\n\nNext, I willl load spflow and other R packages in R environment.\n\npacman::p_load(tmap,sf, spdep, sp, Matrix, spflow, reshape2, knitr, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "title": "In-class_Ex5",
    "section": "2 Data Preparation",
    "text": "2 Data Preparation\nBefore I can calibrate Spatial Econometric Interaction Models by using spflow, three data sets are required:\n\na spatial weights\na tibble data.frame consists of the origins, destination, flows and distances between the origins and destination\na tibble data.frame consists of the explanatory variables."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#building-the-geographical-area",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#building-the-geographical-area",
    "title": "In-class_Ex5",
    "section": "3 Building the Geographical Area",
    "text": "3 Building the Geographical Area\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48280.78 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n#centroids &lt;- suppressWarnings({st_point_on_surface(st_geometry(mpsz_busstop))})\n\n\n#mpsz_nb &lt;- list(\n  #\"by_contiguity\" = poly2nb(mpsz_busstop),\n  #\"by_distance\" =dnearneigh(centroids, d1=0, d2=5000),\n  #\"by_knn\" = knn2b(knearneigh(centroids,3))\n#)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#load-all-the-data",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#load-all-the-data",
    "title": "In-class_Ex5",
    "section": "4 Load all the data",
    "text": "4 Load all the data\n\nmpsz_nb &lt;- read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow &lt;- read_rds(\"data/rds/flow_data.rds\")\nmpsz_var &lt;- read_rds(\"data/rds/mpsz_var.rds\")\n\n\nmpsz_net &lt;- spflow_network(\n  id_net=\"sg\",\n  node_neighborhood =\n    nb2mat(mpsz_nb$by_contiguity),\n  node_data=mpsz_var,\n  node_key_column =\"SZ_CODE\")\n\nmpsz_net\n\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 313\nAverage number of links per node: 6.077\nDensity of the neighborhood matrix: 1.94% (non-zero connections)\n\nData on nodes:\n                SZ_NAME SZ_CODE BUSSTOP_COUNT AGE7_12 AGE13_24 AGE25_64\n1      INSTITUTION HILL  RVSZ05             2     330      360     2260\n2        ROBERTSON QUAY  SRSZ01            10     320      350     2200\n3          FORT CANNING  MUSZ02             6       0       10       30\n4      MARINA EAST (MP)  MPSZ05             2       0        0        0\n5               SENTOSA  SISZ01             1     200      260     1440\n6        CITY TERMINALS  BMSZ17            10       0        0        0\n---                 ---     ---           ---     ---      ---      ---\n308            NEE SOON  YSSZ07            12      90      140      590\n309       UPPER THOMSON  BSSZ01            47    1590     3660    15980\n310          SHANGRI-LA  AMSZ05            12     810     1920     9650\n311          TOWNSVILLE  AMSZ04             9     980     2000    11320\n312           MARYMOUNT  BSSZ02            25    1610     4060    16860\n313 TUAS VIEW EXTENSION  TSSZ06            11       0        0        0\n    SCHOOL_COUNT BUSINESS_COUNT RETAILS_COUNT FINSERV_COUNT ENTERTN_COUNT\n1              1              6            26             3             0\n2              0              4           207            18             6\n3              0              7            17             0             3\n4              0              0             0             0             0\n5              0              1            84            29             2\n6              0             11            14             4             0\n---          ---            ---           ---           ---           ---\n308            0              0             7             0             0\n309            3             21           305            30             0\n310            3              0            53             9             0\n311            1              0            83            11             0\n312            3             19           135             8             0\n313            0             53             3             1             0\n    FB_COUNT LR_COUNT COORD_X COORD_Y\n1          4        3  103.84    1.29\n2         38       11  103.84    1.29\n3          4        7  103.85    1.29\n4          0        0  103.88    1.29\n5         38       20  103.83    1.25\n6         15        0  103.85    1.26\n---      ---      ---     ---     ---\n308        0        0  103.81     1.4\n309        5       11  103.83    1.36\n310        0        0  103.84    1.37\n311        1        1  103.85    1.36\n312        3       11  103.84    1.35\n313        0        0  103.61    1.26\n\n\n\nmpsz_net_pairs &lt;- spflow_network_pair(\n  id_orig_net =\"sg\",\n  id_dest_net =\"sg\",\n  pair_data =mpsz_flow,\n  orig_key_column =\"ORIGIN_SZ\",\n  dest_key_column =\"DESTIN_SZ\"\n)\n\nmpsz_net_pairs\n\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 313 nodes)\nDestination network id: sg (with 313 nodes)\nNumber of pairs: 97969\nCompleteness of pairs: 100.00% (97969/97969)\n\nData on node-pairs:\n      DESTIN_SZ ORIGIN_SZ DISTANCE TRIPS\n1        RVSZ05    RVSZ05        0    67\n314      SRSZ01    RVSZ05   305.74   251\n627      MUSZ02    RVSZ05   951.83     0\n940      MPSZ05    RVSZ05  5254.07     0\n1253     SISZ01    RVSZ05     4975     0\n1566     BMSZ17    RVSZ05  3176.16     0\n---         ---       ---      ---   ---\n96404    YSSZ07    TSSZ06 26972.97     0\n96717    BSSZ01    TSSZ06 25582.48     0\n97030    AMSZ05    TSSZ06 26714.79     0\n97343    AMSZ04    TSSZ06 27572.74     0\n97656    BSSZ02    TSSZ06  26681.7     0\n97969    TSSZ06    TSSZ06        0   270\n\n\n\nmpsz_multi_net &lt;- spflow_network_multi(mpsz_net, mpsz_net_pairs)\n\nmpsz_multi_net\n\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS     C_PAIRS  C_ORIG  C_DEST\n          sg          sg       sg_sg      100.00% 97969/97969 313/313 313/313\n\n\n\ncor_formula &lt;- log(1+TRIPS) ~\n  BUSSTOP_COUNT +\n  AGE7_12+\n  AGE13_24+\n  AGE25_64+\n  SCHOOL_COUNT+\n  BUSINESS_COUNT+\n  RETAILS_COUNT+\n  FINSERV_COUNT+\n  P_(log(DISTANCE+1))\n\n\ncor_mat &lt;- pair_cor(\n  mpsz_multi_net,\n  spflow_formula=cor_formula,\n  add_lags_x = FALSE)\n\ncolnames(cor_mat) &lt;- paste0(\n  substr(\n    colnames(cor_mat),1,3),\"...\")\n\n  cor_image(cor_mat)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#the-base-model",
    "href": "In-class_Exercise/In-class_Ex5/In-class_Ex5.html#the-base-model",
    "title": "In-class_Ex5",
    "section": "5 The base model",
    "text": "5 The base model\nLet us calibrate a base model with the following configuration:\n\nbase_model &lt;- spflow(\n  spflow_formula = log(1+TRIPS) ~\n    O_(BUSSTOP_COUNT+\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT+\n         RETAILS_COUNT+\n         FINSERV_COUNT)+\n         P_(log(DISTANCE+1)),\n       spflow_networks =mpsz_multi_net)\nbase_model\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.680  0.004  192.554  0.000\nrho_o                   0.678  0.004  187.730  0.000\nrho_w                  -0.396  0.006  -65.589  0.000\n(Intercept)             0.410  0.065    6.265  0.000\n(Intra)                 1.313  0.081   16.263  0.000\nD_SCHOOL_COUNT          0.017  0.002    7.885  0.000\nD_SCHOOL_COUNT.lag1     0.002  0.004    0.551  0.582\nD_BUSINESS_COUNT        0.000  0.000    3.015  0.003\nD_BUSINESS_COUNT.lag1   0.000  0.000   -0.249  0.803\nD_RETAILS_COUNT         0.000  0.000   -0.306  0.759\nD_RETAILS_COUNT.lag1    0.000  0.000    0.152  0.879\nD_FINSERV_COUNT         0.002  0.000    6.787  0.000\nD_FINSERV_COUNT.lag1   -0.002  0.001   -3.767  0.000\nO_BUSSTOP_COUNT         0.002  0.000    6.806  0.000\nO_BUSSTOP_COUNT.lag1   -0.001  0.000   -2.364  0.018\nO_AGE25_64              0.000  0.000    7.336  0.000\nO_AGE25_64.lag1         0.000  0.000   -2.797  0.005\nP_log(DISTANCE + 1)    -0.050  0.007   -6.792  0.000\n\n--------------------------------------------------\nR2_corr: 0.6942939  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nold_par &lt;- par(mfrow=c(1,3),\n               mar=c(2,2,2,2))\nspflow_moran_plots(base_model)\n\n\n\n\n\npar(old_par)\n\ncorr_residual &lt;- pair_cor(base_model)\ncolnames(corr_residual) &lt;- substr(colnames(corr_residual),1,3)\ncor_image(corr_residual)\n\n\n\n\n\nspflow_formula &lt;- log(1+TRIPS) ~\n  O_(BUSSTOP_COUNT+\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT+\n         RETAILS_COUNT+\n         FINSERV_COUNT)+\n  P_(log(DISTANCE+1))\n\nmodel_control &lt;- spflow_control(estimation_method =\"mle\", model=\"model_8\")\n\nmle_model8 &lt;- spflow(\n  spflow_formula, \n  spflow_networks =mpsz_multi_net, \n  estimation_control=model_control)\n\nmle_model8\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_8)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\nrho_d                   0.689  0.003   196.832  0.000\nrho_o                   0.687  0.004   192.214  0.000\nrho_w                  -0.473  0.003  -142.469  0.000\n(Intercept)             1.086  0.049    22.275  0.000\n(Intra)                 0.840  0.075    11.255  0.000\nD_SCHOOL_COUNT          0.019  0.002     8.896  0.000\nD_SCHOOL_COUNT.lag1     0.019  0.004     5.130  0.000\nD_BUSINESS_COUNT        0.000  0.000     3.328  0.001\nD_BUSINESS_COUNT.lag1   0.000  0.000     1.664  0.096\nD_RETAILS_COUNT         0.000  0.000    -0.414  0.679\nD_RETAILS_COUNT.lag1    0.000  0.000    -0.171  0.864\nD_FINSERV_COUNT         0.002  0.000     6.150  0.000\nD_FINSERV_COUNT.lag1   -0.003  0.001    -4.601  0.000\nO_BUSSTOP_COUNT         0.003  0.000     7.676  0.000\nO_BUSSTOP_COUNT.lag1    0.000  0.000     0.552  0.581\nO_AGE25_64              0.000  0.000     6.870  0.000\nO_AGE25_64.lag1         0.000  0.000    -0.462  0.644\nP_log(DISTANCE + 1)    -0.125  0.005   -22.865  0.000\n\n--------------------------------------------------\nR2_corr: 0.6965974  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nspflow_formula &lt;- log(1+TRIPS) ~\n  O_(BUSSTOP_COUNT+\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT+\n         RETAILS_COUNT+\n         FINSERV_COUNT)+\n  P_(log(DISTANCE+1))\n\nmodel_control &lt;- spflow_control(estimation_method =\"mle\", model=\"model_2\")\n\nmle_model2 &lt;- spflow(\n  spflow_formula, \n  spflow_networks =mpsz_multi_net, \n  estimation_control=model_control)\n\nmle_model2\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_2)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.731  0.003  218.603  0.000\n(Intercept)             3.068  0.067   45.899  0.000\n(Intra)                -0.398  0.093   -4.291  0.000\nD_SCHOOL_COUNT          0.063  0.003   24.291  0.000\nD_SCHOOL_COUNT.lag1     0.054  0.005   11.802  0.000\nD_BUSINESS_COUNT        0.001  0.000    8.790  0.000\nD_BUSINESS_COUNT.lag1   0.001  0.000    3.925  0.000\nD_RETAILS_COUNT         0.000  0.000   -1.076  0.282\nD_RETAILS_COUNT.lag1    0.000  0.000    0.251  0.802\nD_FINSERV_COUNT         0.007  0.000   18.054  0.000\nD_FINSERV_COUNT.lag1   -0.009  0.001  -12.691  0.000\nO_BUSSTOP_COUNT         0.003  0.000    8.269  0.000\nO_BUSSTOP_COUNT.lag1    0.004  0.001    7.808  0.000\nO_AGE25_64              0.000  0.000    3.918  0.000\nO_AGE25_64.lag1         0.000  0.000    4.421  0.000\nP_log(DISTANCE + 1)    -0.351  0.007  -47.000  0.000\n\n--------------------------------------------------\nR2_corr: 0.5527887  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nspflow_formula &lt;- log(1+TRIPS) ~\n  O_(BUSSTOP_COUNT+\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT+\n         RETAILS_COUNT+\n         FINSERV_COUNT)+\n  P_(log(DISTANCE+1))\n\nmodel_control &lt;- spflow_control(estimation_method =\"mle\", model=\"model_1\")\n\nmle_model1 &lt;- spflow(\n  spflow_formula, \n  spflow_networks =mpsz_multi_net, \n  estimation_control=model_control)\n\nmle_model1\n\n--------------------------------------------------\nSpatial interaction model estimated by: OLS  \nSpatial correlation structure: SLX (model_1)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\n(Intercept)            11.384  0.069   164.255  0.000\n(Intra)                -6.006  0.112   -53.393  0.000\nD_SCHOOL_COUNT          0.093  0.003    28.599  0.000\nD_SCHOOL_COUNT.lag1     0.255  0.006    44.905  0.000\nD_BUSINESS_COUNT        0.001  0.000    10.036  0.000\nD_BUSINESS_COUNT.lag1   0.003  0.000    18.274  0.000\nD_RETAILS_COUNT         0.000  0.000    -1.940  0.052\nD_RETAILS_COUNT.lag1    0.000  0.000    -2.581  0.010\nD_FINSERV_COUNT         0.005  0.000    10.979  0.000\nD_FINSERV_COUNT.lag1   -0.016  0.001   -17.134  0.000\nO_BUSSTOP_COUNT         0.014  0.001    25.865  0.000\nO_BUSSTOP_COUNT.lag1    0.015  0.001    21.728  0.000\nO_AGE25_64              0.000  0.000    14.479  0.000\nO_AGE25_64.lag1         0.000  0.000    14.452  0.000\nP_log(DISTANCE + 1)    -1.281  0.008  -165.327  0.000\n\n--------------------------------------------------\nR2_corr: 0.2831458  \nObservations: 97969  \nModel coherence: Validated"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/FinServ.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/FinServ.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/entertn.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/entertn.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html",
    "title": "In-class_Ex4: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A healthy baby need healthy food. Likewise, a well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, you will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#overview",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#overview",
    "title": "In-class_Ex4: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A healthy baby need healthy food. Likewise, a well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, you will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#getting-started",
    "title": "In-class_Ex4: Preparing Spatial Interaction Modelling Variables",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nTo get start, the following R packages will be loaded into R environment.\n\npacman::p_load(tidyverse, sf, httr, tmap)\n\nNotes: httr allows us to work with html (to communicate with web server)."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#geocoding-using-sla-api",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#geocoding-using-sla-api",
    "title": "In-class_Ex4: SIMs",
    "section": "3 Geocoding using SLA API",
    "text": "3 Geocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports online geocoding service called OneMap API.\n\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$'postal_code'\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes){\n  query &lt;- list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;-GET(url, query=query)\n  \n  if((content(res)$found)!=0){\n    found &lt;-rbind(found, data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nNotes:\n#| eval: false -&gt; run 1 time only\n#| echo: false -&gt; the code wont be shown on html page\n#| message: false -&gt; the message will not come up\n\nmerged = merge(csv, found, by.x='postal_code', by.y='results.POSTAL', all=TRUE)\nwrite.csv (merged, file='data/aspatial/schools.csv')\nwrite.csv (not_found, file ='data/aspatial/not_found.csv')"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#converting-an-aspatial-data-into-a-simple-feature-tibble-data.frame",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#converting-an-aspatial-data-into-a-simple-feature-tibble-data.frame",
    "title": "In-class_Ex4: SIMs",
    "section": "4 Converting an aspatial data into a simple feature tibble data.frame",
    "text": "4 Converting an aspatial data into a simple feature tibble data.frame\n\n4.1 Importing and tidying schools data\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\")%&gt;%\n  rename(latitude='results.LATITUDE', longitude='results.LONGITUDE')%&gt;%\n  select(postal_code, school_name, latitude,longitude)\n\n\n\n4.2 Converting an aspatial data into sf tibble data.frame\n\nschools_sf &lt;- st_as_sf(schools, \n                       coords=c('longitude', 'latitude'),\n                       crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\n\n4.3 Plotting a point simple feature layer\n\ntmap_mode(\"view\")\ntm_shape(schools_sf)+\n  tm_dots()+\ntm_view(set.zoom.limits =c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#preparing",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#preparing",
    "title": "In-class_Ex4: SIMs",
    "section": "5 Preparing",
    "text": "5 Preparing\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\")%&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz$'SCHOOL_COUNT' &lt;- lengths(st_intersects(mpsz, schools_sf))\n\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\n\nbusiness_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Business\")\n\nReading layer `Business' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_options(check.and.fix=TRUE)\ntm_shape(mpsz)+\n  tm_polygons()+\ntm_shape(business_sf)+\n  tm_dots()\n\n\n\n\n\nmpsz$'BUSINESS_COUNT' &lt;- lengths(st_intersects(mpsz, business_sf))\nsummary(mpsz$BUSINESS_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\n\n#|eval: false\n#flow_data &lt;- flow_data %&gt;%\n#  left_join(mpsz_tidy,\n#            by =c(\"DESTIN_SZ\"=\"SUBZONE_C\"))\n\nNotes: calibrate journey to home : then change to ORIGIN_SZ"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#checking-for-variables-with-zero-values",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#checking-for-variables-with-zero-values",
    "title": "In-class_Ex4: SIMs",
    "section": "6 Checking for variables with zero values",
    "text": "6 Checking for variables with zero values"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#model-calibration",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#model-calibration",
    "title": "In-class_Ex4: SIMs",
    "section": "7 Model Calibration",
    "text": "7 Model Calibration\n\npacman::p_load(tmap, sf, performance, ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#the-data",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#the-data",
    "title": "In-class_Ex4: SIMs",
    "section": "8 The Data",
    "text": "8 The Data\n\nflow_data&lt;-read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nNotes: business small scale and middle scale industry; retail mainly for shopping purposes.\nNotes: change to morning_peak to TRIPS and dist to DIST (because there is a dist function in R)\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0, flow_data$MORNING_PEAK)\nflow_data$offset &lt;-ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0.000001,1\n)\n\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt;0)\n\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  rename(TRIPS= MORNING_PEAK,\n         DIST=dist)\n\n\n8.1 Origin(Production) constrained SIM\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                        ORIGIN_SZ +\n                        log(SCHOOL_COUNT)+\n                        log(RETAIL_COUNT)+\n                        log(DIST) -1,\n                      family = poisson (link='log'),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(RETAIL_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\nNotes1: The purpose of -1 on log(DIST) is to remove the intercept.\nNotes2: need to look at log(SCHOOL_COUNT) , log(RETAIL_COUNT), log(DIST), p-value\n\nlog(SCHOOL_COUNT) , log(RETAIL_COUNT) -&gt; attractiveness, need to be positive but if crime rate need to be negative (people dont want to stay near area with high crime rate)\n\n\n\nlog(DIST) -&gt; need to be negative(inverse distance), meaning that the closer the distance, people are more willing to go\np-value &lt; 0.0.5 -&gt; if not &lt;0.05 need to recalibrate the model, remove the variables\n\n\n\n8.2 Goodness-of-Fit\n\nCalcRSquared &lt;- function (observed, estimated){\n  r&lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\n\nperformance_rmse(orcSIM_Poisson, normalized= FALSE)\n\n[1] 2613.236\n\n\n\n\n8.3 Doubly Constrained\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ+\n                        DESTIN_SZ+\n                        log(DIST),\n                      family = poisson(link='log'),\n                      data= inter_zonal_flow,\n                      na.action= na.exclude\n                      )\ndbcSIM_Poisson\n\n\nCall:  glm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n    (Intercept)  ORIGIN_SZAMSZ02  ORIGIN_SZAMSZ03  ORIGIN_SZAMSZ04  \n     21.8312374        0.5263502        0.3139982       -0.2146257  \nORIGIN_SZAMSZ05  ORIGIN_SZAMSZ06  ORIGIN_SZAMSZ07  ORIGIN_SZAMSZ08  \n     -0.1890446        0.1539201       -0.9826565       -0.4488417  \nORIGIN_SZAMSZ09  ORIGIN_SZAMSZ10  ORIGIN_SZAMSZ11  ORIGIN_SZAMSZ12  \n      0.0713474        0.4313742       -1.4712226       -1.7250733  \nORIGIN_SZBDSZ01  ORIGIN_SZBDSZ02  ORIGIN_SZBDSZ03  ORIGIN_SZBDSZ04  \n      0.8810576        0.1100240        0.3606166        1.4624347  \nORIGIN_SZBDSZ05  ORIGIN_SZBDSZ06  ORIGIN_SZBDSZ07  ORIGIN_SZBDSZ08  \n      0.6207557        0.6712973       -1.2338669       -1.0444562  \nORIGIN_SZBKSZ01  ORIGIN_SZBKSZ02  ORIGIN_SZBKSZ03  ORIGIN_SZBKSZ04  \n     -0.2838426        0.5550522        0.7396640       -0.2242451  \nORIGIN_SZBKSZ05  ORIGIN_SZBKSZ06  ORIGIN_SZBKSZ07  ORIGIN_SZBKSZ08  \n     -0.2371614       -0.1413812        0.7089989       -0.0907065  \nORIGIN_SZBKSZ09  ORIGIN_SZBLSZ01  ORIGIN_SZBLSZ02  ORIGIN_SZBLSZ03  \n     -0.1775146       -2.3684539       -2.8078475       -3.3122763  \nORIGIN_SZBLSZ04  ORIGIN_SZBMSZ01  ORIGIN_SZBMSZ02  ORIGIN_SZBMSZ03  \n     -2.6770542        0.0618035       -1.3535767       -0.7569095  \nORIGIN_SZBMSZ04  ORIGIN_SZBMSZ05  ORIGIN_SZBMSZ06  ORIGIN_SZBMSZ07  \n     -0.2949304       -2.6131992       -3.0315024       -0.6962524  \nORIGIN_SZBMSZ08  ORIGIN_SZBMSZ09  ORIGIN_SZBMSZ10  ORIGIN_SZBMSZ11  \n     -0.9310730       -1.2911253       -1.6687004       -1.1152794  \nORIGIN_SZBMSZ12  ORIGIN_SZBMSZ13  ORIGIN_SZBMSZ14  ORIGIN_SZBMSZ15  \n     -1.5323954       -0.6267376       -1.0475467       -0.5049444  \nORIGIN_SZBMSZ16  ORIGIN_SZBMSZ17  ORIGIN_SZBPSZ01  ORIGIN_SZBPSZ02  \n     -1.5282897       -1.5722349        0.5814175        0.0875442  \nORIGIN_SZBPSZ03  ORIGIN_SZBPSZ04  ORIGIN_SZBPSZ05  ORIGIN_SZBPSZ06  \n      0.3358227        0.6507586        0.9502124       -1.0480314  \nORIGIN_SZBPSZ07  ORIGIN_SZBSSZ01  ORIGIN_SZBSSZ02  ORIGIN_SZBSSZ03  \n     -0.5467931        0.2998334        0.2841036       -0.2331505  \nORIGIN_SZBTSZ01  ORIGIN_SZBTSZ02  ORIGIN_SZBTSZ03  ORIGIN_SZBTSZ04  \n      0.0987284       -0.6261229       -0.4326963       -1.4998668  \nORIGIN_SZBTSZ05  ORIGIN_SZBTSZ06  ORIGIN_SZBTSZ07  ORIGIN_SZBTSZ08  \n     -0.9564768       -1.2853131       -2.3870991       -1.3715855  \nORIGIN_SZCBSZ01  ORIGIN_SZCCSZ01  ORIGIN_SZCHSZ01  ORIGIN_SZCHSZ02  \n     -3.5940232       -0.7008220       -0.9109524       -0.8566547  \nORIGIN_SZCHSZ03  ORIGIN_SZCKSZ01  ORIGIN_SZCKSZ02  ORIGIN_SZCKSZ03  \n      1.1153731        0.3001815        0.7185711        1.1389824  \nORIGIN_SZCKSZ04  ORIGIN_SZCKSZ05  ORIGIN_SZCKSZ06  ORIGIN_SZCLSZ01  \n      1.6281772        0.8338470        0.6528993       -0.7174758  \nORIGIN_SZCLSZ02  ORIGIN_SZCLSZ03  ORIGIN_SZCLSZ04  ORIGIN_SZCLSZ05  \n     -1.7513100       -1.0362873        0.6160017       -2.1005122  \nORIGIN_SZCLSZ06  ORIGIN_SZCLSZ07  ORIGIN_SZCLSZ08  ORIGIN_SZCLSZ09  \n      0.7252108       -0.5343482       -0.2153408       -1.8019961  \nORIGIN_SZDTSZ02  ORIGIN_SZDTSZ03  ORIGIN_SZDTSZ13  ORIGIN_SZGLSZ01  \n     -3.9057711       -3.4152419       -3.0183438       -1.7812384  \nORIGIN_SZGLSZ02  ORIGIN_SZGLSZ03  ORIGIN_SZGLSZ04  ORIGIN_SZGLSZ05  \n     -0.1074991       -0.2461106        0.8657186        0.5871393  \nORIGIN_SZHGSZ01  ORIGIN_SZHGSZ02  ORIGIN_SZHGSZ03  ORIGIN_SZHGSZ04  \n      0.3543819        0.4218178        0.2411309        0.8180622  \nORIGIN_SZHGSZ05  ORIGIN_SZHGSZ06  ORIGIN_SZHGSZ07  ORIGIN_SZHGSZ08  \n      1.2173687       -0.1826300        0.3172839       -0.1151369  \nORIGIN_SZHGSZ09  ORIGIN_SZHGSZ10  ORIGIN_SZJESZ01  ORIGIN_SZJESZ02  \n     -1.2873441       -3.3783178        0.4859234        0.1766088  \nORIGIN_SZJESZ03  ORIGIN_SZJESZ04  ORIGIN_SZJESZ05  ORIGIN_SZJESZ06  \n     -0.2177441       -1.5532182       -2.3332926        0.3007382  \nORIGIN_SZJESZ07  ORIGIN_SZJESZ08  ORIGIN_SZJESZ09  ORIGIN_SZJESZ10  \n     -1.9687994       -1.3032070        0.5762635       -1.4423113  \nORIGIN_SZJESZ11  ORIGIN_SZJWSZ01  ORIGIN_SZJWSZ02  ORIGIN_SZJWSZ03  \n     -1.9720897        0.3808627        0.7963999        1.5429636  \nORIGIN_SZJWSZ04  ORIGIN_SZJWSZ05  ORIGIN_SZJWSZ06  ORIGIN_SZJWSZ07  \n      0.6410760       -2.1571049       -1.5174532       -2.7089963  \nORIGIN_SZJWSZ08  ORIGIN_SZJWSZ09  ORIGIN_SZKLSZ01  ORIGIN_SZKLSZ02  \n      1.5343415        1.8837410        0.1081286       -0.8844695  \nORIGIN_SZKLSZ03  ORIGIN_SZKLSZ04  ORIGIN_SZKLSZ05  ORIGIN_SZKLSZ06  \n     -0.6872640       -2.2090319       -1.1728726       -6.1162315  \nORIGIN_SZKLSZ07  ORIGIN_SZKLSZ08  ORIGIN_SZLKSZ01  ORIGIN_SZMDSZ01  \n     -1.4082749       -1.7781551       -2.0531568       -0.8825639  \nORIGIN_SZMDSZ02  ORIGIN_SZMDSZ03  ORIGIN_SZMPSZ01  ORIGIN_SZMPSZ02  \n     -0.6219993       -2.0840156       -0.9659093       -1.0411153  \nORIGIN_SZMPSZ03  ORIGIN_SZMUSZ02  ORIGIN_SZNTSZ01  ORIGIN_SZNTSZ02  \n      0.0001659       -3.7599031       -3.0388366       -3.4230640  \nORIGIN_SZNTSZ03  ORIGIN_SZNTSZ05  ORIGIN_SZNTSZ06  ORIGIN_SZNVSZ01  \n     -0.9094796       -4.0861681       -3.9497128        0.3235636  \nORIGIN_SZNVSZ02  ORIGIN_SZNVSZ03  ORIGIN_SZNVSZ04  ORIGIN_SZNVSZ05  \n     -0.6946748       -1.0540196       -0.9897977       -2.2578432  \nORIGIN_SZPGSZ01  ORIGIN_SZPGSZ02  ORIGIN_SZPGSZ03  ORIGIN_SZPGSZ04  \n      0.2399827       -0.3352342        0.9515148        1.3998952  \nORIGIN_SZPGSZ05  ORIGIN_SZPLSZ01  ORIGIN_SZPLSZ02  ORIGIN_SZPLSZ03  \n      0.4451629       -0.9705918       -1.0670151       -2.1229124  \nORIGIN_SZPLSZ04  ORIGIN_SZPLSZ05  ORIGIN_SZPNSZ01  ORIGIN_SZPNSZ02  \n     -3.0911932       -2.1705708        0.9052637       -0.1720425  \nORIGIN_SZPNSZ03  ORIGIN_SZPNSZ04  ORIGIN_SZPNSZ05  ORIGIN_SZPRSZ01  \n     -2.3973459       -3.4483689       -2.0588530       -0.6399015  \nORIGIN_SZPRSZ02  ORIGIN_SZPRSZ03  ORIGIN_SZPRSZ04  ORIGIN_SZPRSZ05  \n      0.8122270        0.3990960       -0.8485348        0.8008791  \nORIGIN_SZPRSZ06  ORIGIN_SZPRSZ07  ORIGIN_SZPRSZ08  ORIGIN_SZQTSZ01  \n     -1.4498806       -3.2025045       -0.5862269       -0.1859270  \nORIGIN_SZQTSZ02  ORIGIN_SZQTSZ03  ORIGIN_SZQTSZ04  ORIGIN_SZQTSZ05  \n     -0.8715122       -0.1259816       -1.4620032       -0.6675643  \nORIGIN_SZQTSZ06  ORIGIN_SZQTSZ07  ORIGIN_SZQTSZ08  ORIGIN_SZQTSZ09  \n     -0.8190026       -1.5189403       -0.4976238       -0.9006162  \nORIGIN_SZQTSZ10  ORIGIN_SZQTSZ11  ORIGIN_SZQTSZ12  ORIGIN_SZQTSZ13  \n     -0.6690184       -2.5203437       -3.0461675       -0.7501068  \nORIGIN_SZQTSZ14  ORIGIN_SZQTSZ15  ORIGIN_SZRCSZ01  ORIGIN_SZRCSZ06  \n     -1.9321849       -0.9576828       -1.8167951       -0.5560563  \nORIGIN_SZRVSZ01  ORIGIN_SZRVSZ02  ORIGIN_SZRVSZ03  ORIGIN_SZRVSZ04  \n     -2.8862570       -3.1555662       -2.9836089       -3.5520422  \nORIGIN_SZRVSZ05  ORIGIN_SZSBSZ01  ORIGIN_SZSBSZ02  ORIGIN_SZSBSZ03  \n     -2.5866584        0.2867444       -0.9012334        0.8311038  \nORIGIN_SZSBSZ04  ORIGIN_SZSBSZ05  ORIGIN_SZSBSZ06  ORIGIN_SZSBSZ07  \n      0.4044170       -0.2661845       -0.9023075        0.0505870  \nORIGIN_SZSBSZ08  ORIGIN_SZSBSZ09  ORIGIN_SZSESZ02  ORIGIN_SZSESZ03  \n     -1.1158011       -0.9682835        1.1452735        1.2815277  \nORIGIN_SZSESZ04  ORIGIN_SZSESZ05  ORIGIN_SZSESZ06  ORIGIN_SZSESZ07  \n      0.8085857       -0.2329413        1.0576879       -2.3165908  \nORIGIN_SZSGSZ01  ORIGIN_SZSGSZ02  ORIGIN_SZSGSZ03  ORIGIN_SZSGSZ04  \n     -0.6606350       -1.3638984        0.1152591        0.2954067  \nORIGIN_SZSGSZ05  ORIGIN_SZSGSZ06  ORIGIN_SZSGSZ07  ORIGIN_SZSKSZ01  \n     -2.0792678        0.4563227       -0.8955254       -0.3184402  \nORIGIN_SZSKSZ02  ORIGIN_SZSKSZ03  ORIGIN_SZSKSZ04  ORIGIN_SZSKSZ05  \n      1.1160484       -0.2566692       -1.5781827       -0.2724361  \nORIGIN_SZSLSZ01  ORIGIN_SZSLSZ04  ORIGIN_SZSRSZ01  ORIGIN_SZTHSZ01  \n     -2.4458625       -0.0987076       -2.2584977       -2.5878524  \nORIGIN_SZTHSZ03  ORIGIN_SZTHSZ04  ORIGIN_SZTHSZ06  ORIGIN_SZTMSZ01  \n     -0.8101746       -2.4186655       -1.7080541       -0.2193476  \nORIGIN_SZTMSZ02  ORIGIN_SZTMSZ03  ORIGIN_SZTMSZ04  ORIGIN_SZTMSZ05  \n      1.7772464        1.0051343        0.1642370       -1.2878706  \nORIGIN_SZTNSZ01  ORIGIN_SZTNSZ02  ORIGIN_SZTNSZ03  ORIGIN_SZTNSZ04  \n     -1.7163504       -1.6508988       -2.1545577       -0.3949120  \nORIGIN_SZTPSZ01  ORIGIN_SZTPSZ02  ORIGIN_SZTPSZ03  ORIGIN_SZTPSZ04  \n     -0.8058100        0.5369060       -0.7779333       -0.8153581  \nORIGIN_SZTPSZ05  ORIGIN_SZTPSZ06  ORIGIN_SZTPSZ07  ORIGIN_SZTPSZ08  \n     -0.5073676        0.0847301       -0.5839519       -1.0577941  \nORIGIN_SZTPSZ09  ORIGIN_SZTPSZ10  ORIGIN_SZTPSZ11  ORIGIN_SZTPSZ12  \n     -0.9067707       -1.1362091       -0.2374621       -0.8028874  \nORIGIN_SZTSSZ01  ORIGIN_SZTSSZ02  ORIGIN_SZTSSZ03  ORIGIN_SZTSSZ04  \n     -2.7809271        0.0425804        0.1142369       -0.6186261  \nORIGIN_SZTSSZ05  ORIGIN_SZTSSZ06  ORIGIN_SZWCSZ01  ORIGIN_SZWCSZ02  \n     -1.0846732        0.3980173        1.3545143       -2.9863278  \nORIGIN_SZWCSZ03  ORIGIN_SZWDSZ01  ORIGIN_SZWDSZ02  ORIGIN_SZWDSZ03  \n     -5.0504916        1.5238429        0.2832576        1.3702524  \nORIGIN_SZWDSZ04  ORIGIN_SZWDSZ05  ORIGIN_SZWDSZ06  ORIGIN_SZWDSZ07  \n      1.0248225        0.2356778        0.3146925       -1.4971897  \nORIGIN_SZWDSZ08  ORIGIN_SZWDSZ09  ORIGIN_SZYSSZ01  ORIGIN_SZYSSZ02  \n     -0.8894079        1.4437633       -0.2519398        0.8726785  \nORIGIN_SZYSSZ03  ORIGIN_SZYSSZ04  ORIGIN_SZYSSZ05  ORIGIN_SZYSSZ06  \n      1.7868139        0.8418040        0.4292096       -0.7459961  \nORIGIN_SZYSSZ07  ORIGIN_SZYSSZ08  ORIGIN_SZYSSZ09  DESTIN_SZAMSZ02  \n     -0.8422281        0.1829428        1.1159712        0.0694567  \nDESTIN_SZAMSZ03  DESTIN_SZAMSZ04  DESTIN_SZAMSZ05  DESTIN_SZAMSZ06  \n      0.0760100       -1.1306391       -1.0751133       -0.9624298  \nDESTIN_SZAMSZ07  DESTIN_SZAMSZ08  DESTIN_SZAMSZ09  DESTIN_SZAMSZ10  \n     -1.5060319       -0.4813202       -1.0220675        0.1235142  \nDESTIN_SZAMSZ11  DESTIN_SZAMSZ12  DESTIN_SZBDSZ01  DESTIN_SZBDSZ02  \n     -0.8917993        0.0195208        0.9736349       -0.1969470  \nDESTIN_SZBDSZ03  DESTIN_SZBDSZ04  DESTIN_SZBDSZ05  DESTIN_SZBDSZ06  \n      0.1266471        1.1608485        0.9293840        0.4090567  \nDESTIN_SZBDSZ07  DESTIN_SZBDSZ08  DESTIN_SZBKSZ01  DESTIN_SZBKSZ02  \n     -0.8171478       -1.5895287       -1.3793311       -0.5253670  \nDESTIN_SZBKSZ03  DESTIN_SZBKSZ04  DESTIN_SZBKSZ05  DESTIN_SZBKSZ06  \n     -1.0095362       -0.5662858       -0.9406607       -1.3129276  \nDESTIN_SZBKSZ07  DESTIN_SZBKSZ08  DESTIN_SZBKSZ09  DESTIN_SZBLSZ01  \n      0.0120605       -1.3658471       -0.1771310       -0.8175223  \nDESTIN_SZBLSZ02  DESTIN_SZBLSZ03  DESTIN_SZBLSZ04  DESTIN_SZBMSZ01  \n      0.1631280        1.2598494       -0.5642975        0.6921844  \nDESTIN_SZBMSZ02  DESTIN_SZBMSZ03  DESTIN_SZBMSZ04  DESTIN_SZBMSZ05  \n     -0.1209392       -0.2373881       -0.0407117       -0.2363309  \nDESTIN_SZBMSZ06  DESTIN_SZBMSZ07  DESTIN_SZBMSZ08  DESTIN_SZBMSZ09  \n     -1.1930710        0.4625103       -0.8604731       -2.1290239  \nDESTIN_SZBMSZ10  DESTIN_SZBMSZ11  DESTIN_SZBMSZ12  DESTIN_SZBMSZ13  \n     -1.4617153       -1.3234050       -0.8399230        0.1366529  \nDESTIN_SZBMSZ14  DESTIN_SZBMSZ15  DESTIN_SZBMSZ16  DESTIN_SZBMSZ17  \n     -1.0491968       -0.6726684       -1.4011734       -1.5682752  \nDESTIN_SZBPSZ01  DESTIN_SZBPSZ02  DESTIN_SZBPSZ03  DESTIN_SZBPSZ04  \n     -1.1120017       -2.0833466       -1.6937265       -0.7964999  \nDESTIN_SZBPSZ05  DESTIN_SZBPSZ06  DESTIN_SZBPSZ07  DESTIN_SZBSSZ01  \n      0.2109118       -1.1808365       -0.2077428        0.3164175  \nDESTIN_SZBSSZ02  DESTIN_SZBSSZ03  DESTIN_SZBTSZ01  DESTIN_SZBTSZ02  \n     -0.4852688        0.4130432        0.6215095       -0.0145076  \nDESTIN_SZBTSZ03  DESTIN_SZBTSZ04  DESTIN_SZBTSZ05  DESTIN_SZBTSZ06  \n      0.4919981       -0.6957555        0.3329814       -0.1333295  \nDESTIN_SZBTSZ07  DESTIN_SZBTSZ08  DESTIN_SZCBSZ01  DESTIN_SZCCSZ01  \n     -1.4449581       -0.7079056       -5.7344725       -0.0009541  \nDESTIN_SZCHSZ01  DESTIN_SZCHSZ02  DESTIN_SZCHSZ03  DESTIN_SZCKSZ01  \n     -0.2083016        0.5369606        2.5530638       -0.5725975  \nDESTIN_SZCKSZ02  DESTIN_SZCKSZ03  DESTIN_SZCKSZ04  DESTIN_SZCKSZ05  \n     -1.1181852        0.1156680       -0.8647725       -1.1641791  \nDESTIN_SZCKSZ06  DESTIN_SZCLSZ01  DESTIN_SZCLSZ02  DESTIN_SZCLSZ03  \n     -0.4397612        0.1930552       -2.0436501       -0.9338571  \nDESTIN_SZCLSZ04  DESTIN_SZCLSZ05  DESTIN_SZCLSZ06  DESTIN_SZCLSZ07  \n      0.0532041       -1.0782781        0.4068171       -0.3579507  \nDESTIN_SZCLSZ08  DESTIN_SZCLSZ09  DESTIN_SZDTSZ02  DESTIN_SZDTSZ03  \n     -0.2487993        0.1611080       -1.7308348       -0.5994253  \nDESTIN_SZDTSZ13  DESTIN_SZGLSZ01  DESTIN_SZGLSZ02  DESTIN_SZGLSZ03  \n     -1.3685031       -0.0910001       -0.0692224        0.6493421  \nDESTIN_SZGLSZ04  DESTIN_SZGLSZ05  DESTIN_SZHGSZ01  DESTIN_SZHGSZ02  \n      0.9327947        0.8161728        0.0658625       -0.8134329  \nDESTIN_SZHGSZ03  DESTIN_SZHGSZ04  DESTIN_SZHGSZ05  DESTIN_SZHGSZ06  \n     -1.3546132       -0.4500588       -0.5026431       -0.8673686  \nDESTIN_SZHGSZ07  DESTIN_SZHGSZ08  DESTIN_SZHGSZ09  DESTIN_SZHGSZ10  \n      0.0560490       -0.0443189       -0.0126355       -3.5821793  \nDESTIN_SZJESZ01  DESTIN_SZJESZ02  DESTIN_SZJESZ03  DESTIN_SZJESZ04  \n     -0.3704281       -0.7369159       -0.8985484       -1.0511995  \nDESTIN_SZJESZ05  DESTIN_SZJESZ06  DESTIN_SZJESZ07  DESTIN_SZJESZ08  \n     -1.5324974        0.3105267       -1.3234483       -0.6559742  \nDESTIN_SZJESZ09  DESTIN_SZJESZ10  DESTIN_SZJESZ11  DESTIN_SZJWSZ01  \n      0.2663752        0.8529026        0.5559641       -0.9790971  \nDESTIN_SZJWSZ02  DESTIN_SZJWSZ03  DESTIN_SZJWSZ04  DESTIN_SZJWSZ05  \n     -0.8746590        0.5689062        0.4520963       -1.0249671  \nDESTIN_SZJWSZ06  DESTIN_SZJWSZ07  DESTIN_SZJWSZ08  DESTIN_SZJWSZ09  \n     -0.7451483       -2.8453099       -0.3372309        1.0505330  \nDESTIN_SZKLSZ01  DESTIN_SZKLSZ02  DESTIN_SZKLSZ03  DESTIN_SZKLSZ04  \n     -0.2334836       -0.5416148       -0.8026495       -1.2918594  \nDESTIN_SZKLSZ05  DESTIN_SZKLSZ06  DESTIN_SZKLSZ07  DESTIN_SZKLSZ08  \n     -0.4069101       -2.5333101       -0.6623343       -0.1408205  \nDESTIN_SZLKSZ01  DESTIN_SZMDSZ01  DESTIN_SZMDSZ02  DESTIN_SZMDSZ03  \n     -1.2639235       -1.5655800       -0.9767682       -3.3328109  \nDESTIN_SZMPSZ01  DESTIN_SZMPSZ02  DESTIN_SZMPSZ03  DESTIN_SZMUSZ02  \n     -0.4552859       -0.5386560        0.4952000       -1.4434175  \nDESTIN_SZNTSZ01  DESTIN_SZNTSZ02  DESTIN_SZNTSZ03  DESTIN_SZNTSZ05  \n     -2.9194067       -1.3780179       -0.5044699       -2.0017134  \nDESTIN_SZNTSZ06  DESTIN_SZNVSZ01  DESTIN_SZNVSZ02  DESTIN_SZNVSZ03  \n     -3.8120537       -0.1071506       -0.0274710        0.1076352  \nDESTIN_SZNVSZ04  DESTIN_SZNVSZ05  DESTIN_SZPGSZ01  DESTIN_SZPGSZ02  \n     -1.2087250       -1.0058290       -1.2029931       -1.2878671  \nDESTIN_SZPGSZ03  DESTIN_SZPGSZ04  DESTIN_SZPGSZ05  DESTIN_SZPLSZ01  \n     -0.1520894       -0.1985959       -1.5290983       -0.3567934  \nDESTIN_SZPLSZ02  DESTIN_SZPLSZ03  DESTIN_SZPLSZ04  DESTIN_SZPLSZ05  \n     -1.7114351       -0.3241427       -1.7117196       -0.5086379  \nDESTIN_SZPNSZ01  DESTIN_SZPNSZ02  DESTIN_SZPNSZ03  DESTIN_SZPNSZ04  \n      0.2026781        0.8313754       -0.4041254        1.5814539  \nDESTIN_SZPNSZ05  DESTIN_SZPRSZ01  DESTIN_SZPRSZ02  DESTIN_SZPRSZ03  \n      1.1823430       -1.1057553        0.0895099        0.6921925  \nDESTIN_SZPRSZ04  DESTIN_SZPRSZ05  DESTIN_SZPRSZ06  DESTIN_SZPRSZ07  \n     -0.2848336        0.1744480        0.4279206       -1.5123108  \nDESTIN_SZPRSZ08  DESTIN_SZQTSZ01  DESTIN_SZQTSZ02  DESTIN_SZQTSZ03  \n     -0.5650226       -0.5952360       -0.7728170       -0.5066812  \nDESTIN_SZQTSZ04  DESTIN_SZQTSZ05  DESTIN_SZQTSZ06  DESTIN_SZQTSZ07  \n     -0.6398414       -0.4354527       -0.6597391       -0.9392696  \nDESTIN_SZQTSZ08  DESTIN_SZQTSZ09  DESTIN_SZQTSZ10  DESTIN_SZQTSZ11  \n      0.4617774       -0.3174497        0.1993449        0.2551535  \nDESTIN_SZQTSZ12  DESTIN_SZQTSZ13  DESTIN_SZQTSZ14  DESTIN_SZQTSZ15  \n     -0.1662603        0.5500978        0.5364435        1.3611043  \nDESTIN_SZRCSZ01  DESTIN_SZRCSZ06  DESTIN_SZRVSZ01  DESTIN_SZRVSZ02  \n     -0.1034049       -1.0633902       -1.5486221       -2.4092611  \nDESTIN_SZRVSZ03  DESTIN_SZRVSZ04  DESTIN_SZRVSZ05  DESTIN_SZSBSZ01  \n     -1.5172079       -1.1663615       -2.2404292       -1.3783780  \nDESTIN_SZSBSZ02  DESTIN_SZSBSZ03  DESTIN_SZSBSZ04  DESTIN_SZSBSZ05  \n     -1.4445213        0.5149906        0.2389086       -1.2737442  \nDESTIN_SZSBSZ06  DESTIN_SZSBSZ07  DESTIN_SZSBSZ08  DESTIN_SZSBSZ09  \n     -1.8683520       -0.5993154        0.8156302        0.0900611  \nDESTIN_SZSESZ02  DESTIN_SZSESZ03  DESTIN_SZSESZ04  DESTIN_SZSESZ05  \n     -0.6397704        0.1714103       -1.0596175       -0.8071891  \nDESTIN_SZSESZ06  DESTIN_SZSESZ07  DESTIN_SZSGSZ01  DESTIN_SZSGSZ02  \n     -0.5580934       -3.1448863       -0.1795225       -0.2986570  \nDESTIN_SZSGSZ03  DESTIN_SZSGSZ04  DESTIN_SZSGSZ05  DESTIN_SZSGSZ06  \n     -0.4074671       -0.1505164       -1.9908372        0.6715268  \nDESTIN_SZSGSZ07  DESTIN_SZSISZ01  DESTIN_SZSKSZ01  DESTIN_SZSKSZ02  \n     -0.4494757       -0.5517983       -0.4749154        0.9400302  \nDESTIN_SZSKSZ03  DESTIN_SZSKSZ04  DESTIN_SZSKSZ05  DESTIN_SZSLSZ01  \n     -0.2800377       -1.2570212       -0.2600474       -0.7775604  \nDESTIN_SZSLSZ04  DESTIN_SZSRSZ01  DESTIN_SZTHSZ01  DESTIN_SZTHSZ03  \n     -0.8586515       -1.1370887       -4.3259988       -2.6632914  \nDESTIN_SZTHSZ04  DESTIN_SZTHSZ06  DESTIN_SZTMSZ01  DESTIN_SZTMSZ02  \n     -3.1000906       -2.5952642       -0.2092828        1.8238139  \nDESTIN_SZTMSZ03  DESTIN_SZTMSZ04  DESTIN_SZTMSZ05  DESTIN_SZTNSZ01  \n      0.8518259        1.0222812        0.6323777       -0.3336078  \nDESTIN_SZTNSZ02  DESTIN_SZTNSZ03  DESTIN_SZTNSZ04  DESTIN_SZTPSZ01  \n     -1.0820469       -1.4186505       -0.3058199       -0.4872299  \nDESTIN_SZTPSZ02  DESTIN_SZTPSZ03  DESTIN_SZTPSZ04  DESTIN_SZTPSZ05  \n      0.7158441       -0.4314229       -1.5898245       -1.0445550  \nDESTIN_SZTPSZ06  DESTIN_SZTPSZ07  DESTIN_SZTPSZ08  DESTIN_SZTPSZ09  \n     -0.4319582       -2.1602303       -1.1920493       -0.2022481  \nDESTIN_SZTPSZ10  DESTIN_SZTPSZ11  DESTIN_SZTPSZ12  DESTIN_SZTSSZ01  \n     -1.2464793       -0.0808445       -0.6784376       -1.5845062  \nDESTIN_SZTSSZ02  DESTIN_SZTSSZ03  DESTIN_SZTSSZ04  DESTIN_SZTSSZ05  \n     -0.1886010        0.6525526        0.5285464        1.4670106  \nDESTIN_SZTSSZ06  DESTIN_SZWCSZ01  DESTIN_SZWCSZ02  DESTIN_SZWCSZ03  \n      2.5043588        1.9787931       -2.2593108       -3.1897655  \nDESTIN_SZWDSZ01  DESTIN_SZWDSZ02  DESTIN_SZWDSZ03  DESTIN_SZWDSZ04  \n      1.0476108       -1.3176990        0.3432057       -0.7895927  \nDESTIN_SZWDSZ05  DESTIN_SZWDSZ06  DESTIN_SZWDSZ07  DESTIN_SZWDSZ08  \n     -0.8751665       -0.2106221       -1.6050834       -0.5124717  \nDESTIN_SZWDSZ09  DESTIN_SZYSSZ01  DESTIN_SZYSSZ02  DESTIN_SZYSSZ03  \n      0.3813542        0.0853753       -0.3227172       -0.4151283  \nDESTIN_SZYSSZ04  DESTIN_SZYSSZ05  DESTIN_SZYSSZ06  DESTIN_SZYSSZ07  \n     -0.4637327       -1.5888242       -1.4606209       -0.7839065  \nDESTIN_SZYSSZ08  DESTIN_SZYSSZ09        log(DIST)  \n      0.6265412        0.1520067       -1.8468315  \n\nDegrees of Freedom: 14470 Total (i.e. Null);  13912 Residual\nNull Deviance:      47090000 \nResidual Deviance: 10420000     AIC: 10510000\n\n\n\nmodel_list &lt;- list(originConstrained=orcSIM_Poisson, doublyConstrained=dbcSIM_Poisson)\n\n\ncompare_performance(model_list, metrics=\"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\noriginConstrained |   glm | 2613.236\ndoublyConstrained |   glm | 1906.694\n\n\nNotes: smaller RMSE -&gt; better model\nNotes: if there is an outlier, try to remove and compare with current model."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/data/geospatial/Business.html",
    "href": "In-class_Exercise/In-class_Ex4/data/geospatial/Business.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Exercise/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class introduces an alternative R package to spdep package. The package is called sfdep. According to Josiah Parry, the developer of the package, \"sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.\""
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and Loading the R Packages\nFive R packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse, and knitr.\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, install and load sf, tmap, sfdep, tidyverse and knitr packages into R environment.\n\n\n\n\nShow the code\npacman::p_load( sf, sfdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#the-data",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#the-data",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "3 The Data",
    "text": "3 The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#getting-data-in-r-environment",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#getting-data-in-r-environment",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "4 Getting Data in R Environment",
    "text": "4 Getting Data in R Environment\n\n4.1 Importing geospatial data\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, import Hunan shapefile into R environment as an sf data frame.\n\n\n\n\nShow the code\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n4.2 Importing attribute table\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, import Hunan_2012.csv into R environment as an tibble data frame.\n\n\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n4.3 Combining both data frame by using left join\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, combine the Hunan sf data frame and Hunan_2012 data frame. Ensure that the output is an sf data frame.\n\n\n\n\nShow the code\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order to retain the geospatial properties, the left data frame must the sf data.frame (i.e. hunan)\n\n\n\n\n4.4 Plotting a choropleth map\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, plot a choropleth map showing the distribution of GDPPC of Hunan Province.\n\n\nThe choropleth should look similar to ther figure below.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#deriving-continuity-spatial-weights",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#deriving-continuity-spatial-weights",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "5 Deriving Continuity Spatial Weights",
    "text": "5 Deriving Continuity Spatial Weights\nBy and large, there are two types of spatial weights, they are contiguity wights and distance-based weights. In this section, you will learn how to derive contiguity spatial weights by using sfdep.\nTwo steps are required to derive a contiguity spatial weights, they are:\n\nidentifying contiguity neighbour list by st_contiguity() of sfdep package, and\nderiving the contiguity spatial weights by using st_weights() of sfdep package\n\nIn this section, we will learn how to derive the contiguity neighbour list and contiguity spatial weights separately. Then, we will learn how to combine both steps into a single process.\n\n5.1 Identifying Continuity Spatial Weights: Queen’s Method\nIn the code chunk below st_contiguity() is used to derive a contiguity neighbour list by using Queen's method.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before=1)\n\n\n\n\n\n\n\nNote\n\n\n\n.before=1 -&gt; put nb and wt at the front of the tibble dataset\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBy default, queen argument is TRUE. If you do not specify queen = FALSE, this function will return a list of first order neighbours by using the Queen criteria. Rooks method will be used to identify the first order neighbour if queen = FALSE is used.\n\n\nThe code chunk below is used to print the summary of the first lag neighbour list (i.e. nb) .\n\nsummary(wm_q$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.\nTo view the content of the data table, you can either display the output data frame on RStudio data viewer or by printing out the first ten records by using the code chunk below.\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nThe print shows that polygon 1 has five neighbours. They are polygons number 2, 3, 4, 57,and 85.\nOne of the advantage of sfdep over spdep is that the output is an sf tibble data frame.\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you learned in previous lesson, display nb_queen sf tibble data frame in a table display.\n\n\n\n\nShow the code\nkable(head(wm_q,n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\n0.25, 0.25, 0.25, 0.25\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n0.25, 0.25, 0.25, 0.25\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\n0.25, 0.25, 0.25, 0.25\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\n0.25, 0.25, 0.25, 0.25\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\n0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\n5.2 Identify contiguity neighbours: Rooks' method\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you just learned, derive a contiguity neighbour list using Rooks' method.\n\n\n\n\nShow the code\nwm_r &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry, queen=FALSE),\n         wt = st_weights(nb, style = \"W\"),\n         .before=1)\n\n\n\n\n5.3 Identifying higher order neighbors\nThere are times that we need to identify high order contiguity neighbours. To accomplish the task, st_nb_lag_cumul() should be used as shown in the code chunk below.\n\n\n\n\n\n\nDo It Yourself!\n\n\n\nUsing the steps you just learned, derive a contiguity neighbour list using lag 2 Queen's method.\n\n\n\n\nShow the code\nnb2_queen &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\n\nNote that if the order is 2, the result contains both 1st and 2nd order neighbors as shown on the print below.\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n5.4 Computing local Moran’s I\nIn this section, you will learn how to compute Local Moran's I of GDPPC at county level by using local_moran() of sfdep package.\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations\np_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations\np_ii_sim: For localmoran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative=\np_folded_sim: the simulation folded [0, 0.5] range ranked p-value based on crand.py of pysal\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\n\n\n\n\n\nImportant\n\n\n\nunnest() of tidyr package is used to expand a list-column containing data frames into rows and columns.\n\n\n\n\n5.5 Visualising local Moran's I\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n5.6 Visualising p-value of local Moran's I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\n\n\n\n\n5.7 Visualising local Moran's I and p-value\nFor effective comparison, it will be better for us to plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#deriving-continuity-spatial-weights-queens-method",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#deriving-continuity-spatial-weights-queens-method",
    "title": "In-class_Ex2",
    "section": "5 Deriving Continuity Spatial Weights: Queen’s Method",
    "text": "5 Deriving Continuity Spatial Weights: Queen’s Method\nIn the code below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before=1)\n\nNotes: ,before1 -&gt; put nb and wt at the front of the tibble dataset\n\n5.1 Computing local Moran’s I:\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\n\npacman::p_load( sf, sfdep, tmap, tidyverse, knitr, plotly)\n\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n5.2 Creating a Time Series Cube\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan, .loc_col =\"County\",\n                      .time_col =\"Year\")\n\nNote: spacetime is used to create a spacetime cube.\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\n\n5.3 Identifying Neighbours and Derive Inverse Distance Weights\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb =include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb,geometry,\n                                  scale = 1,\n                                  alpha=1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nNotes:\n\nactivate() of dplyr package is used to activate the geometry context.\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen, we will activate the data context again and copy over the b and wt columns to each time-slic using set_nbs () and set_wts()\n\n\n\n5.4 Computing Gi*\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n5.5 Performing Emerging Hotspot Analysis\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n nsim = 99\n)\n\n\n\n5.6 Visualization\n\nhunan_ehsa &lt;-hunan %&gt;%\n  left_join(ehsa,\n            by= join_by(County==location))\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt;0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons()+\n  tm_borders(alpha=0.5)+\ntm_shape(ehsa_sig)+\n  tm_fill('classification')+\n  tm_borders(alpha=0.4)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Exercise/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to compute spatial weights using R including:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#overview",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to compute spatial weights using R including:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#the-study-area-and-data",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#the-study-area-and-data",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "2 The Study Area and Data",
    "text": "2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n2.1 Getting Started\nBefore we get started, we need to ensure that spdep, sf, tmap, knitr and tidyverse packages of R are currently installed in your R.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "3 Getting the Data Into R Environment",
    "text": "3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex8\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#visualising-regional-development-indicator",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#visualising-regional-development-indicator",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "4 Visualising Regional Development Indicator",
    "text": "4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#computing-contiguity-spatial-weights",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "5 Computing Contiguity Spatial Weights",
    "text": "5 Computing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n5.1 Computing (QUEEN) contiguity based neighbours\nBelow are the concept of QUEEN contiguity.\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrieve the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\n#hunan$NAME_3[c(2,3,4,57,85)]\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nBe warned: The output might cut across several pages. Save the trees if you are going to print out the report.\n\n\n5.2 Creating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n5.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n5.3.1 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\nNotes:\npch: plot character (pch=19 means solid circles as plotting symbol)\ncex: character expansion (True: add points to existing plot, FALSE: start a new plot)\n\n\n5.3.2 Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n5.3.3 Plotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#computing-distance-based-neighbours",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#computing-distance-based-neighbours",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "6 Computing distance based neighbours",
    "text": "6 Computing distance based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n6.1 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nAns: On average, each region is connected to around 3.681818 other regions within the specified distance threshold.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n6.2.1 Plotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\n6.3.1 Plotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#weights-based-on-idw",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#weights-based-on-idw",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "7 Weights based on IDW",
    "text": "7 Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n7.1 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\nNotes: B is the basic binary coding, W is row standardised (sums over all links to n)."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#application-of-spatial-weight-matrix",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "8 Application of Spatial Weight Matrix",
    "text": "8 Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n8.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nQuestion: Can you see the meaning of Spatial lag with row-standardized weights now?\nAns: Yes, the spatial lag with row-standardized weights provides a measure of spatial autocorrelation, indicating how the GDPPC values in each region are related to the values in neighboring regions, with weights that account for the spatial structure in the data.\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n8.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\nAns: Yes, this provides a measure of spatial dependence, indicating how the GDPPC values in each region are related to the sum of GDPPC values in neighboring regions.\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n8.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n8.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#references",
    "href": "Hands-on_Exercise/Hands-on_Ex8/Hands-on_Ex8.html#references",
    "title": "Hands-on_Ex8: Spatial Weights and Applications",
    "section": "9 References",
    "text": "9 References\n\nCreating Neighbours using sf objects"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFor the purpose of this exercise, four r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data\n\n3.1 Importing the OD data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nLet use display the odbus tibble data table by using the code chunk below.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nA quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n3.2 Extracting the study data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nTable below shows the content of odbus6_9\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThe code chunk below will be used to import the save odbus6_9.rds into R environment.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#working-with-geospatial-data",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#working-with-geospatial-data",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "4 Working with Geospatial Data",
    "text": "4 Working with Geospatial Data\nFor the purpose of this exercise, two geospatial data will be used. They are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in ESRI shapefile format.\n\n4.1 Importing geospatial data\nTwo geospatial data will be used in this exercise, they are:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\nwrite_rds(mpsz, \"data/rds/mpsz.rds\")  \n\n\nNote\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "5 Geospatial data wrangling",
    "text": "5 Geospatial data wrangling\n\n5.1 Combining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nNote\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame with the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nIt is time to save the output into an rds file format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "href": "Hands-on_Exercise/Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "title": "Hands-on_Ex3: Spatial Interaction Models",
    "section": "6 Visualising Spatial Interaction",
    "text": "6 Visualising Spatial Interaction\nIn this section, you will learn how to prepare a desire line by using stplanr package.\n\n6.1 Removing intra-zonal flows\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n6.2 Creating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n6.3 Visualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWarning\nBe patient, the rendering process takes more time because of the transparency argument (i.e. alpha)\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 200) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, I learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, I learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below install and load sf , tmap, tidyverse packages into R environment (p_load from pacman)\n\nsf is for importing, managing and processing geospatial data\ntmap is for drawing thematic maps\ntidyverse is for importing, wrangling and visualising data\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data\n\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#importing-data-into-r",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3 Importing Data into R",
    "text": "3 Importing Data into R\n\n\n3.1 The Data\nIn Hands-on Exercise 2, there are 2 datasets to be used:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n3.2 Importing Geospatial Data into R\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNote: only the first ten records will be displayed by default due to the size of the data.\n\n\n3.3 Importing Attribute Data into R\nNext, we will import respopagsex2000to2018.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n\n\n\n3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "4 Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n4.2 Things to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)Creating a choropleth map by using tmap’s elements\n\n\n\n4.3 Data classification methods of tmap\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n4.3.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n4.3.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n4.3.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n4.4 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n4.4.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nIn the code chunk below, pretty break data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of pretty break data classification method are very similar with equal data classification method, but using pretty break there are only 4 classes as the the function pretty prioritizes creating breaks at “nice” values that are easy to read on plots(visually appealing).\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe choice of the number of classes significantly influences how the data is visualized and how patterns are perceived:\n\n2 classes: This can result in a binary representation where only high and low values are distinguished. It might oversimplify the data, potentially masking subtle variations within each class.\n5 and 6 classes : This result provides a balanced representation of the data. It allows for a moderate level of detail without overwhelming the viewer.\n10 and 20 classes: Too many classes can result in a visually cluttered map, making it difficult for viewers to discern meaningful patterns.\n\n\n\n4.4.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.7113  0.7926  0.8561  0.8786 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n4.5 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n4.5.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n4.6 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n4.6.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n4.6.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n4.7 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.7.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n4.7.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.7.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n4.8 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#reference",
    "href": "Hands-on_Exercise/Hands-on_Ex2/Hands-on_Ex2.html#reference",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "5 Reference",
    "text": "5 Reference\n\n5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Exercise/Hands-on_Ex15/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "title": "Hands-on_Ex10",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 The analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.3 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex10",
    "section": "3 Getting the Data Into R Environment",
    "text": "3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#global-spatial-autocorrelation",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#global-spatial-autocorrelation",
    "title": "Hands-on_Ex10",
    "section": "4 Global Spatial Autocorrelation",
    "text": "4 Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns:\nH0: The GDPPC values are randomly distributed across Hunan following a completely random process\nThe small p-value and the positive Moran’s I statistic suggest that there is significant positive spatial autocorrelation in the hunan$GDPPC variable based on the provided spatial weights matrix. In other words, regions with similar GDPPC values tend to be spatially clustered in this dataset. The observed spatial pattern is unlikely to occur by random chance alone.\nNote: It implements a two-sided test as opposed to the one-sided test adopted in the above example (i.e. alternative = \"greater\"). A two-sided p-value is nothing more than twice the one-sided p-value. However, there is no important distinction in any of the documentation provided. Fortunately, the GDPPC value is so strongly clustered that both a one-sided and two-sided test produce the same outcome (a p-value close to 0).\n\n4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nQuestion: What statistical conclustion can you draw fro mthe output above?\nAns: The p-value of 0.001 is less than the conventional significance level of 0.05. Therefore, you would reject the null hypothesis of no spatial autocorrelation. The results suggest that the observed spatial pattern in the hunan$GDPPC variable, as measured by Moran’s I, is statistically significant and not likely due to random chance. The positive Moran’s I value indicates positive spatial autocorrelation, meaning similar values are spatially clustered in the dataset.\n\n\n4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nQuestion: What statistical observation can you draw from the output above?\nAns:\n\nThe distribution of simulated Moran’s I values under the null hypothesis provides a reference for what you would expect if spatial autocorrelation were due to random chance.\nThe observed Moran’s I value from the original data falls to the right of the distribution, indicating that the observed spatial autocorrelation is higher than what would be expected by random chance.\nThe summary statistics and histogram support the conclusion drawn from the p-value in the previous analysis. The distribution of simulated Moran’s I values suggests that the observed Moran’s I from the original data is statistically significant and unlikely to be due to random chance. The positive skewness implies that positive spatial autocorrelation is less common under the null hypothesis than would be expected by chance.\n\n\n\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n\n# Create a data frame for the simulated Moran's I values\nsim_data &lt;- data.frame(Moran_I = bperm$res)\n\n# Plot the histogram using ggplot2\nggplot(sim_data, aes(x = Moran_I)) +\n  geom_histogram(binwidth = 0.02, fill = \"skyblue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", size = 1)\n\n\n\n\n\n\n\n4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns: The small p-value of 0.0001526 suggests that the observed spatial pattern in the hunan$GDPPC variable, as measured by Geary’s C, is statistically significant. The observed Geary’s C statistic is significantly lower than what would be expected by random chance alone. This implies positive spatial autocorrelation, meaning similar values are clustered together in space. The conclusion is consistent with the alternative hypothesis that the expected spatial pattern is greater than the observed pattern.\n\n\n4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns: The p-value of 0.001 is less than the conventional significance level of 0.05. Therefore, you would reject the null hypothesis of no spatial autocorrelation. The results suggest that the observed spatial pattern in the hunan$GDPPC variable, as measured by Geary’s C, is statistically significant and not likely due to random chance. The positive alternative hypothesis indicates that the expected spatial pattern is greater than the observed pattern, implying positive spatial autocorrelation.\n\n\n4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nQuestion: What statistical observation can you draw from the output?\nAns:\n\nThe mean being close to the expected value (1.0) under the null hypothesis suggests that the simulation process is generating Geary’s C values consistent with spatial randomness.\nThe histogram shows that Geary’s C values approximates a normal distribution."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#spatial-correlogram",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#spatial-correlogram",
    "title": "Hands-on_Ex10",
    "section": "5 Spatial Correlogram",
    "text": "5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nQuestion: What statistical observation can you draw from the plot above?\nAns:\n\nLag 1, 2, 5 have highly significant Moran’s I values (indicated by ‘***’), suggesting significant spatial autocorrelation.\nLag 4 has a p-value of 0.226015, which is not significant at conventional levels (0.05).\n\n\n\n5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#cluster-and-outlier-analysis",
    "title": "Hands-on_Ex10",
    "section": "6 Cluster and Outlier Analysis",
    "text": "6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n6.1.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n6.1.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n6.1.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n6.1.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#creating-a-lisa-cluster-map",
    "title": "Hands-on_Ex10",
    "section": "7 Creating a LISA Cluster Map",
    "text": "7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n7.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n7.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\nQuestion: What statistical observations can you draw from the LISA map above?\nAns: The LISA map categorizes each observation into one of four quadrants: High-High, Insignificant, High-Low, and Low-High.\n\nHigh-High (HH): High values surrounded by high values.\nInsignificant : Low values surrounded by low values. (Mostly are insignificant)\nHigh-Low (HL): High values surrounded by low values.\nLow-High (LH): Low values surrounded by high values."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on_Ex10",
    "section": "8 Hot Spot and Cold Spot Area Analysis",
    "text": "8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#computing-gi-statistics",
    "href": "Hands-on_Exercise/Hands-on_Ex10/Hands-on_Ex10.html#computing-gi-statistics",
    "title": "Hands-on_Ex10",
    "section": "9 Computing Gi statistics",
    "text": "9 Computing Gi statistics\n\n9.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\nAns: High Gi values may represent hotspots where values are significantly higher than their neighbors, while low Gi values may represent coldspots with significantly lower values.\n\n\n9.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n9.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\nAns: When using adaptive distance weights in spatial analysis, the weights assigned to neighboring observations are not fixed but are adjusted based on the local characteristics of the data. This adaptation is often done to account for spatial heterogeneity, allowing the weights to vary across different regions."
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThis is the getting start paragraph."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is a learning journey of a student from Singapore Management University(SMU) in Master of IT in Business (MITB) program.\nThe course materials are from ISSS624 - Applied Geospatial Analytics."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment (p_load from pacman)\n\nsf is for importing, managing and processing geospatial data\ntidyverse is for importing, wrangling and visualising data\n\n\npacman:: p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "3 Importing Geospatial Data",
    "text": "3 Importing Geospatial Data\nIn this section, using st_read() of sf function, we will import several datasets:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\nNote: st_read() is used to read simple features from file/database\n\n3.1 Importing polygon feature data in shapefile format\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNote: dsn is used to define data path while layer is used to provide the shapefile name.\n\n\n3.2 Importing polyline feature data in shapefile format\n\ncyclingpath &lt;- st_read(dsn=\"data/geospatial\", layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\n3.3 Importing GIS data in kml format\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "4 Checking the Content of A Simple Feature Data Frame",
    "text": "4 Checking the Content of A Simple Feature Data Frame\n\n4.1 Working with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nNote: st_geometry is used to display basic information of feature class such as type of geometry , the geographic extend of the features and the coordinate system of the data.\n\n\n4.2 Working with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nNote: glimpse() report from dplyr is used to display the data type of each fields.\n\n\n4.3 Working with head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nNote: head() is to display the first n records."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5 Plotting the Geospatial Data",
    "text": "5 Plotting the Geospatial Data\n\nplot(mpsz)\n\n\n\n\nNote: plot() is used to plot the geospatial object for a quick look. By default, all the attributes of an sf object will be plotted up to reasonable maximum as shown above.\n\nplot(st_geometry(mpsz))\n\n\n\n\nNote: plot(st_geometry()) is used to plot only the geometry\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\nNote: plot(mpsz[“attribute”]) is used to plot specific attribute"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6 Working with Projection",
    "text": "6 Working with Projection\nIn this section, we will learn how to project a simple feature data frame from one coordinate system to another coordinate system a.k.a. projection transformation.\n\n6.1 Assigning EPSG code to a simple feature data frame\nCommon issue in importing geospatial data into R: coordinate system of the source data was either missing (due to missing .proj for ESRI shapefile, etc.) or wrongly assigned.\nCoordinate system of mpsz is shown as below:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nNote: st_crs() is used to retrieve coordinate reference system from object.\nmpsz is projected in svy21 as shown from the second line, but at the last line, it is mentioned that the EPSG is 9001. This is wrongly assigned because the correct EPSG code for svy21 is 3414.\nThen, we will assign the correct EPSG code to mpsz dataframe using st_set_crs().\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nThen, let us recheck the CSR again.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNote: There is a warning mentioning replacing crs does not reproject the data, and if we want to reproject the data, we can use st_tranform().\n\n\n6.2 Transforming the projection of preschool from wgs84 to svy21\nThe reason why it is essential to transform the original data from geographic coordinate system to projected coordinated system is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nFrom the print above, we notice the we need to reproject preschool from one coordinate system to another coordinate system mathematically using st_tranform().\n\npreschool3414 &lt;- st_transform(preschool, crs=3414)\n\nNote: In practice, we need to find out appropriate project coordinate system to use, but in the case about we want to project to svy21 with EPSG code 3414.\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nNote: The bounding box values are greater than 0-360 range of decimal degree which is commonly used by most geogrpahic coordinate system."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "7 Importing and Converting An Aspatial Data",
    "text": "7 Importing and Converting An Aspatial Data\nAspatial Data contains no geospatial data but there exists 2 field which capture the x- and y-coordinates of the data points.\nIn this section, we will learn how to import an aspatial data (i.e. listings data from Airbnb) into R environment and save it as tibble dataframe.\n\n7.1 Importing the aspatial data\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nTo check whether the data files are imported correctly, we check using below code\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nTwo useful fields are latitute and longitude in decimal format.\n\n\n7.2 Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings,\n                        coords = c(\"longitude\",\"latitude\"),\n                        crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotes:\n\ncoords requires you to provide column name of the x- and y-coordinates respectively.\ncrs requires you to provide the coordinate system in espg format.\n\nEPSG: 4326 is wgs84\nEPSG: 3414 is svy21\n\n%&gt;% is used to nest st_transform() to transform the newly created sumple feature data frame into svy21 projected coordinates sytem.\n\nLet us examine the content of the newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNote: new column geometry is created and “longitude” and “latitude” columns are dropped."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "8 Geoprocessing with sf package",
    "text": "8 Geoprocessing with sf package\nIn this section, we will learn how to perform geoprocessing (a.k.a. GIS analysis) functions buffering and point in polygon count.\n\n8.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nbuffer_cycling &lt;-st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n\nNote: st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nNote: the code above calculates the ares of the buffers\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nNote: sum() is used to derive the total land involved.\n\n\n8.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nNote: the above code is to identify preschool located inside each Planning Subzone using st_intersect () and to calculate numbers of preschools that fall in each Planning Subzone using length()\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nNote: summary() is used to check the summary statistics.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nNote: top_n is used to list the top n numbers of planning subzone with the most number of preschools.\nNext, we want to calculate the density of preschools by planning subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNote: st_area() is used to derive the area of each planning subzone.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nNote: mutate() is used to compute the density."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Exercise/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "9 Exploratory Data Analysis (EDA)",
    "text": "9 Exploratory Data Analysis (EDA)\n\n9.1 Histrogram\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nThe graph above is the basic, to obtain a higher quality plot, we can use ggplot().\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n9.2 Scatterplot\nBelow are the relationship between preschool density and preschool count with scatterplot.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html",
    "title": "Hands-on_Ex15",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#overview",
    "title": "Hands-on_Ex15",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#getting-started",
    "title": "Hands-on_Ex15",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFor the purpose of this exercise, four r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#preparing-the-flow-data",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#preparing-the-flow-data",
    "title": "Hands-on_Ex15",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data\n\n3.1 Importing the OD data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nLet use display the odbus tibble data table by using the code chunk below.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nA quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n3.2 Extracting the study data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nTable below shows the content of odbus6_9\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThe code chunk below will be used to import the save odbus6_9.rds into R environment.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#working-with-geospatial-data",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#working-with-geospatial-data",
    "title": "Hands-on_Ex15",
    "section": "4 Working with Geospatial Data",
    "text": "4 Working with Geospatial Data\nFor the purpose of this exercise, two geospatial data will be used. They are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in ESRI shapefile format.\n\n4.1 Importing geospatial data\nTwo geospatial data will be used in this exercise, they are:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex15\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex15\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\nwrite_rds(mpsz, \"data/rds/mpsz.rds\")  \n\n\nNote\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#geospatial-data-wrangling",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#geospatial-data-wrangling",
    "title": "Hands-on_Ex15",
    "section": "5 Geospatial data wrangling",
    "text": "5 Geospatial data wrangling\n\n5.1 Combining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nNote\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame with the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nIt is time to save the output into an rds file format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#visualising-spatial-interaction",
    "href": "Hands-on_Exercise/Hands-on_Ex15/Hands-on_Ex15.html#visualising-spatial-interaction",
    "title": "Hands-on_Ex15",
    "section": "6 Visualising Spatial Interaction",
    "text": "6 Visualising Spatial Interaction\nIn this section, you will learn how to prepare a desire line by using stplanr package.\n\n6.1 Removing intra-zonal flows\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n6.2 Creating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n6.3 Visualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWarning\nBe patient, the rendering process takes more time because of the transparency argument (i.e. alpha)\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 200) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Exercise/Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "2 The Data",
    "text": "2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\npackage 'GWmodel' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\tikaw\\AppData\\Local\\Temp\\Rtmp6zbKMw\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#a-short-note-about-gwmodel",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#a-short-note-about-gwmodel",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4 A short note about GWmodel",
    "text": "4 A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5 Geospatial Data Wrangling",
    "text": "5 Geospatial Data Wrangling\n\n5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n5.2 Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6 Aspatial Data Wrangling",
    "text": "6 Aspatial Data Wrangling\n\n6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7 Exploratory Data Analysis (EDA)",
    "text": "7 Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\n7.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8 Hedonic Pricing Modelling in R",
    "text": "8 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n8.2 Multiple Linear Regression Method\n\n8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\n8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1438876 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9 Building Hedonic Pricing Models using GWmodel",
    "text": "9 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n9.1 Building Fixed Bandwidth GWR Model\n\n9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\n#bw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n#                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n#                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n#                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n#                     FAMILY_FRIENDLY + FREEHOLD, \n#                   data=condo_resale.sp, \n#                   approach=\"CV\", \n#                   kernel=\"gaussian\", \n#                   adaptive=FALSE, \n#                   longlat=FALSE)\n\nThe result shows that the recommended bandwidth is 971.3405 metres. (Quiz: Do you know why it is in metre?)\n** Cannot install GWmodel, the github repository cannot be found Error 404.\n\n\n9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\n#gwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n#                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n#                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n#                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n#                         FAMILY_FRIENDLY + FREEHOLD, \n#                       data=condo_resale.sp, \n#                       bw=bw.fixed, \n#                       kernel = 'gaussian', \n#                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\n#gwr.fixed\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n\n\n9.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n#bw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n#                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n#                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n#                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n#                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n#                      data=condo_resale.sp, \n#                      approach=\"CV\", \n#                      kernel=\"gaussian\", \n#                      adaptive=TRUE, \n#                      longlat=FALSE)\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n#gwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n#                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n#                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n#                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n#                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n#                          data=condo_resale.sp, bw=bw.adaptive, \n#                          kernel = 'gaussian', \n#                          adaptive=TRUE, \n#                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\n#gwr.adaptive\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n9.4 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\n#condo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n#  st_transform(crs=3414)\n\n\n#condo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\n#condo_resale.sf.adaptive.svy21  \n\n\n#gwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\n#condo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\n#glimpse(condo_resale.sf.adaptive)\n\n\n#summary(gwr.adaptive$SDF$yhat)\n\n\n\n9.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\n#tmap_mode(\"view\")\n#tm_shape(mpsz_svy21)+\n#  tm_polygons(alpha = 0.1) +\n#tm_shape(condo_resale.sf.adaptive) +  \n#  tm_dots(col = \"Local_R2\",\n#          border.col = \"gray60\",\n#          border.lwd = 1) +\n#  tm_view(set.zoom.limits = c(11,14))\n\n\n#tmap_mode(\"plot\")\n\n\n\n9.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\n#tmap_mode(\"view\")\n#AREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n#  tm_polygons(alpha = 0.1) +\n#tm_shape(condo_resale.sf.adaptive) +  \n#  tm_dots(col = \"AREA_SQM_SE\",\n#          border.col = \"gray60\",\n#          border.lwd = 1) +\n#  tm_view(set.zoom.limits = c(11,14))\n\n#AREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n#  tm_polygons(alpha = 0.1) +\n#tm_shape(condo_resale.sf.adaptive) +  \n#  tm_dots(col = \"AREA_SQM_TV\",\n#          border.col = \"gray60\",\n#          border.lwd = 1) +\n#  tm_view(set.zoom.limits = c(11,14))\n\n#tmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n#             asp=1, ncol=2,\n#             sync = TRUE)\n\n\n#tmap_mode(\"plot\")\n\n\n9.6.1 By URA Planning Region\n\n#tm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n#  tm_polygons()+\n#tm_shape(condo_resale.sf.adaptive) + \n#  tm_bubbles(col = \"Local_R2\",\n#           size = 0.15,\n#           border.col = \"gray60\",\n#           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#reference",
    "href": "Hands-on_Exercise/Hands-on_Ex4/Hands-on_Ex4.html#reference",
    "title": "Hands-on_Ex4:Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "10 Reference",
    "text": "10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html",
    "title": "Hands-on_Ex9",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#overview",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#overview",
    "title": "Hands-on_Ex9",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#getting-started",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#getting-started",
    "title": "Hands-on_Ex9",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 The analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.3 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#getting-the-data-into-r-environment",
    "title": "Hands-on_Ex9",
    "section": "3 Getting the Data Into R Environment",
    "text": "3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex9\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#global-spatial-autocorrelation",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#global-spatial-autocorrelation",
    "title": "Hands-on_Ex9",
    "section": "4 Global Spatial Autocorrelation",
    "text": "4 Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns:\nH0: The GDPPC values are randomly distributed across Hunan following a completely random process\nThe small p-value and the positive Moran’s I statistic suggest that there is significant positive spatial autocorrelation in the hunan$GDPPC variable based on the provided spatial weights matrix. In other words, regions with similar GDPPC values tend to be spatially clustered in this dataset. The observed spatial pattern is unlikely to occur by random chance alone.\nNote: It implements a two-sided test as opposed to the one-sided test adopted in the above example (i.e. alternative = \"greater\"). A two-sided p-value is nothing more than twice the one-sided p-value. However, there is no important distinction in any of the documentation provided. Fortunately, the GDPPC value is so strongly clustered that both a one-sided and two-sided test produce the same outcome (a p-value close to 0).\n\n4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nQuestion: What statistical conclustion can you draw fro mthe output above?\nAns: The p-value of 0.001 is less than the conventional significance level of 0.05. Therefore, you would reject the null hypothesis of no spatial autocorrelation. The results suggest that the observed spatial pattern in the hunan$GDPPC variable, as measured by Moran’s I, is statistically significant and not likely due to random chance. The positive Moran’s I value indicates positive spatial autocorrelation, meaning similar values are spatially clustered in the dataset.\n\n\n4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nQuestion: What statistical observation can you draw from the output above?\nAns:\n\nThe distribution of simulated Moran’s I values under the null hypothesis provides a reference for what you would expect if spatial autocorrelation were due to random chance.\nThe observed Moran’s I value from the original data falls to the right of the distribution, indicating that the observed spatial autocorrelation is higher than what would be expected by random chance.\nThe summary statistics and histogram support the conclusion drawn from the p-value in the previous analysis. The distribution of simulated Moran’s I values suggests that the observed Moran’s I from the original data is statistically significant and unlikely to be due to random chance. The positive skewness implies that positive spatial autocorrelation is less common under the null hypothesis than would be expected by chance.\n\n\n\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n\n# Create a data frame for the simulated Moran's I values\nsim_data &lt;- data.frame(Moran_I = bperm$res)\n\n# Plot the histogram using ggplot2\nggplot(sim_data, aes(x = Moran_I)) +\n  geom_histogram(binwidth = 0.02, fill = \"skyblue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", size = 1)\n\n\n\n\n\n\n\n4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns: The small p-value of 0.0001526 suggests that the observed spatial pattern in the hunan$GDPPC variable, as measured by Geary’s C, is statistically significant. The observed Geary’s C statistic is significantly lower than what would be expected by random chance alone. This implies positive spatial autocorrelation, meaning similar values are clustered together in space. The conclusion is consistent with the alternative hypothesis that the expected spatial pattern is greater than the observed pattern.\n\n\n4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nQuestion: What statistical conclusion can you draw from the output above?\nAns: The p-value of 0.001 is less than the conventional significance level of 0.05. Therefore, you would reject the null hypothesis of no spatial autocorrelation. The results suggest that the observed spatial pattern in the hunan$GDPPC variable, as measured by Geary’s C, is statistically significant and not likely due to random chance. The positive alternative hypothesis indicates that the expected spatial pattern is greater than the observed pattern, implying positive spatial autocorrelation.\n\n\n4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nQuestion: What statistical observation can you draw from the output?\nAns:\n\nThe mean being close to the expected value (1.0) under the null hypothesis suggests that the simulation process is generating Geary’s C values consistent with spatial randomness.\nThe histogram shows that Geary’s C values approximates a normal distribution."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#spatial-correlogram",
    "href": "Hands-on_Exercise/Hands-on_Ex9/Hands-on_Ex9.html#spatial-correlogram",
    "title": "Hands-on_Ex9",
    "section": "5 Spatial Correlogram",
    "text": "5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nQuestion: What statistical observation can you draw from the plot above?\nAns:\n\nLag 1, 2, 5 have highly significant Moran’s I values (indicated by ‘***’), suggesting significant spatial autocorrelation.\nLag 4 has a p-value of 0.226015, which is not significant at conventional levels (0.05).\n\n\n\n5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "",
    "text": "In this in-class exercise, you are required to prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\nThe specific task of this in-class exercise are as follows:\n\nto import Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nto import geospatial data in ESRI shapefile format into sf data frame format,\nto perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nto visualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#overview",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#overview",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "",
    "text": "In this in-class exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThree R packages will be used in this in-class exercise, they are:\n\ntidyverse for non-spatial data handling,\nsf for geospatial data handling,\ntmap for thematic mapping, and\nknitr for creating html table.\n\n\nThe TaskThe Solution\n\n\nUsing the steps you learned from Hands-on Exercise 1, load these three R packages into RStudio.\n\n\n\npacman::p_load(tmap, sf, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "3 Importing the OD Data",
    "text": "3 Importing the OD Data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nThe TaskThe Solution\n\n\nUsing the steps you learned from Hands-on Exercise 1, import origin_destination_bus_202308.csv downloaded from LTA DataMall into RStudio and save it as a tibble data frame called odbus.\n\n\n\n# eval:false\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\n\n\n\nA quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\nThe TaskThe Solution\n\n\nUsing appropriate tidyverse functions to convert these data values into factor data type.\n\n\n\n#eval: false\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\n\n\n\nNotice that both of them are in factor data type now.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\n3.1 Extracting the study data\n\nThe TaskThe Solution\n\n\nFor the purpose of this exercise, we will extract commuting flows during the weekday morning peak. Call the output tibble data table as origin_7_9.\n\n\n\n# eval: false\norigin_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE==\"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;=9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS=sum(TOTAL_TRIPS))\n\n\n\n\nLet us view in table form.\n\nkable(head(origin_7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(origin_7_9, \"data/rds/origin_7_9.rds\")\n\nThe code chunk below will be used to import the save origin7_9.rds into R environment.\n\norigin_7_9 &lt;- read_rds(\"data/rds/origin_7_9.rds\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html",
    "title": "In-class_Ex2_ver1",
    "section": "",
    "text": "FiveR packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse, and knitr."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#getting-started",
    "title": "In-class_Ex2_ver1",
    "section": "",
    "text": "FiveR packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse, and knitr."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#the-data",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#the-data",
    "title": "In-class_Ex2_ver1",
    "section": "2 The Data",
    "text": "2 The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#getting-data-in-r-environment",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#getting-data-in-r-environment",
    "title": "In-class_Ex2_ver1",
    "section": "3 Getting Data in R Environment",
    "text": "3 Getting Data in R Environment\n\n3.1 Importing geospatial data\ngkp hunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")}\n\n\n3.2 Importing attribute table\ngkp hunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")}\n\n\n3.3 Combining both data frame by using left join\n\nIn order to retain the geospatial properties, the left data frame must be the sf data.frame(i.e. hunan)\n\n\n3.4 Plotting a choropleth map"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#deriving-continuity-spatial-weights",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#deriving-continuity-spatial-weights",
    "title": "In-class_Ex2_ver1",
    "section": "4 Deriving Continuity Spatial Weights",
    "text": "4 Deriving Continuity Spatial Weights"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#deriving-continuity-spatial-weights-queens-method",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ver1.html#deriving-continuity-spatial-weights-queens-method",
    "title": "In-class_Ex2_ver1",
    "section": "5 Deriving Continuity Spatial Weights: Queen’s Method",
    "text": "5 Deriving Continuity Spatial Weights: Queen’s Method\nIn the code below, queen method is used to derive the contiguity weights.\ngkp wm_q &lt;- hunan_GDPPC %&gt;%   mutate(nb = st_contiguity(geometry),          wt = st_weights(nb,                          style='W'),          .before=1)}\nNotes: ,before1 -&gt; put nb and wt at the front of the tibble dataset"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#overview",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#overview",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "2 The Case Study and Data",
    "text": "2 The Case Study and Data\nIn this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nFor the purpose of this exercise, four r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\nDT: for dynamic table\nsp: for spatial data handling\nperformance: for creating performance objects\nreshape2: for reshaping data\nggpubr: for creating multiple plot into 1\n\n\npacman::p_load(tmap, sf, sp, DT,\n               performance, reshape2,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#the-data",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#the-data",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "4 The Data",
    "text": "4 The Data\nThis exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "5 Computing Distance Matrix",
    "text": "5 Computing Distance Matrix\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location’s distance from itself, which is shown in the main diagonal of the table, is 0.\nIn this section, you will learn how to compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called mpsz.\nFirst, let us import mpsz.rds into R environemnt by using the code chunk below.\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nNotice that it is a sf tibble dataframe object class.\n\n5.1 Converting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n#mpsz_sp_selected &lt;- mpsz_sp %&gt;%\n#  select(mpsz@data$SUBZONE)\n\n\n\n5.2 Computing the distance matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n\n\n\n\n\nQ&A\n\n\n\nDo you know why the distance is calculated between two centroids of a pair of spatial polygons?\n\n\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n\n5.3 Labelling column and row heanders of a distance matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz$SUBZONE_C\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)\n\n\n\n5.4 Pivoting distance value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\n\n5.5 Updating intra-zonal distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nThe code chunk below will be used to check the result data.frame.\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "6 Preparing flow data",
    "text": "6 Preparing flow data\nThe code chunk below is used import od_data save in Chapter 15 into R environment.\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all flow_data.\n\nflow_data &lt;- od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK))\n\nUse the code chunk below to display flow_data dataframe.\n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\n6.1 Separating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\n6.2 Combining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "7 Preparing Origin and Destination Attributes",
    "text": "7 Preparing Origin and Destination Attributes\n\n7.1 Importing population data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")\n\n\n\n7.2 Geospatial data wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\n7.3 Preparing origin attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\n7.4 Preparing destination attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "href": "In-class_Exercise/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "title": "In-class_Ex3:Calibrating Spatial Interaction Models with R",
    "section": "8 Calibrating Spatial Interaction Models",
    "text": "8 Calibrating Spatial Interaction Models\nIn this section, you will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\n8.1 16.8.1 Importing the modelling data\nFirstly, let us import the modelling data by using the code chunk below.\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")\n\n\n\n8.2 Visualising the dependent variable\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n8.3 Checking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\nYou can run the summary() again.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\n\n\n8.4 Unconstrained Spatial Interaction Model\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\nThe general formula of Unconstrained Spatial Interaction Model\nThe code chunk undefinedsed to calibrate to model is shown below:\n\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\n\n8.5 R-squared function\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\n8.6 Origin (Production) constrained SIM\nIn this section, we will fit an origin constrained SIM by using the code3 chunk below.\nThe general formula of Origin Constrained Spatial Interaction Model\n\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115\n\n\n\n\n8.7 Destination constrained\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\nThe general formula of Destination Constrained Spatial Interaction Model\n\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\n8.8 Doubly constrained\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\nThe general formula of Doubly Constrained Spatial Interaction Model\n\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\nNotice that there is a relatively greater improvement in the R^2 value.\n\n\n8.9 Model comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chun below.\n\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.\n\n\n8.10 Visualising fitted\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will join the values to SIM_data data frame.\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM)\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM)\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Exercise/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/Business.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/Business.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/F&B.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/F&B.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex5/data/geospatial/Retails.html",
    "href": "In-class_Exercise/In-class_Ex5/data/geospatial/Retails.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "Welcome to ISSS624 Applied Geospatial Analytics!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics using R.\nThere are 3 sections in this webpage:\n\nHands-On Exercise includes practical exercise based on comprehensive lecturer notes.\nThese exercises are designed to provide a hands-on application of the concepts covered in class, ensuring you gain a deep understanding of geospatial analytics using R.\nIn-Class Exercise includes real-time activities within a collaborative classroom.\nThese exercises encompass questions derived from lecture content, strategically crafted to ensure that students can follow the class seamlessly.\nTake-Home Exercise includes individual assignments.\nThese assignments serve as a bridge between theory and practical application, allowing me to solidify my skills and showcase my understanding of geospatial analytics.\n\nFeel free to navigate through the various sections and let us explore the world of spatial data analysis and uncover the power of geospatial tools in gaining insights into our environment."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "",
    "text": "The increasing digitization of urban infrastructures, including buses, taxis, mass rapid transit, public utilities and roads, has generated vast datasets capturing movement patterns over space and time. This data, facilitated by technologies such as GPS and RFID, offers valuable insights into human mobility within cities. Smart cards and GPS devices on public buses, for instance, have enabled the collection of routes and ridership data, providing a rich source for understanding urban movement.\nDespite the wealth of data collected, its utilization often remains limited to basic tracking and mapping using Geographic Information System (GIS) applications. This limitation is attributed to the inadequacy of conventional GIS functions in effectively analyzing and modeling spatial and spatio-temporal data.\nThe objectives of this study are centered around employing Exploratory Spatial Data Analysis (ESDA) techniques, specifically Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA), to unveil the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#overview",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#overview",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "",
    "text": "The increasing digitization of urban infrastructures, including buses, taxis, mass rapid transit, public utilities and roads, has generated vast datasets capturing movement patterns over space and time. This data, facilitated by technologies such as GPS and RFID, offers valuable insights into human mobility within cities. Smart cards and GPS devices on public buses, for instance, have enabled the collection of routes and ridership data, providing a rich source for understanding urban movement.\nDespite the wealth of data collected, its utilization often remains limited to basic tracking and mapping using Geographic Information System (GIS) applications. This limitation is attributed to the inadequacy of conventional GIS functions in effectively analyzing and modeling spatial and spatio-temporal data.\nThe objectives of this study are centered around employing Exploratory Spatial Data Analysis (ESDA) techniques, specifically Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA), to unveil the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#the-study-area-and-data",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#the-study-area-and-data",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "2 The Study Area and Data",
    "text": "2 The Study Area and Data\n\n2.1 Aspatial Data\nThe aspatial data used in this take-home exercise is extracted from LTA DataMall (Passenger Volume by Origin Destination Bus Stops) for the month of October 2023.\n\n\n2.2 Geospatial Data\nThe geospatial data used in this take-home exercise are as follows.\n\nBus Stop Location from LTA DataMall, which provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\nhexagon, a hexagon layer of 250m perpendicular distance between the centre of the hexagon and its edges is used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#setting-the-analytical-tools",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#setting-the-analytical-tools",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "3 Setting the Analytical Tools",
    "text": "3 Setting the Analytical Tools\nBefore I get started, I need to ensure that sf, spdep, tmap, tidyverse, and knitr packages of R are currently installed in my R.\n\nsf : for importing and handling geospatial data in R,\nspdep : for computing spatial weights, global and local spatial autocorrelation statistics, and\ntmap : for preparing cartographic quality chropleth map\ntidyverse : for wrangling attribute data in R ; tidyverse has already included collection of packages such as readr, ggplot2, dplyr, tiblle, purr, etc.\nknitr: for facilitating dynamic report generation in R Markdown documents.\n\nThe code chunk below is used to ensure that the necessary R packages have been installed , if its iyet to be installed, it will then be installed and ready to be used in the R environment.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#getting-the-data-into-r-environment",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#getting-the-data-into-r-environment",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "4 Getting the Data into R Environment",
    "text": "4 Getting the Data into R Environment\n\n4.1 Importing Shapefile into R Environment\nThe code chunk below uses st_read() of sf package to import BusStop shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nShow the code\nbusstop &lt;- st_read(dsn = \"data/geospatial\", layer = \"BusStop\")\n\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\Take-home_Exercise\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe code chunk below uses st_geometry() of sf package to display basic information of feature class.\n\n\nShow the code\nst_geometry(busstop)\n\n\nGeometry set for 5161 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nThe code chunk below uses glimpse() of dplyr package to display the data type of each fields.\n\n\nShow the code\nglimpse(busstop)\n\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nNext, I will plot the geospatial data using the code chunk below.\n\n\nShow the code\nplot(busstop)\n\n\n\n\n\nFrom the glimpse() check above, it is shown that the BUS_STOP_N is in character type. It needs to be converted to factor type to work with categorical variables so that I can use them to georeference with bus stop location data.\n\n\nShow the code\nbusstop$BUS_STOP_N &lt;- as.factor(busstop$BUS_STOP_N)\n\n\nNext, I will confirm the data type for BUS_STOP_N has changed to data type of “factor” using glimpse().\n\n\nShow the code\nglimpse(busstop)\n\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;fct&gt; 22069, 32071, 44331, 96081, 11561, 66191, 23389, 54411, 285…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\n\n4.2 Importing Csv File into R Environment\nNext, I will import origin_destination_bus_202310.csv into R by using st_read() of readr package. The output is R dataframe class.\n\n\nShow the code\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n\nThe code chunk below uses glimpse() of dplyr package to display the odbus tibble data tables.\n\n\nShow the code\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nFrom the glimpse() check above, it is shown that the ORIGIN_PT_CODE and DESTINATION_PT_CODE are in character type. Both of them need to be converted to factor type to work with categorical variables so that I can use them to georeference with bus stop location data.\n\n\nShow the code\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\nI will also change the data type of TIME_PER_HOUR and TOTAL_TRIPS from &lt;dbl&gt; to &lt;int&gt; because it both of these fields should be represented as whole numbers.\n\n\nShow the code\nodbus$TIME_PER_HOUR &lt;- as.integer(odbus$TIME_PER_HOUR)\nodbus$TOTAL_TRIPS &lt;- as.integer(odbus$TOTAL_TRIPS) \n\n\nNext, I will confirm the data type for ORIGIN_PT_CODE and DESTINATION_PT_CODE have changed to factor using glimpse().\n\n\nShow the code\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;int&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;int&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "5 Data Wrangling",
    "text": "5 Data Wrangling\n\n5.1 Checking the Reference Coordinate System of Geospatial Data\nCommon issue in importing geospatial data into R is that the coordinate system of the source data was either missing (due to missing .proj for ESRI shapefile, etc.) or wrongly assigned.\nThe code chunk below uses st_crs() of sf package to retrieve the coordinate reference system of busstop.\n\n\nShow the code\nst_crs(busstop)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nBoth busstop is projected in svy21 as shown from the second line, but at the last line, it is mentioned that the EPSG is 9001. This is wrongly assigned because the correct EPSG code for svy21 is 3414.\n\n\n5.2 Transforming the Projection\nNext, I will transform busstop from geographic coordinate system to projected coordinated system as my analysis will measure distance or/and area.\nThe code chunk below uses st_transform of sp package to convert coordinates to EPSG code of 3414.\n\n\nShow the code\nbusstop3414 &lt;- st_transform(busstop, 3414)\n\n\nNext, I will check the coordinate system after transformation with the code chunk below.\n\n\nShow the code\nst_crs(busstop3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nAs noticed from the above, the Projected CRS is now SVY21 / Singapore TM and the last line has changed to EPSG 3414.\n\n\n5.3 Checking Duplicated Records\nThe code chunk below is used to check for duplicated records on odbus.\n\n\nShow the code\nduplicate &lt;- odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nThe above code chunk shows that there is no duplicate record found.\n\n\n5.4 Remove Unnecessary Fields\nFirst, I check the YEAR_MONTH and PT_TYPE unique values by using the table() to create a frequency table of each categorical representation.\n\n\nShow the code\nYEAR_MONTH_counts &lt;- table(odbus$YEAR_MONTH)\nprint(YEAR_MONTH_counts)\n\n\n\n2023-10 \n5694297 \n\n\nShow the code\nDAY_TYPE_counts &lt;- table(odbus$DAY_TYPE)\nprint(DAY_TYPE_counts)\n\n\n\n         WEEKDAY WEEKENDS/HOLIDAY \n         3259419          2434878 \n\n\nShow the code\nPT_TYPE_counts &lt;- table(odbus$PT_TYPE)\nprint(PT_TYPE_counts)\n\n\n\n    BUS \n5694297 \n\n\nFrom the results above, I will exclude YEAR_MONTH and PT_TYPE as they only have single categorical representation using the code chunk below.\n\n\nShow the code\nodbus &lt;- odbus[, !(names(odbus) %in% c(\"YEAR_MONTH\", \"PT_TYPE\"))]\n\n\nI will then use glimpse() to ensure the process is done correctly.\n\n\nShow the code\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 5\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;int&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;int&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#creating-honeycomb_grid1",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#creating-honeycomb_grid1",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "6 Creating honeycomb_grid1",
    "text": "6 Creating honeycomb_grid1\nHoneycomb grid are preferred to replace coarse and irregular Master Plan 2019 Sub-zone GIS data set of URA because hexagon reduce sampling bias due to its grid shape of low perimeter to are ratio and its ability to form evenly spaced grid. Honeycomb grids are well-suited for approximating circular areas, making them suitable for mapping Singapore edges with is irregular shape.\nThe code chunk below uses st_make_grid of sf package to create a hexagonal or honeycomb grid with a 250m (perpendicular distance between the center of hexagon and its edges). According the the R documentation, the cellsize is the distance between opposite edges, which is 2 times the perpendicular distance between the center of hexagon and its edges. Thus, for the purpose of this exercise, I will use the cellsize of 500m and indicate the square=FALSE for hexagonal grid. After doing do, I will create a grid_id for each hexagonal grid.\n\n\nShow the code\narea_honeycomb_grid = st_make_grid(busstop3414, c(500, 500), what = \"polygons\", square = FALSE)    \n# To sf and add grid ID  \nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %&gt;%    \n  # add grid ID      \n  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#extracting-the-study-data",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#extracting-the-study-data",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "7 Extracting the study data",
    "text": "7 Extracting the study data\nIn this exercise, I will extract the commuting flows during peak hours as follows.\n\n\n\n\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\n\n7.1 Weekday Morning Peak\nThe code chunk below will be used to extract the weekday morning peak (Weekday: 6-9am) and calculate the passenger trips in each origin bus stop by using the group_by() from dplyr package and aggregate the values using summarise() and sum up the “Total_Trips”. The mutate() in the code below is to ensure that after the group_by, the ORIGIN_PT_CODE remains in the factor data type.\n\n\nShow the code\nodbus_weekday_6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))%&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE))\n\n\nI will repeat the processes above for the other peak hours as shown below.\n\n\n7.2 Weekday Afternoon Peak\nThe code chunk below will be used to extract the weekday afternoon peak (Weekday: 5-8pm) and calculate the passenger trips in each origin bus stop.\n\n\nShow the code\nodbus_weekday_17_20 &lt;- odbus %&gt;%   \n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%   \n  filter(TIME_PER_HOUR &gt;= 17 &            \n           TIME_PER_HOUR &lt;= 20) %&gt;%   \n  group_by(ORIGIN_PT_CODE) %&gt;%   \n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE))\n\n\n\n\n7.3 Weekends/Holiday Morning Peak\nThe code chunk below will be used to extract the weekend/holiday morning peak (Weekend/holiday: 11am-2pm) and calculate the passenger trips in each origin bus stop.\n\n\nShow the code\nodbus_weekend_11_14 &lt;- odbus %&gt;% \n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%   \n  filter(TIME_PER_HOUR &gt;= 11 &            \n           TIME_PER_HOUR &lt;= 14) %&gt;%   \n  group_by(ORIGIN_PT_CODE) %&gt;%   \n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE))\n\n\n\n\n7.4 Weekends/Holiday Evening Peak\nThe code chunk below will be used to extract the weekend/holiday evening peak (Weekend/holiday: 4-7pm) and calculate the total trips in each origin and destination pair.\n\n\nShow the code\nodbus_weekend_16_19 &lt;- odbus %&gt;%   \n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%   \n  filter(TIME_PER_HOUR &gt;= 16 &            \n           TIME_PER_HOUR &lt;= 19) %&gt;%   \n  group_by(ORIGIN_PT_CODE) %&gt;%   \n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE))"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#further-data-wrangling-for-weekday-morning-peak-hour-a-step-by-step-guide",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#further-data-wrangling-for-weekday-morning-peak-hour-a-step-by-step-guide",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "8 Further Data Wrangling for Weekday Morning Peak Hour: A Step-by-Step Guide",
    "text": "8 Further Data Wrangling for Weekday Morning Peak Hour: A Step-by-Step Guide\nThis section provides a comprehensive step-by step walkthrough to calculate the number of trips within each hexagonal grid during Weekday Morning Peak Hour with a subsequent plan to replicate the same process for Weekday Afternoon Peak Hour, Weekends/Holiday Morning Peak, and Weekends/Holiday Evening Peak in the subsequent section\n\n8.1 Performing Relational Join\nThe code chunk below will be used to join the busstop3414 SpatialPolygonsDataframe and odbus_weekday_6_9_data by BUS_STOP_N for busstop3414 and BUS_STOP_ID for original_destination_bus. This is performed by using left_join() of dplyr package. In this take-home exercise, I will focus on passenger trips generated by origin bus stop, I will remove the rows with bus stops solely serve as destinations which are indicated by NA values on the corresponding “Total_Trips” using the filter() from dplyr package.\n\n\nShow the code\ntotal_trips_per_busstop_wdmp &lt;- left_join(busstop3414, odbus_weekday_6_9, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) %&gt;%\n  filter(!is.na(TRIPS))\n\n\n\n\n8.2 Spatial Join with Hexagonal Honeycomb Grid and Calculating Total Trips in a Hexagonal Grid\nThe code chunk below will be used to join the total_trips_per_busstop and honeycomb grid spatially using st_join() from sf package and remove the hexagon grid without any bus stop which is indicated by NA value on the “BUS_STOP_N”. Next, I will calculate the total trips in a hexagonal grid using the group_by() from dplyr package.\n\n\nShow the code\ntotal_trips_per_grid_wdmp &lt;- st_join(honeycomb_grid_sf,total_trips_per_busstop_wdmp) %&gt;%\n  filter(!is.na(BUS_STOP_N))%&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(total_trips = sum(TRIPS))\n\n\n\n\n8.3 Replicating the Steps for Other Peak Hours\n\n8.3.1 Weekday Afternoon Peak\n\n\nShow the code\ntotal_trips_per_busstop_wdap &lt;- left_join(busstop3414, odbus_weekday_17_20, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))%&gt;%\n  filter(!is.na(TRIPS))\n\ntotal_trips_per_grid_wdap &lt;- st_join(honeycomb_grid_sf,total_trips_per_busstop_wdap) %&gt;%\n  filter(!is.na(BUS_STOP_N))%&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(total_trips = sum(TRIPS))\n\n\n\n\n8.3.2 Weekends/Holiday Morning Peak\n\n\nShow the code\ntotal_trips_per_busstop_wemp &lt;- left_join(busstop3414, odbus_weekend_11_14, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))%&gt;%\n  filter(!is.na(TRIPS))\n\ntotal_trips_per_grid_wemp &lt;- st_join(honeycomb_grid_sf,total_trips_per_busstop_wemp) %&gt;%\n  filter(!is.na(BUS_STOP_N))%&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(total_trips = sum(TRIPS))\n\n\n\n\n8.3.3 Weekends/Holiday Evening Peak\n\n\nShow the code\ntotal_trips_per_busstop_weep &lt;- left_join(busstop3414, odbus_weekend_16_19, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))%&gt;%\n  filter(!is.na(TRIPS))\n\ntotal_trips_per_grid_weep &lt;- st_join(honeycomb_grid_sf,total_trips_per_busstop_weep) %&gt;%\n  filter(!is.na(BUS_STOP_N))%&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(total_trips = sum(TRIPS))"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#geovisualisation-and-analysis",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#geovisualisation-and-analysis",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "9 Geovisualisation and Analysis",
    "text": "9 Geovisualisation and Analysis\nAfter the data preparation, I will first plot the distribution of passenger trips using ggplot() of tidyverse package. To consolidate these distributions into a single plot, it is necessary to introduce grouping variable to each dataframe. Within this unified plot, key summary statistics including Q1, median, Q3, and mean highligthed by a red circle will be presented. This approach aims to provide a comprehensive comparison of passenger trip characteristics across various peak hour groups.\n\n\nShow the code\n# Add a grouping variable to each dataframe\ntotal_trips_per_grid_wdmp$Peak_Hour_Group &lt;- \"wdmp\"\ntotal_trips_per_grid_wdap$Peak_Hour_Group &lt;- \"wdap\"\ntotal_trips_per_grid_wemp$Peak_Hour_Group &lt;- \"wemp\"\ntotal_trips_per_grid_weep$Peak_Hour_Group &lt;- \"weep\"\n\n# Combine dataframes into a single dataframe\ncombined_peak_hour &lt;- rbind(total_trips_per_grid_wdmp, total_trips_per_grid_wdap, total_trips_per_grid_wemp, total_trips_per_grid_weep) %&gt;%\n  filter(!is.na(total_trips))\n\n# Create a box plot using ggplot\nggplot(combined_peak_hour, aes(x = Peak_Hour_Group, y = total_trips)) +\n  geom_boxplot() +\n  stat_summary(fun = \"mean\", geom = \"point\", shape = 18, size = 3, color = \"red\")+\n  stat_boxplot(geom = 'errorbar', width = 0.5, color = 'blue', size = 1)+\n  stat_summary(\n    geom = 'text',\n    fun.min = function(x) quantile(x, 0.25),\n    fun = median,\n    fun.max = function(x) quantile(x, 0.75),\n    aes(label = sprintf(\"Q3: %.2f\\nMedian: %.2f\\nQ1: %.2f\", ..ymax.., ..y.., ..ymin..)),\n    vjust = -5,\n    hjust= -0.08,\n    position = position_dodge(width = 0.75),\n    size = 3\n  ) +\n  stat_summary(geom = 'text', fun = mean, aes(label = sprintf(\"Mean: %.2f\", ..y..)), vjust = -3, hjust=-0.08 ,  position = position_dodge(width = 0.9), color = 'red', size =3)+\n  \n  labs(title = \"Boxplot for Total Trips in each Peak Hour Group\", x=\"Peak Hour Group\",y = \"Passenger Trips\") +\n  theme_minimal()\n\n\n\n\n\nThe box plot analysis above reveal the patterns in Singapore’s bus passenger trips. Notably, the mean passenger trips during weekdays significantly surpass those on weekends and holidays, suggesting higher demand for bus services during typical workdays. This aligns with a common observation that commuting is more crowded on workdays, reflecting the daily hustle and bustle of the workforce.\nFurthermore, the observation that the mean of all peak hour groups exceeds their respective medians indicates a right-skewed distribution. This skewness implies that on average, there are more instances of relatively small number of passenger trips during peak hour with occasional instances of significantly higher demand. This distribution pattern underscores the challenges faced by commuters during peak hours, where a substantial portion of bus rides may experience higher congestion.\nSome hexagonal grid has a total of more than 400,000 passenger trips highlighting that specific areas with exceptionally high demand during the weekdays. These areas are likely represent key commuting regions with concentrated commercial and residential activities and are possibly areas that are not easily accessible by MRT. To gain clearer insights on the concentrations of high passenger trips I will leverage tmap package.\n\n9.1 Weekday Morning Peak\n\n\nShow the code\ntmap_mode(\"view\")\n\ntm_shape(total_trips_per_grid_wdmp) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = c(\"#C5FFF8\", \"#FF4B91\"),\n    style = \"cont\",\n    title = \"Number of Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\"grid_id\",\"total_trips\"),\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0),\n      total_trips = list(format = \"f\", digits = 0))\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7)\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nIt has been observed that certain bus stops are located outside the boundaries of Singapore, particularly in Johor.The influx of weekday morning peak passenger trips from Johor are qhigh surpassing 100,000 for October 2023. This significant amount shows the cross border commuting activity between Johor and Singapore suggesting a preference among some individuals to reside in Johor may be due to cost consideration while working in Singapore.\nThe Central Business District (CBD) area displays a comparatively lower passenger trips generated by origin bus stop. This is attributed to the absence of major bus interchanges within the CBD, suggesting that commuters in this central business hub may rely on alternative modes of transportation, such as the Mass Rapid Transit (MRT) system. In addition, it is worth noting that lower passenger trips may also be influences by the fact that bus routes typically do not commence within CBD area, even though the bus routes pass through CBD.\nAreas that are exhibiting a high concentration during weekday morning peak are associated with prominent bus interchanges such as Woodlands and Boon Lay with more than 300,000 passenger trips within a single month on weekdays. Additionally, other bus interchanges including Bishan, Ang Mo Kio, Toa Payoh, Clementi, Punggol, Tampines, and Bedok also shows high passenger trips.\n\n\n9.2 Weekday Afternoon Peak\n\n\nShow the code\ntmap_mode(\"plot\")\n\ntm_shape(total_trips_per_grid_wdap) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = c(\"#C5FFF8\", \"#FF4B91\"),\n    style = \"cont\",\n    title = \"Number of Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\"grid_id\",\"total_trips\"),\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0),\n      total_trips = list(format = \"f\", digits = 0))\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7)\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nDuring the weekday afternoon peak, Woodlands and Boon Lay continue to exhibit an impressive volume of passenger trips exceeding 400,000 as compared to the patterns observed during morning peak. In addition, there are additional areas such as Ang Mo Kio, Tampines, and Bedok which emerge as significant contributors to the passenger trips during the later peak period.\nTypically the passengers volume during weekday afternoon are higher than weekday morning with Boon Lay with the highest contributor of more than 500,000 passenger trips. Boon Lay serves as a transportation hub for workers, residents and students from NTU. Moreover, the areas near Boon Lay are currently not accessible through MRT as the development of MRT is still in progress.\n\n\n9.3 Weekends/Holiday Morning Peak\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(total_trips_per_grid_wemp) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = c(\"#C5FFF8\", \"#FF4B91\"),\n    style = \"cont\",\n    title = \"Number of Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\"grid_id\",\"total_trips\"),\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0),\n      total_trips = list(format = \"f\", digits = 0))\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7)\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nGiven that weekends consist of only two days, the passenger trip numbers exhibit lower in total numbers but comparable to those recorded during five weekdays, following a similar pattern. Notably, major bus interchanges, such as Woodlands, Boon Lay, Bedok and Tampines continue to play a pivotal role contributing significantly to the overall passenger trips during both weekdays and weekends.\nDuring weekend and holidays, the morning peak hour (11am to 2pm) is later as compared to weekday morning (6 to 9am). This temporal shift can be attributed to social dynamic where individuals engaging in lunchtime activity with family and friends during weekends. This distinctive pattern underscores the influence of social interactions on commuter behaviors during non-working days.\n\n\n9.4 Weekends/Holiday Evening Peak\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(total_trips_per_grid_weep) +\n  tm_fill(\n    col = \"total_trips\",\n    palette = c(\"#C5FFF8\", \"#FF4B91\"),\n    style = \"cont\",\n    title = \"Number of Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\"grid_id\",\"total_trips\"),\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0),\n      total_trips = list(format = \"f\", digits = 0))\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7)\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nSimilar with the other peak hours, the passenger trips are mostly contributed by major bus interchange as the origin.\nTypically , the afternoon/evening peak hours witnesses a higher volume of passenger trips both on weekdays and weekend as compared to morning peak hours. This preference may be due to individuals opting for MRT during hours as it provide punctual mode of transportation as compared to bus which might be affected by congestion and could potentially lead to delays in reaching to work/schools/leisure activities.\nDuring weekend and holidays, the evening peak hour (4 to 7pm) is slightly earlier as compared to weekday morning afternoon (5 to 8pm). This shift in timing could be attributed to the altered schedules and leisurely activities that individuals typically engage in during weekends and holidays. People might be more inclined to initiate their evening commutes earlier to accommodate social plans, family gatherings, or recreational activities that are common during non-working days."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#exploratory-spatial-data-analysis",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#exploratory-spatial-data-analysis",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "10 Exploratory Spatial Data Analysis",
    "text": "10 Exploratory Spatial Data Analysis\nExploratory Spatial Data Analysis or ESDA consists of descriptive techniques to discover spatial distribution of data and identify outliers. In this ESDA section, I will cover global spatial autocorrelation which focuses on overall trend and local spatial autocorrelation which focuses on hot and cold spots in the data.\n\n10.1 Global Spatial Autocorrelation\nIn this section, I will include the computation of global spatial autocorrelation statistics and spatial complete randomness test for global spatial autocorrelation. The goal here is to understand whether the passenger trips generated by origin are evenly distributed across Singapore.\n\n10.1.1 Spatial Weights Matrix\nBefore computing global spatial autocorrelation, we need to define spatial neighbourhood by using spatial weight. There are two common methods to compute spatial weight which are contiguity-based and distanced-based.\nIn contiguity-based method, neighbour share common boundary and there are 2 methods in defining the boundary, ROOK by common edge while QUEEN by common edge and vertices as shown below for square shape.\n\n\n\nHook Neighbors\n\n\n\n\n\nQueen Neighbors\n\n\nIn hexagonal grid, finding neighbours are straighforward. Both ROOK and QUEEN yield the same results as shown below.\n\n\n\nHexagon Neighbors\n\n\nIn distance-based method, there are 2 method fixed weighting where the grid are considered neighbours if they are within specified distance from one another and adaptive weighting where each grid has same specified number of neighbours.\nIf the hexagonal grid are isolated from each other, contiguity-based method may not be appropriate as it may yield many grids with no neighbours.\n\n\n10.1.2 Contiguity Weight Matrix (QUEEN)\nIn the code chunk below, I will use poly2nb() of spdep package to compute contiguity weight matrices for weekday morning peak hour. This function builds a list of neighbours based on grids with contiguous boundaries. By default, Queen contiguity is applied.\n\n\nShow the code\nwm_q &lt;- poly2nb(total_trips_per_grid_wdmp, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 1492 \nNumber of nonzero links: 6714 \nPercentage nonzero weights: 0.3016086 \nAverage number of links: 4.5 \n12 regions with no links:\n276 296 454 550 713 964 1030 1387 1477 1480 1484 1492\nLink number distribution:\n\n  0   1   2   3   4   5   6 \n 12  40 105 206 285 358 486 \n40 least connected regions:\n1 7 22 38 98 166 183 184 185 191 207 214 253 257 260 551 595 629 683 695 719 738 755 771 855 990 1004 1005 1029 1069 1194 1436 1443 1454 1472 1473 1475 1478 1482 1491 with 1 link\n486 most connected regions:\n10 13 16 17 24 25 31 35 42 43 48 53 55 60 63 67 73 77 80 81 84 85 87 88 91 92 97 102 107 111 117 121 127 132 138 139 141 145 146 147 151 152 153 154 160 161 162 170 171 172 179 180 181 187 188 189 190 196 197 198 201 202 203 204 212 225 235 239 240 242 252 268 272 280 287 289 290 291 293 299 300 302 303 306 311 314 315 317 327 328 329 330 333 342 345 353 358 380 381 390 392 393 397 404 408 413 415 421 426 427 428 430 433 440 441 442 450 456 457 458 459 463 467 470 471 478 482 483 485 491 492 496 502 503 506 507 512 518 523 528 532 537 538 539 541 545 547 553 557 562 563 565 566 570 579 580 583 587 588 592 593 597 603 607 611 613 620 623 624 625 635 636 637 641 642 644 645 646 656 657 658 664 667 668 669 674 675 677 678 687 688 691 692 693 700 703 704 711 714 715 716 727 728 742 744 745 747 758 761 762 763 764 769 770 774 775 776 779 780 781 782 786 787 792 793 796 797 798 799 805 806 809 810 811 816 817 818 827 829 830 832 833 834 836 837 838 839 840 846 849 851 852 853 857 858 862 863 864 866 867 868 870 871 874 877 879 882 885 888 890 891 895 899 904 906 911 912 913 915 916 920 928 929 930 931 932 933 938 942 943 946 947 952 953 955 956 957 961 967 968 969 970 971 973 979 980 981 982 987 994 995 996 997 1007 1008 1009 1011 1012 1019 1020 1021 1025 1033 1034 1037 1039 1040 1045 1046 1047 1049 1050 1051 1052 1059 1061 1062 1063 1066 1072 1076 1083 1084 1085 1088 1089 1093 1094 1100 1103 1104 1105 1111 1116 1117 1118 1119 1124 1125 1127 1128 1129 1130 1131 1133 1139 1140 1141 1145 1146 1147 1149 1151 1152 1153 1154 1158 1159 1160 1161 1162 1166 1168 1171 1172 1173 1174 1175 1181 1182 1183 1184 1185 1186 1187 1190 1191 1197 1198 1199 1200 1201 1207 1213 1214 1215 1219 1224 1225 1231 1233 1234 1235 1240 1244 1245 1250 1251 1252 1256 1259 1261 1267 1276 1279 1280 1293 1298 1299 1300 1301 1303 1304 1305 1308 1309 1311 1317 1326 1328 1329 1337 1338 1340 1343 1344 1349 1352 1353 1354 1356 1360 1363 1365 1367 1370 1378 1380 1384 1389 1390 1392 1396 1397 1398 1399 1400 1405 1406 1407 1408 1412 1413 1414 1418 1419 1421 1423 1425 1428 1429 1431 1432 1433 1434 1441 with 6 links\n\n\nThe summary report above shows that there are 1492 hexagonal grids. There are 12 hexagonal grid with no neighbour, 40 hexagonal grids with 1 neighbour and the most connected grids have 6 links. The average number of links is 4.5.\n\n\n10.1.3 Contiguity Weight Matrix (ROOK)\nIn the code chunk below, I will use poly2nb() of spdep package to compute contiguity weight matrices for weekday morning peak hour by specifying queen = FALSE to compute Rook contiguity.\n\n\nShow the code\nwm_r &lt;- poly2nb(total_trips_per_grid_wdmp, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 1492 \nNumber of nonzero links: 6714 \nPercentage nonzero weights: 0.3016086 \nAverage number of links: 4.5 \n12 regions with no links:\n276 296 454 550 713 964 1030 1387 1477 1480 1484 1492\nLink number distribution:\n\n  0   1   2   3   4   5   6 \n 12  40 105 206 285 358 486 \n40 least connected regions:\n1 7 22 38 98 166 183 184 185 191 207 214 253 257 260 551 595 629 683 695 719 738 755 771 855 990 1004 1005 1029 1069 1194 1436 1443 1454 1472 1473 1475 1478 1482 1491 with 1 link\n486 most connected regions:\n10 13 16 17 24 25 31 35 42 43 48 53 55 60 63 67 73 77 80 81 84 85 87 88 91 92 97 102 107 111 117 121 127 132 138 139 141 145 146 147 151 152 153 154 160 161 162 170 171 172 179 180 181 187 188 189 190 196 197 198 201 202 203 204 212 225 235 239 240 242 252 268 272 280 287 289 290 291 293 299 300 302 303 306 311 314 315 317 327 328 329 330 333 342 345 353 358 380 381 390 392 393 397 404 408 413 415 421 426 427 428 430 433 440 441 442 450 456 457 458 459 463 467 470 471 478 482 483 485 491 492 496 502 503 506 507 512 518 523 528 532 537 538 539 541 545 547 553 557 562 563 565 566 570 579 580 583 587 588 592 593 597 603 607 611 613 620 623 624 625 635 636 637 641 642 644 645 646 656 657 658 664 667 668 669 674 675 677 678 687 688 691 692 693 700 703 704 711 714 715 716 727 728 742 744 745 747 758 761 762 763 764 769 770 774 775 776 779 780 781 782 786 787 792 793 796 797 798 799 805 806 809 810 811 816 817 818 827 829 830 832 833 834 836 837 838 839 840 846 849 851 852 853 857 858 862 863 864 866 867 868 870 871 874 877 879 882 885 888 890 891 895 899 904 906 911 912 913 915 916 920 928 929 930 931 932 933 938 942 943 946 947 952 953 955 956 957 961 967 968 969 970 971 973 979 980 981 982 987 994 995 996 997 1007 1008 1009 1011 1012 1019 1020 1021 1025 1033 1034 1037 1039 1040 1045 1046 1047 1049 1050 1051 1052 1059 1061 1062 1063 1066 1072 1076 1083 1084 1085 1088 1089 1093 1094 1100 1103 1104 1105 1111 1116 1117 1118 1119 1124 1125 1127 1128 1129 1130 1131 1133 1139 1140 1141 1145 1146 1147 1149 1151 1152 1153 1154 1158 1159 1160 1161 1162 1166 1168 1171 1172 1173 1174 1175 1181 1182 1183 1184 1185 1186 1187 1190 1191 1197 1198 1199 1200 1201 1207 1213 1214 1215 1219 1224 1225 1231 1233 1234 1235 1240 1244 1245 1250 1251 1252 1256 1259 1261 1267 1276 1279 1280 1293 1298 1299 1300 1301 1303 1304 1305 1308 1309 1311 1317 1326 1328 1329 1337 1338 1340 1343 1344 1349 1352 1353 1354 1356 1360 1363 1365 1367 1370 1378 1380 1384 1389 1390 1392 1396 1397 1398 1399 1400 1405 1406 1407 1408 1412 1413 1414 1418 1419 1421 1423 1425 1428 1429 1431 1432 1433 1434 1441 with 6 links\n\n\nThe summary report above shows that there are 1492 hexagonal grids. There are 12 hexagonal grid with no neighbour, 40 hexagonal grids with 1 neighbour and the most connected grids have 6 links. The average number of links is 4.5.\nNote: The results for both rook and queen method are the same as shown from the computation above.\n\n\n10.1.4 Visualising contiguity weights\nBefore visualising the weights, I need to reproject coordingate to WGS84 for longitude-latitude projection using st_transform of sf package.\n\n\nShow the code\ntotal_trips_per_grid_wdmp$area_honeycomb_grid &lt;- st_transform(total_trips_per_grid_wdmp$area_honeycomb_grid, \"+proj=longlat +datum=WGS84\")\n\n\nNext, I will get the coordinates of the hexagonal grid centroid in longitude and latitude using the st_coordinates and st_centroid of sf package.\n\n\nShow the code\ncoords &lt;- st_coordinates(st_centroid(total_trips_per_grid_wdmp$area_honeycomb_grid))\nhead(coords)\n\n\n            X        Y\n[1,] 103.6174 1.271424\n[2,] 103.6196 1.275340\n[3,] 103.6219 1.294920\n[4,] 103.6241 1.275341\n[5,] 103.6241 1.291005\n[6,] 103.6241 1.298837\n\n\nI will only plot queen contiguity as rook contiguity yields the same results.\n\n\nShow the code\nplot(total_trips_per_grid_wdmp$area_honeycomb_grid, border=\"lightgrey\", main=\"Queen and Rook Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n10.1.5 Fixed Distance Weight Matrix\nThe dnearneigh() of spdep package will be used to derive the distance-based weight matrices by . This function identifies neighbours of hexagonal grid centroid points by Euclidean distance with a lower and upper bounds distance controlled by the bounds argument or by Great Circle distance in kilometres if longlat argument is set to TRUE.\n\n10.1.5.1 Determine the cut-off distance\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.5000  0.5000  0.5000  0.5072  0.5000  4.5825 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 4,582.5 metres, so using a number slightly larger than this (i.e. 4.6) as the upper threshold gives certainty that all regions will have at least one neighbour.\n\n\nShow the code\ntotal_trips_per_grid_wdmp$grid_id[match(max(k1dists), k1dists)]\n\n\n[1] 1767\n\n\nUsing the code chunk above, we discover that the grid_id with the maximum distance to its nearest neighbour is 1767 which is the grid in Johor.\n\n\n10.1.5.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown below.\n\n\nShow the code\nwm_d4.6 &lt;- dnearneigh(coords, 0, 4.6, longlat = TRUE)\nwm_d4.6\n\n\nNeighbour list object:\nNumber of regions: 1492 \nNumber of nonzero links: 236430 \nPercentage nonzero weights: 10.62099 \nAverage number of links: 158.4651 \n\n\nFrom the output, we see that the average number of links is 158.4651. The number is quite high and may skew the analysis.\nNext, we will use str() to display the content of wm_d4.6 weight matrix.\n\n\nShow the code\nstr(wm_d4.6)\n\n\nList of 1492\n $ : int [1:30] 2 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:33] 1 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:63] 1 2 4 5 6 7 8 9 10 11 ...\n $ : int [1:35] 1 2 3 5 6 7 8 9 10 11 ...\n $ : int [1:61] 1 2 3 4 6 7 8 9 10 11 ...\n $ : int [1:74] 1 2 3 4 5 7 8 9 10 11 ...\n $ : int [1:86] 1 2 3 4 5 6 8 9 10 11 ...\n $ : int [1:43] 1 2 3 4 5 6 7 9 10 11 ...\n $ : int [1:57] 1 2 3 4 5 6 7 8 10 11 ...\n $ : int [1:72] 1 2 3 4 5 6 7 8 9 11 ...\n $ : int [1:91] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:52] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:69] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:84] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:94] 2 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:66] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:82] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:94] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:98] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:93] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:85] 3 5 6 7 9 10 11 13 14 15 ...\n $ : int [1:43] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:60] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:77] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:91] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:99] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:99] 2 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:94] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:84] 3 5 6 7 10 11 13 14 15 17 ...\n $ : int [1:71] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:89] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:99] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:103] 2 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:99] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:93] 3 5 6 7 9 10 11 13 14 15 ...\n $ : int [1:81] 3 6 7 10 11 14 15 17 18 19 ...\n $ : int [1:63] 7 11 15 18 19 20 21 26 27 28 ...\n $ : int [1:48] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:65] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:84] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:97] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:101] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:92] 3 5 6 7 10 11 13 14 15 17 ...\n $ : int [1:78] 6 7 11 14 15 18 19 20 21 25 ...\n $ : int [1:60] 7 11 15 19 20 21 26 27 28 29 ...\n $ : int [1:96] 1 2 3 4 5 6 7 8 9 10 ...\n $ : int [1:108] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:100] 3 5 6 7 9 10 11 13 14 15 ...\n $ : int [1:90] 6 7 10 11 14 15 17 18 19 20 ...\n $ : int [1:74] 7 11 15 18 19 20 21 26 27 28 ...\n $ : int [1:113] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:109] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:101] 3 6 7 10 11 13 14 15 17 18 ...\n $ : int [1:69] 11 15 19 20 21 26 27 28 29 33 ...\n $ : int [1:110] 3 5 6 7 10 11 13 14 15 16 ...\n $ : int [1:98] 6 7 11 14 15 17 18 19 20 21 ...\n $ : int [1:84] 7 11 15 18 19 20 21 26 27 28 ...\n $ : int [1:120] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:119] 3 5 6 7 9 10 11 13 14 15 ...\n $ : int [1:109] 6 7 10 11 14 15 17 18 19 20 ...\n $ : int [1:97] 7 11 15 18 19 20 21 25 26 27 ...\n $ : int [1:123] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:120] 3 6 7 10 11 13 14 15 17 18 ...\n $ : int [1:110] 7 11 14 15 18 19 20 21 25 26 ...\n $ : int [1:125] 3 4 5 6 7 8 9 10 11 12 ...\n $ : int [1:127] 3 5 6 7 10 11 13 14 15 16 ...\n $ : int [1:122] 6 7 11 14 15 17 18 19 20 21 ...\n $ : int [1:122] 3 4 5 6 7 8 9 10 11 12 ...\n $ : int [1:129] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:133] 3 5 6 7 9 10 11 13 14 15 ...\n $ : int [1:129] 6 7 10 11 14 15 17 18 19 20 ...\n $ : int [1:122] 7 11 15 18 19 20 21 25 26 27 ...\n $ : int [1:129] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:136] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:131] 7 11 14 15 18 19 20 21 25 26 ...\n $ : int [1:128] 3 5 6 7 8 9 10 11 12 13 ...\n $ : int [1:139] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:141] 6 7 10 11 13 14 15 16 17 18 ...\n $ : int [1:139] 7 11 14 15 17 18 19 20 21 25 ...\n $ : int [1:137] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:145] 6 7 10 11 13 14 15 16 17 18 ...\n $ : int [1:144] 7 11 14 15 17 18 19 20 21 24 ...\n $ : int [1:133] 3 5 6 7 9 10 11 12 13 14 ...\n $ : int [1:143] 6 7 10 11 13 14 15 16 17 18 ...\n $ : int [1:147] 7 11 14 15 17 18 19 20 21 24 ...\n $ : int [1:126] 5 6 7 9 10 11 12 13 14 15 ...\n $ : int [1:140] 6 7 10 11 13 14 15 16 17 18 ...\n $ : int [1:150] 7 11 14 15 17 18 19 20 21 24 ...\n $ : int [1:152] 11 15 18 19 20 21 25 26 27 28 ...\n $ : int [1:130] 10 11 13 14 15 16 17 18 19 20 ...\n $ : int [1:144] 11 14 15 17 18 19 20 21 24 25 ...\n $ : int [1:152] 11 15 18 19 20 21 25 26 27 28 ...\n $ : int [1:155] 15 19 20 21 26 27 28 29 32 33 ...\n $ : int [1:117] 13 14 16 17 18 19 23 24 25 26 ...\n $ : int [1:134] 14 15 17 18 19 20 24 25 26 27 ...\n $ : int [1:150] 15 18 19 20 21 25 26 27 28 29 ...\n $ : int [1:158] 15 19 20 21 26 27 28 29 32 33 ...\n $ : int [1:104] 16 17 18 23 24 25 26 30 31 32 ...\n $ : int [1:143] 18 19 20 25 26 27 28 31 32 33 ...\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:1492] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 4.6, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 4.6\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nShow the code\npar(mfrow = c(1,2))\nplot(total_trips_per_grid_wdmp$area_honeycomb_grid, border = \"lightgrey\",main=\"1st nearest neighbours\" )\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(total_trips_per_grid_wdmp$area_honeycomb_grid, border = \"lightgrey\", main = \"Distance Link\")\nplot(wm_d4.6, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\nDue to a high number of links, we have very dense graphs which make it difficult to interpret. However, we can still make some observations:\n\nThe above charts actually illustrates a characteristic of fixed distance weight matrix whereby the hexagonal grid of busttop origin in the centre of Singapore tend to have more neighbours and the edges of Singapore with lesser neighbours like Johor, Tanah Merah Coast.\nBased on the above charts, we can tell that the geographical areas of the regions in Singapore are highly connected by the bus.\n\n\n\n\n10.1.6 Adaptive Distance Weight Matrix\nTo overcome the issue of fixed distance weight matrix where there is uneven distribution of neighbours, we can use directly control the numbers of neighbours using k-nearest neighbours, as shown in the code chunk below.\nI will set k = 6 i.e., all hexagonal grids will have 6 neighbours for hexagonal grids.\n\n\nShow the code\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 1492 \nNumber of nonzero links: 8952 \nPercentage nonzero weights: 0.4021448 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\n\n10.1.7 Plotting distance based neighbours\n\n\nShow the code\npar(mfrow = c(1,2))\nplot(total_trips_per_grid_wdmp$area_honeycomb_grid, border = \"lightgrey\",main=\"6 nearest neighbours\" )\nplot(knn6, coords, add = TRUE, col = \"red\", length = 0.88, )\n\nplot(total_trips_per_grid_wdmp$area_honeycomb_grid, border = \"lightgrey\", main = \"Distance Link w KNN\")\nplot(knn6, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n10.1.8 Determining Which Weights Matrix to Use\nSelecting a spatial weight matrix is use is dependent on the geographical area of interest and the focus of the study. Contiguity-based is preferred for hexagonal grid with uniform sizes because contiguity matrices are well-suited for regular grids where neighboring units share common boundaries. However, in my case, there are some hexagonal grid with no neighbour making contiguity-based not preferable. Therefore, I will use distance-based methods with adaptive distance spatial weight matrix because fixed distance has disadvantage where some regions only have 1 neighbour, while others may have 158 neighbours.\n\n\n10.1.9 Row-Standardised Weights Matrix\nAfter selecting the weight matrix to use, I will now assign weights to each neighboring polygon. Each neighboring polygon will be assigned equal weight (style=“W”) by assigning the fraction 1/(#of neighbors) to each neighbouring area. This is also known as a row-standardised matrix where each row in the matrix sums to 1.\n\n\nShow the code\nrswm_knn6 &lt;- nb2listw(knn6,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_knn6\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1492 \nNumber of nonzero links: 8952 \nPercentage nonzero weights: 0.4021448 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0    S1       S2\nW 1492 2226064 1492 462.5 6048.333\n\n\nI will be using the row-standardised weight matrix for the next part of the analysis.\nNotes:\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\nThe above processes are previously implemented on Weekday Morning Peak Hour. Next, I will implemented the same process as above for Weekday Afternoon Peak Hour, Weekends/Holiday Morning Peak Hour and Weekends/Holiday Evening Peak Hour\n\n\nShow the code\ntotal_trips_per_grid_wdap$area_honeycomb_grid &lt;- st_transform(total_trips_per_grid_wdap$area_honeycomb_grid, \"+proj=longlat +datum=WGS84\") \n\ncoords_wdap &lt;- st_coordinates(st_centroid(total_trips_per_grid_wdap$area_honeycomb_grid)) \nknn6_wdap &lt;- knn2nb(knearneigh(coords_wdap, k=6)) \nrswm_knn6_wdap &lt;- nb2listw(knn6_wdap,\n                   style = \"W\",\n                   zero.policy = TRUE)\n\n\n\n\nShow the code\ntotal_trips_per_grid_wdap$area_honeycomb_grid &lt;- st_transform(total_trips_per_grid_wdap$area_honeycomb_grid, \"+proj=longlat +datum=WGS84\")\ncoords_wdap &lt;- st_coordinates(st_centroid(total_trips_per_grid_wdap$area_honeycomb_grid)) \nknn6_wdap &lt;- knn2nb(knearneigh(coords_wdap, k=6)) \nrswm_knn6_wdap &lt;- nb2listw(knn6_wdap,\n                   style = \"W\",\n                   zero.policy = TRUE)\n\n\n\n\nShow the code\ntotal_trips_per_grid_wemp$area_honeycomb_grid &lt;- st_transform(total_trips_per_grid_wemp$area_honeycomb_grid, \"+proj=longlat +datum=WGS84\")\ncoords_wemp &lt;- st_coordinates(st_centroid(total_trips_per_grid_wemp$area_honeycomb_grid)) \nknn6_wemp &lt;- knn2nb(knearneigh(coords_wemp, k=6)) \nrswm_knn6_wemp &lt;- nb2listw(knn6_wemp,\n                   style = \"W\",\n                   zero.policy = TRUE)\n\n\n\n\nShow the code\ntotal_trips_per_grid_weep$area_honeycomb_grid &lt;- st_transform(total_trips_per_grid_weep$area_honeycomb_grid, \"+proj=longlat +datum=WGS84\") \ncoords_weep &lt;- st_coordinates(st_centroid(total_trips_per_grid_weep$area_honeycomb_grid)) \nknn6_weep &lt;- knn2nb(knearneigh(coords_weep, k=6)) \nrswm_knn6_weep &lt;- nb2listw(knn6_weep,\n                   style = \"W\",\n                   zero.policy = TRUE)\n\n\n\n\n10.1.10 Computing Global Spatial Autocorrelation Statistics\nThis in sub-section, I will use two methods: Moran’s I and Geary’s C to test the hypothesis the following hypothesis:\n\nH0: Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\nH1: Data is more spatially clustered than expected by chance alone.\n\nMoran’s I\nI will perform Moran’s I statistical testing by using moran.test() of spdep pacakage. Moran’s I describe how features differ from the values in the study area as a whole. The Moran I statistic ranges from -1 to 1. If the Moran I is:\n\npositive (I&gt;0): Clustered, observations tend to be similar\nnegative (I&lt;0): Disperse, observations tend to be dissimilar\napproximately zero: observations arranged randomly over space\n\nThe below code chunk will perform the Moran’s I test on the passenger trips generate by origin.\n\n\nShow the code\nmoran.test(total_trips_per_grid_wdmp$total_trips,\n           listw = rswm_knn6,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  total_trips_per_grid_wdmp$total_trips  \nweights: rswm_knn6    \n\nMoran I statistic standard deviate = 14.627, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2066719242     -0.0006706908      0.0002009369 \n\n\n\n\nShow the code\nmoran.test(total_trips_per_grid_wdap$total_trips,\n           listw = rswm_knn6_wdap,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  total_trips_per_grid_wdap$total_trips  \nweights: rswm_knn6_wdap    \n\nMoran I statistic standard deviate = 4.5255, p-value = 3.013e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0624977956     -0.0006702413      0.0001948330 \n\n\n\n\nShow the code\nmoran.test(total_trips_per_grid_wemp$total_trips,\n           listw = rswm_knn6_wemp,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  total_trips_per_grid_wemp$total_trips  \nweights: rswm_knn6_wemp    \n\nMoran I statistic standard deviate = 11.152, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1568590667     -0.0006684492      0.0001995208 \n\n\n\n\nShow the code\nmoran.test(total_trips_per_grid_weep$total_trips,\n           listw = rswm_knn6_weep,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  total_trips_per_grid_weep$total_trips  \nweights: rswm_knn6_weep    \n\nMoran I statistic standard deviate = 7.5898, p-value = 1.602e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1059540543     -0.0006715917      0.0001973622 \n\n\nSince the p-value &lt; 0.05, I have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone. Since Moran I statistics are larger than 0, the observation are clustered, observations tend to be similar.\nComputing Monte Carlo Moran’s I\nIf there are doubts that the assumptions of Moran’s I are true (normality and randomisation), a Monte Carlo simulation is used to perform a permutation test for Moran’s I.\nThe permutation tests consists of randomly reassigning the attribute values to a cell under the assumption of no spatial pattern. This random assignment is conducted n times. Each time, I will compute the Moran’s I to crerate an empirical distribution of Moran’s I under H0.\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep package with a total of 1000 simulation.\n\n\nShow the code\nset.seed(1234)\nbperm= moran.mc(total_trips_per_grid_wdmp$total_trips, \n                listw=rswm_knn6, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  total_trips_per_grid_wdmp$total_trips \nweights: rswm_knn6  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20667, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_wdap= moran.mc(total_trips_per_grid_wdap$total_trips, \n                listw=rswm_knn6_wdap, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_wdap\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  total_trips_per_grid_wdap$total_trips \nweights: rswm_knn6_wdap  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.062498, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_wemp= moran.mc(total_trips_per_grid_wemp$total_trips, \n                listw=rswm_knn6_wemp, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_wemp\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  total_trips_per_grid_wemp$total_trips \nweights: rswm_knn6_wemp  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.15686, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_weep= moran.mc(total_trips_per_grid_weep$total_trips, \n                listw=rswm_knn6_weep, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_weep\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  total_trips_per_grid_weep$total_trips \nweights: rswm_knn6_weep  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.10595, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince the p-value is &lt; 0.05, we have sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\nGeary’s C\nGeary’s C considers the difference between respective observations meaning that it describe how features differ from their immediate neighbours. Geary’s C range from -1 to an undefined number above 1. If the Geary’s C is:\n\nLarge (c&gt;1): Dispersed, observations tend to be dissimilar\nSmall (c&lt;1): Clustered, observations tend to be similar\nc = 1: observations arranged randomly over space\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation for passenger trips generate by origin using geary.test() of spdep pacakage.\n\n\nShow the code\ngeary.test(total_trips_per_grid_wdmp$total_trips, listw = rswm_knn6)\n\n\n\n    Geary C test under randomisation\n\ndata:  total_trips_per_grid_wdmp$total_trips \nweights: rswm_knn6 \n\nGeary C statistic standard deviate = 7.4283, p-value = 5.502e-14\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.8176559658      1.0000000000      0.0006025712 \n\n\n\n\nShow the code\ngeary.test(total_trips_per_grid_wdap$total_trips, listw = rswm_knn6_wdap)\n\n\n\n    Geary C test under randomisation\n\ndata:  total_trips_per_grid_wdap$total_trips \nweights: rswm_knn6_wdap \n\nGeary C statistic standard deviate = 0.88403, p-value = 0.1883\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.9722463494      1.0000000000      0.0009856147 \n\n\n\n\nShow the code\ngeary.test(total_trips_per_grid_wemp$total_trips, listw = rswm_knn6_wemp)\n\n\n\n    Geary C test under randomisation\n\ndata:  total_trips_per_grid_wemp$total_trips \nweights: rswm_knn6_wemp \n\nGeary C statistic standard deviate = 5.3249, p-value = 5.049e-08\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.864653629       1.000000000       0.000646046 \n\n\n\n\nShow the code\ngeary.test(total_trips_per_grid_weep$total_trips, listw = rswm_knn6_weep)\n\n\n\n    Geary C test under randomisation\n\ndata:  total_trips_per_grid_weep$total_trips \nweights: rswm_knn6_weep \n\nGeary C statistic standard deviate = 2.8704, p-value = 0.00205\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.9167373752      1.0000000000      0.0008414086 \n\n\nFor Weekday Morning Peak Hour, Weekends/Holiday Morning Peak and Weekends/Holiday Evening Peak, the p-value &lt; 0.05, there is sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone. The Geary C statistics are less than 1 suggesting that clusters are present . This finding is consistent with the results of the Global Moran’s I test in the previous section.\nHowever, for Weekday Afternoon Peak Hour, the p-value &gt; 0.05, suggesting that there is no sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This mean that the data is randomly disbursed with no spatial pattern which is not consistent with results of the Global Moran’s I test in the previous section.\nComputing Monte Carlo Geary’s C\nSimilar to Moran’s I, Monte Carlo simulation is used to perform a permutation test for Geary’s C. The code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep pacakagepackeage with a total of 1000 simulation.\n\n\nShow the code\nset.seed(1234)\nbperm_func = geary.mc(total_trips_per_grid_wdmp$total_trips,\n                 listw = rswm_knn6,\n                 nsim = 999)\nbperm_func\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  total_trips_per_grid_wdmp$total_trips \nweights: rswm_knn6 \nnumber of simulations + 1: 1000 \n\nstatistic = 0.81766, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nset.seed(1234)\nbperm_func_wdap = geary.mc(total_trips_per_grid_wdap$total_trips,\n                 listw = rswm_knn6_wdap,\n                 nsim = 999)\nbperm_func_wdap\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  total_trips_per_grid_wdap$total_trips \nweights: rswm_knn6_wdap \nnumber of simulations + 1: 1000 \n\nstatistic = 0.97225, observed rank = 184, p-value = 0.184\nalternative hypothesis: greater\n\n\n\n\nShow the code\nbperm_func_wemp = geary.mc(total_trips_per_grid_wemp$total_trips,\n                 listw = rswm_knn6_wemp,\n                 nsim = 999)\nbperm_func_wemp\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  total_trips_per_grid_wemp$total_trips \nweights: rswm_knn6_wemp \nnumber of simulations + 1: 1000 \n\nstatistic = 0.86465, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nShow the code\nbperm_func_weep = geary.mc(total_trips_per_grid_weep$total_trips,\n                 listw = rswm_knn6_weep,\n                 nsim = 999)\nbperm_func_weep\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  total_trips_per_grid_weep$total_trips \nweights: rswm_knn6_weep \nnumber of simulations + 1: 1000 \n\nstatistic = 0.91674, observed rank = 7, p-value = 0.007\nalternative hypothesis: greater\n\n\nFor Weekday Morning Peak Hour, Weekends/Holiday Morning Peak and Weekends/Holiday Evening Peak, the p-value is less than 0.05, suggesting that there is sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence. This means that data is more spatially clustered than expected by chance alone.\nHowever, for Weekday Afternoon Peak Hour, the p-value &gt; 0.05, suggesting that there is no sufficient statistical evidence to reject the null hypothesis at the 95% level of confidence, suggesting that the data is randomly disbursed with no spatial pattern."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#local-spatial-autocorrelation-statistics",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#local-spatial-autocorrelation-statistics",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "11 Local Spatial Autocorrelation Statistics",
    "text": "11 Local Spatial Autocorrelation Statistics\nFrom the results above, I have established the statistical testing that spatial clustering occurs for Weekday Morning Peak Hour, Weekends/Holiday Morning Peak and Weekends/Holiday Evening but not for Weekday Afternoon Peak Hour in Singapore.\nIn this section, I will detect clusters/outliers and discover hot or cold spots using Local Spatial Autocorrelation Statistics with Local Indicators of Spatial Association (LISA).\n\n11.1 Local Indicators of Spatial Association (LISA) Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable.\nIn this section, I will apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from passenger trips generate by origin at hexagon level.\nPositive Local Moran’s I value indicates that a feature has neighboring features with similarly high or low attribute values which refer to a cluster. While Negative Local Moran’s I value indicates that a feature has neighboring features with dissimilar values which refer to an outlier.\nComputing local Moran’s I\nI will use localmoran() function of spdep package to compute local Moran’s I by first computing Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of Total Trips at the hexagonal grid level.\n\n\nShow the code\nfips &lt;- order(total_trips_per_grid_wdmp$grid_id)\nlocalMI &lt;- localmoran(total_trips_per_grid_wdmp$total_trips, rswm_knn6)\nhead(localMI)\n\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.3922014 -0.0002685351 0.06653377 1.521547      0.1281227\n2 0.3931675 -0.0002701326 0.06692947 1.520783      0.1283143\n3 0.3861718 -0.0002693176 0.06672760 1.495997      0.1346545\n4 0.3915081 -0.0002659764 0.06590000 1.526135      0.1269762\n5 0.3727281 -0.0002377856 0.05891693 1.536558      0.1244015\n6 0.3910946 -0.0002701012 0.06692170 1.512858      0.1303158\n\n\n\n\nShow the code\nfips_wdap &lt;- order(total_trips_per_grid_wdap$grid_id)\nlocalMI_wdap &lt;- localmoran(total_trips_per_grid_wdap$total_trips, rswm_knn6_wdap)\nhead(localMI_wdap)\n\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.2052174 -0.0001410007 0.03496308 1.098266      0.2720883\n2 0.2081184 -0.0001458668 0.03616954 1.095073      0.2734845\n3 0.1964740 -0.0001427366 0.03539348 1.045103      0.2959755\n4 0.1891799 -0.0001157598 0.02870499 1.117280      0.2638748\n5 0.1745250 -0.0001005505 0.02493391 1.105891      0.2687735\n6 0.2010256 -0.0001436174 0.03561185 1.066017      0.2864158\n\n\n\n\nShow the code\nfips_wemp &lt;- order(total_trips_per_grid_wemp$grid_id)\nlocalMI_wemp &lt;- localmoran(total_trips_per_grid_wemp$total_trips, rswm_knn6_wemp)\nhead(localMI_wemp)\n\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.3117395 -0.0002177150 0.05412644 1.340881      0.1799590\n2 0.2986896 -0.0002154877 0.05357282 1.291401      0.1965648\n3 0.3035088 -0.0002041068 0.05074398 1.348252      0.1775774\n4 0.2909179 -0.0001824286 0.04535543 1.366873      0.1716652\n5 0.3007774 -0.0002134419 0.05306431 1.306628      0.1913390\n6 0.2969174 -0.0002160862 0.05372159 1.281968      0.1998540\n\n\n\n\nShow the code\nfips_weep &lt;- order(total_trips_per_grid_weep$grid_id)\nlocalMI_weep &lt;- localmoran(total_trips_per_grid_weep$total_trips, rswm_knn6_weep)\nhead(localMI_weep)\n\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.2257033 -0.0001581269 0.03913004 1.141792      0.2535405\n2 0.2272433 -0.0001607542 0.03978008 1.140159      0.2542201\n3 0.2106050 -0.0001553977 0.03845477 1.074766      0.2824796\n4 0.2156888 -0.0001405767 0.03478769 1.157172      0.2472022\n5 0.2009096 -0.0001241690 0.03072786 1.146840      0.2514479\n6 0.2147767 -0.0001581892 0.03914545 1.086341      0.2773281\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat(). Since the matrix is very long, I only show the head().\n\n\nShow the code\nprintCoefmat(head(data.frame(\n  localMI[fips,], \n  row.names=total_trips_per_grid_wdmp$grid_id[fips]),\n  check.names=FALSE))\n\n\n             Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n34   0.39220141 -0.00026854  0.06653377  1.52154689         0.1281\n65   0.39316750 -0.00027013  0.06692947  1.52078282         0.1283\n99   0.38617181 -0.00026932  0.06672760  1.49599657         0.1347\n127  0.39150811 -0.00026598  0.06590000  1.52613519         0.1270\n129  0.37272807 -0.00023779  0.05891693  1.53655827         0.1244\n130  0.39109457 -0.00027010  0.06692170  1.51285786         0.1303\n\n\nMapping Local Moran’s I values and p-values\nNext, I will append the local Moran’s I dataframe onto nigeria SpatialPolygonDataFrame in preparation for the next part. This can be done using the code chunks below.\n\n\nShow the code\ntotal_trips_per_grid_wdmp.localMI &lt;- cbind(total_trips_per_grid_wdmp,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nShow the code\ntotal_trips_per_grid_wdap.localMI_wdap &lt;- cbind(total_trips_per_grid_wdap,localMI_wdap) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nShow the code\ntotal_trips_per_grid_wemp.localMI_wemp &lt;- cbind(total_trips_per_grid_wemp,localMI_wemp) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nShow the code\ntotal_trips_per_grid_weep.localMI_weep &lt;- cbind(total_trips_per_grid_weep,localMI_weep) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\nLet’s visualise both the Local Moran’s I values and its p-values using the choropleth mapping functions of tmap package.\n\n\nShow the code\nlocalMI.map &lt;- tm_shape(total_trips_per_grid_wdmp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(total_trips_per_grid_wdmp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nShow the code\nlocalMI_wdap.map &lt;- tm_shape(total_trips_per_grid_wdap.localMI_wdap) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue_wdap.map &lt;- tm_shape(total_trips_per_grid_wdap.localMI_wdap) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI_wdap.map, pvalue_wdap.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nShow the code\nlocalMI_wemp.map &lt;- tm_shape(total_trips_per_grid_wemp.localMI_wemp) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue_wemp.map &lt;- tm_shape(total_trips_per_grid_wemp.localMI_wemp) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI_wemp.map, pvalue_wemp.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nShow the code\nlocalMI_weep.map &lt;- tm_shape(total_trips_per_grid_weep.localMI_weep) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue_weep.map &lt;- tm_shape(total_trips_per_grid_weep.localMI_weep) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI_weep.map, pvalue_weep.map, asp=1, ncol=2)\n\n\n\n\n\nI will further build a choropleth and shade only grids that are statistically significant using the chunk code below. Firstly, I create ane object that consist statistically significant values using filter(). Then, I plot the base map consisting of the polygons features and lastly I overlay the base map with the statically significant Moran I’ value map. The processes are repeated for the other peah hour group.\n\n\nShow the code\n#Wdmp\ntotal_trips_per_grid_wdmp.localMI_sig_wdmp &lt;- cbind(total_trips_per_grid_wdmp,\n                                                 localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..) %&gt;%\n  filter(Pr.Ii &lt; 0.05)\n\nbase_wdmp &lt;- tm_shape(total_trips_per_grid_wdmp) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_wdmp.map &lt;- base_wdmp + \n  tm_shape(total_trips_per_grid_wdmp.localMI_sig_wdmp) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Weekday Morning Peak) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n#wdap\ntotal_trips_per_grid_wdap.localMI_sig_wdap &lt;- cbind(total_trips_per_grid_wdap,localMI_wdap) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..) %&gt;%\n  filter(Pr.Ii &lt; 0.05)\n\nbase_wdap &lt;- tm_shape(total_trips_per_grid_wdap) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_wdap.map &lt;- base_wdap + \n  tm_shape(total_trips_per_grid_wdap.localMI_sig_wdap) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Weekday Afternoon Peak) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n#wemp\ntotal_trips_per_grid_wemp.localMI_sig_wemp &lt;- cbind(total_trips_per_grid_wemp,localMI_wemp) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..) %&gt;%\n  filter(Pr.Ii &lt; 0.05)\n\nbase_wemp &lt;- tm_shape(total_trips_per_grid_wemp) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_wemp.map &lt;- base_wemp + \n  tm_shape(total_trips_per_grid_wemp.localMI_sig_wemp) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Weekends/Holiday Morning Peak) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n#weep\ntotal_trips_per_grid_weep.localMI_sig_weep &lt;- cbind(total_trips_per_grid_weep,localMI_weep) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..) %&gt;%\n  filter(Pr.Ii &lt; 0.05)\n\nbase_weep &lt;- tm_shape(total_trips_per_grid_weep) + \n  tm_fill(col = 'gray98') + \n  tm_borders(alpha = 0.3)\n\nlocalMI_sig_weep.map &lt;- base_weep + \n  tm_shape(total_trips_per_grid_weep.localMI_sig_weep) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          title = \"Local Moran I Statistics\") +\n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"Local Moran's I (Sig.) Map \\n(Weekends/Holiday Afternoon Peak) \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\ntmap_arrange(localMI_sig_wdmp.map,localMI_sig_wdap.map, localMI_sig_wemp.map,localMI_sig_weep.map)\n\n\n\n\n\nA positive Local Moran’s I value indicates that a feature is part of a cluster while a negative Local Moran’s I value indicates that a feature is an outlier. From the plot above, it it notable that north of Singapore which is around Woodlands are has 1 cluster with green shade for weekdays. While for weekends/holiday, there are more yellow referring to outliers except for the south part of Singapore, there is a noticeable cluster with green shade.\n\n\n11.2 Plotting LISA Cluster Map\nThe local Moran’s I value alone is not enough to show spatial clustering because it does not tell us whether the value of the variable being tested is high or low and whether the test result was significant. Therefore, I will assign each observation to a quadrant depending on the value of the variable on the y-axis (centred around the mean) and Moran’s I on the x-axis. Quadrant 1 contains coldspots and quadrant contains hotspot as follows:\n\n\n\nLISA_Quadrant\n\n\nLISA Cluster Maps also categorises each region into one of five groups: (1) High-High, (2) High-Low, (3) Low-High, (4) Low-Low and (5) Insignificant.\nThe following steps are conducted to prepare for LISA cluster map:\n\nCreate a vector of the same length as the number of hexagonal grid in each peak hour datasets.\nDerive a variable, DV by using a by using the spatially lagged version of total_trips and center it around its means. When DV &gt; 0, the spatially lagged variable of the region is higher than the mean.\nDerive a variable, L_MI using the Local Moran’s I.\nSet the significance level for the local Moran.\nDefine the command lines for: high-high, low-low, low-high, high-low\nPlace statistically insignificant Moran I in the category 0.\n\n\n\nShow the code\n#Step 1\nquadrant &lt;- vector(mode = 'numeric', length = nrow(localMI))\n#Step 2\ntotal_trips_per_grid_wdmp$lag_total_trips &lt;- lag.listw(rswm_knn6, total_trips_per_grid_wdmp$total_trips)\nDV &lt;- total_trips_per_grid_wdmp$lag_total_trips - mean(total_trips_per_grid_wdmp$lag_total_trips)     \n#Step 3\nLM_I &lt;- localMI[,1] \n#Step 4\nsignif &lt;- 0.05\n#Step 5\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1 #low-low\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2 #high-low\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3 #low-high\nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4 #high-high\n#Step 6\nquadrant[localMI[,5]&gt;signif] &lt;- 0 \n\n\nThe code chunk below is to plot the LISA cluster map for Weekday Morning Peak Hour.\n\n\nShow the code\n#Assign each region  to its respective quadrant\ntotal_trips_per_grid_wdmp.localMI$quadrant &lt;- quadrant\n#Set the colours--one for each quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_wdmp &lt;- tm_shape(total_trips_per_grid_wdmp.localMI) + \n  tm_fill(col = \"quadrant\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n Weekday Morning Peak Hour \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\nThe above processes are implemented for the other peak hours group.\n\n\nShow the code\n#Step 1\nquadrant_wdap &lt;- vector(mode = 'numeric', length = nrow(localMI_wdap))\n#Step 2\ntotal_trips_per_grid_wdap$lag_total_trips &lt;- lag.listw(rswm_knn6_wdap, total_trips_per_grid_wdap$total_trips)\nDV_wdap &lt;- total_trips_per_grid_wdap$lag_total_trips - mean(total_trips_per_grid_wdap$lag_total_trips)     \n#Step 3\nLM_I_wdap &lt;- localMI_wdap[,1] \n#Step 4\nsignif &lt;- 0.05\n#Step 5\nquadrant_wdap[DV_wdap &lt;0 & LM_I_wdap&gt;0] &lt;- 1 #low-low\nquadrant_wdap[DV_wdap &gt;0 & LM_I_wdap&lt;0] &lt;- 2 #high-low\nquadrant_wdap[DV_wdap &lt;0 & LM_I_wdap&lt;0] &lt;- 3 #low-high\nquadrant_wdap[DV_wdap &gt;0 & LM_I_wdap&gt;0] &lt;- 4 #high-high\n#Step 6\nquadrant_wdap[localMI_wdap[,5]&gt;signif] &lt;- 0 \n\n#Assign each region  to its respective quadrant\ntotal_trips_per_grid_wdap.localMI_wdap$quadrant_wdap &lt;- quadrant_wdap\n#Set the colours--one for each quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_wdap &lt;- tm_shape(total_trips_per_grid_wdap.localMI_wdap) + \n  tm_fill(col = \"quadrant_wdap\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_wdap)))+1],\n          labels = clusters[c(sort(unique(quadrant_wdap)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n Weekday Afternoon Peak Hour \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\n\n\nShow the code\n#Step 1\nquadrant_wemp &lt;- vector(mode = 'numeric', length = nrow(localMI_wemp))\n#Step 2\ntotal_trips_per_grid_wemp$lag_total_trips &lt;- lag.listw(rswm_knn6_wemp, total_trips_per_grid_wemp$total_trips)\nDV_wemp &lt;- total_trips_per_grid_wemp$lag_total_trips - mean(total_trips_per_grid_wemp$lag_total_trips)     \n#Step 3\nLM_I_wemp &lt;- localMI_wemp[,1] \n#Step 4\nsignif &lt;- 0.05\n#Step 5\nquadrant_wemp[DV_wemp &lt;0 & LM_I_wemp&gt;0] &lt;- 1 #low-low\nquadrant_wemp[DV_wemp &gt;0 & LM_I_wemp&lt;0] &lt;- 2 #high-low\nquadrant_wemp[DV_wemp &lt;0 & LM_I_wemp&lt;0] &lt;- 3 #low-high\nquadrant_wemp[DV_wemp &gt;0 & LM_I_wemp&gt;0] &lt;- 4 #high-high\n#Step 6\nquadrant_wemp[localMI_wemp[,5]&gt;signif] &lt;- 0 \n\n#Assign each region  to its respective quadrant\ntotal_trips_per_grid_wemp.localMI_wemp$quadrant_wemp &lt;- quadrant_wemp\n#Set the colours--one for each quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_wemp &lt;- tm_shape(total_trips_per_grid_wemp.localMI_wemp) + \n  tm_fill(col = \"quadrant_wemp\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_wemp)))+1],\n          labels = clusters[c(sort(unique(quadrant_wemp)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n Weekends/Holiday Morning Peak Hour \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\n\n\nShow the code\n#Step 1\nquadrant_weep &lt;- vector(mode = 'numeric', length = nrow(localMI_weep))\n#Step 2\ntotal_trips_per_grid_weep$lag_total_trips &lt;- lag.listw(rswm_knn6_weep, total_trips_per_grid_weep$total_trips)\nDV_weep &lt;- total_trips_per_grid_weep$lag_total_trips - mean(total_trips_per_grid_weep$lag_total_trips)     \n#Step 3\nLM_I_weep &lt;- localMI_weep[,1] \n#Step 4\nsignif &lt;- 0.05\n#Step 5\nquadrant_weep[DV_weep &lt;0 & LM_I_weep&gt;0] &lt;- 1 #low-low\nquadrant_weep[DV_weep &gt;0 & LM_I_weep&lt;0] &lt;- 2 #high-low\nquadrant_weep[DV_weep &lt;0 & LM_I_weep&lt;0] &lt;- 3 #low-high\nquadrant_weep[DV_weep &gt;0 & LM_I_weep&gt;0] &lt;- 4 #high-high\n#Step 6\nquadrant_weep[localMI_weep[,5]&gt;signif] &lt;- 0 \n\n#Assign each region  to its respective quadrant\ntotal_trips_per_grid_weep.localMI_weep$quadrant_weep &lt;- quadrant_weep\n#Set the colours--one for each quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\") \n\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_weep &lt;- tm_shape(total_trips_per_grid_weep.localMI_weep) + \n  tm_fill(col = \"quadrant_weep\",\n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_weep)))+1],\n          labels = clusters[c(sort(unique(quadrant_weep)))+1])  + \n  tm_borders(alpha = 0.3) + \n  tm_layout(main.title = \"LISA Cluster Map \\n Weekends/Holiday Evening Peak Hour \",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE)\n\n\nNext, I will plot the local Moran’s I map (statistically significant values only) and LISA map together. The shaded hexagonal grids will be the same for each pair of maps.\n\n\nShow the code\ntmap_arrange(localMI_sig_wdmp.map, LISAmap_wdmp,\n  localMI_sig_wdap.map, LISAmap_wdap,\n  ncol =2)\n\n\n\n\n\n\n\nShow the code\ntmap_arrange(localMI_sig_wemp.map, LISAmap_wemp,\n  localMI_sig_weep.map, LISAmap_weep,\n  ncol =2)\n\n\n\n\n\nThe LISA maps provides extra information whether the hexagonal grids have relatively higher or lower passenger trips generate by origin. Overall, Local Moran’s have revealed significant spatial cluster and outliers.\nFrom the results above, it is noticed that there are only 3 type of quadrants which are insignificant, low-high and high-high. For ease of interpreting the result, below are the maps of Singapore regions.\n\n\n\nSingapore Regions\n\n\nWeekday Morning Peak Hour:\nFrom the Local Moran’s I map, there are some hexagonal grids with positive Local Moran’s I values and they have neigbours with another high or low passenger trip grids. This consistent with the LISA maps. The high-high clusters spread across Singapore while the low-high outliers are typically near the high-high clusters. The hexagonal grid near the Singapore Malaysia border (Johor and edges near the border) are high-high cluster indicating a high level of cross country activities during the weekday morning.\nWeekday Afternoon Peak Hour:\nThe cluster with high-high characteristics are distributed throughout Singapore with exception of West Singapore where only low-high outliers are apparent. This is attributed to the presence of Boon Lay Bus Interchange as the sole busy interchange in the western region, leading to comparatively lower passenger trips in the other parts of West Singapore.\nWeekends/Holiday Morning Peak Hour:\nThe cluster with high-high characteristics are distributed throughout Singapore especially in the CBD/Central area where a significant concentration of passenger trips are observed during these times. This elevated activities may be influenced by various factors such as recreational activities, family/friend gathering, etc., contributing to the high level of engagement and movement in the CBD area.\nWeekends/Holiday Evening Peak Hour:\nThe distribution of high-high cluster and low-high outliers are quite similar with Weekends/Holiday Morning Peak Hour except that the high-high cluster are wider around the CBD area during evening and there is no high-high cluster around the Yishun area as compared to weekends/holiday morning peak hour."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "12 Conclusion",
    "text": "12 Conclusion\nIn this take-home exercise, ESDA was used to generate insights about the distribution of passenger trips in Singapore. Using the Global Spatial Autocorrelation Statistics, it is noted that there is existence of spatial autocorrelation for all peak hour groups as whole analysis using Moran’s I statistical test. However, when employing Geary’s C, which accounts for differences with immediate neighbors, the data on weekday afternoon peak hour passenger trips is determined to be randomly dispersed, showing no discernible spatial pattern.\nThe existence of spatial autocorrelation led me to use local spatial autocorrelation statistics like LISA cluster maps to identify areas of clusters and outliers. Understanding the uneven distribution of passenger trips for different peak hours will be crucial for optimizing public transportation infrastrcuture, managing congestion and enhancing overall urban mobility.\nIn conclusion, the insights gained from both global and local spatial autocorrelation analyses contribute to a comprehensive understanding of passenger trip patterns for targeted interventions and strategic planning which in turn help to improve the efficiency and sustainability of transportation systems in Singapore. To enhance the depth of transportation dynamics analysis, future work could explore destination-specific or individual bus route considerations."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#references",
    "href": "Take-home_Exercise/Take-home_Ex1/Take-home_Ex1.html#references",
    "title": "Take-home_Ex1: Public Bus Passengers in Singapore",
    "section": "13 References",
    "text": "13 References\n[1] https://urbandatapalette.com/post/2021-08-tessellation-sf/"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Business.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Business.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/F&B.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/F&B.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Retails.html",
    "href": "Take-home_Exercise/Take-home_Ex2/data/geospatial/Retails.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#the-task",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#the-task",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "",
    "text": "In this in-class exercise, you are required to prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\nThe specific task of this in-class exercise are as follows:\n\nto import Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nto import geospatial data in ESRI shapefile format into sf data frame format,\nto perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nto visualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "",
    "text": "In this in-class exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#overview",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#overview",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "",
    "text": "In this in-class exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#getting-started",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below load the following packages:\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: non-spatial data handling\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#preparing-the-flow-data",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#preparing-the-flow-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#importing-the-od-data",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1_ori.html#importing-the-od-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "4 Importing the OD Data",
    "text": "4 Importing the OD Data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\n# eval:false\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\n\n4.1 Extracting the study data\n\n#eval: false\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\n\n# eval: false\norigtrip_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE==\"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;=9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS=sum(TOTAL_TRIPS))\n\nTwo geospatial data will be used in this exercise, they are:\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\", layer=\"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26..."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "4 Working with Geospatial Data",
    "text": "4 Working with Geospatial Data\nIn this section, you are required to import two shapefile into RStudio, they are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\n\n4.1 Importing geospatial data\n\nThe TaskThe Solution\n\n\nUsing the steps you learned from Hands-on Exercise 1, import BusStop downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.\n\n\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\", layer=\"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\nThe structure of busstop sf tibble data frame should look as below.\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nThe TaskThe Solution\n\n\nUsing the steps you learned from Hands-on Exercise 1, import MPSZ-2019 downloaded from eLearn into RStudio and save it as a sf data frame called mpsz.\n\n\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\n\nThe structure of mpsz sf tibble data frame should look as below.\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "5 Geospatial data wrangling",
    "text": "5 Geospatial data wrangling\n\n5.1 Combining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.\n\n\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \n\n\nThe TaskThe Solution\n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.\n\n\n\norigin_SZ &lt;- left_join(origin_7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C) %&gt;%\n  group_by(ORIGIN_SZ) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\n\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- origin_SZ %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\norigin_data &lt;- unique(origin_SZ)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\nThe TaskThe Solution\n\n\nNext, write a code chunk to update od_data data frame with the planning subzone codes.\n\n\n\norigintrip_SZ &lt;- left_join(mpsz, \n                           origin_SZ,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "href": "In-class_Exercise/In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Analytics",
    "section": "6 Choropleth Visualisation",
    "text": "6 Choropleth Visualisation\n\nThe TaskThe Solution\n\n\nUsing the steps you had learned, prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.\n\n\n\ntm_shape(origintrip_SZ)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n6.1 Creating interactive map\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\ntm_shape(origintrip_SZ)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#installing-and-loading-the-r-packages",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#installing-and-loading-the-r-packages",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "2.1 Installing and Loading the R Packages",
    "text": "2.1 Installing and Loading the R Packages\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly and tidyverse.\n\npacman::p_load( sf, sfdep, tmap, tidyverse, plotly)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#importing-geospatial-data",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#importing-geospatial-data",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "3.1 Importing geospatial data",
    "text": "3.1 Importing geospatial data\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#importing-attribute-table",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#importing-attribute-table",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "3.2 Importing attribute table",
    "text": "3.2 Importing attribute table\nIn the code chunk below, read_csv() of readr is used to import Hunan_GDPPC.csv into R.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#computing-gi",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#computing-gi",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "4.1 Computing Gi*",
    "text": "4.1 Computing Gi*\nNext, we will compute the local Gi* statistics.\n\n4.1.1 Deriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb =include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb,geometry,\n                                  scale = 1,\n                                  alpha=1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\n\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#computing-gi-1",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#computing-gi-1",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "4.2 Computing Gi*",
    "text": "4.2 Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#performing-emerging-hotspot-analysis",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#performing-emerging-hotspot-analysis",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "5 Performing Emerging Hotspot Analysis",
    "text": "5 Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n nsim = 99\n)\n\n\n5.1 Visualising EHSA\nIn this section, you will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nhunan_ehsa &lt;-hunan %&gt;%\n  left_join(ehsa,\n            by= join_by(County==location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt;0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons()+\n  tm_borders(alpha=0.5)+\ntm_shape(ehsa_sig)+\n  tm_fill('classification')+\n  tm_borders(alpha=0.4)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html",
    "title": "In-class_Ex2",
    "section": "",
    "text": "FiveR packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse, and knitr.\n\npacman::p_load( sf, sfdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#getting-started",
    "title": "In-class_Ex2",
    "section": "",
    "text": "FiveR packages will be used for this in-class exercise, they are: sf, sfdep, tmap, tidyverse, and knitr.\n\npacman::p_load( sf, sfdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#the-data",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#the-data",
    "title": "In-class_Ex2",
    "section": "2 The Data",
    "text": "2 The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#getting-data-in-r-environment",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#getting-data-in-r-environment",
    "title": "In-class_Ex2",
    "section": "3 Getting Data in R Environment",
    "text": "3 Getting Data in R Environment\n\n3.1 Importing geospatial data\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Importing attribute table\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n3.3 Combining both data frame by using left join\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nIn order to retain the geospatial properties, the left data frame must be the sf data.frame(i.e. hunan)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#deriving-continuity-spatial-weights",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#deriving-continuity-spatial-weights",
    "title": "In-class_Ex2",
    "section": "4 Deriving Continuity Spatial Weights",
    "text": "4 Deriving Continuity Spatial Weights"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#deriving-continuity-spatial-weights-queens-method",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2_ori.html#deriving-continuity-spatial-weights-queens-method",
    "title": "In-class_Ex2",
    "section": "5 Deriving Continuity Spatial Weights: Queen’s Method",
    "text": "5 Deriving Continuity Spatial Weights: Queen’s Method\nIn the code below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before=1)\n\nNotes: ,before1 -&gt; put nb and wt at the front of the tibble dataset\n\n5.1 Computing local Moran’s I:\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\n\npacman::p_load( sf, sfdep, tmap, tidyverse, knitr, plotly)\n\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n5.2 Creating a Time Series Cube\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan, .loc_col =\"County\",\n                      .time_col =\"Year\")\n\nNote: spacetime is used to create a spacetime cube.\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\n\n5.3 Identifying Neighbours and Derive Inverse Distance Weights\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb =include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb,geometry,\n                                  scale = 1,\n                                  alpha=1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nNotes:\n\nactivate() of dplyr package is used to activate the geometry context.\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen, we will activate the data context again and copy over the b and wt columns to each time-slic using set_nbs () and set_wts()\n\n\n\n5.4 Computing Gi*\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n5.5 Performing Emerging Hotspot Analysis\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n nsim = 99\n)\n\n\n\n5.6 Visualization\n\nhunan_ehsa &lt;-hunan %&gt;%\n  left_join(ehsa,\n            by= join_by(County==location))\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt;0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons()+\n  tm_borders(alpha=0.5)+\ntm_shape(ehsa_sig)+\n  tm_fill('classification')+\n  tm_borders(alpha=0.4)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#overview",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2.html#overview",
    "title": "In-class_Ex2: Spatial Weights and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class introduces an alternative R package to spdep package. The package is called sfdep. According to Josiah Parry, the developer of the package, \"sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.\""
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#overview",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#overview",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#getting-started",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Installing and Loading the R Packages\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly and tidyverse.\n\npacman::p_load( sf, sfdep, tmap, tidyverse, plotly)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#the-data",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#the-data",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "3 The Data",
    "text": "3 The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_GDPPC, an attribute data set in csv format.\n\nBefore getting started, reveal the content of Hunan_GDPPC.csv by using Notepad and MS Excel.\n\n3.1 Importing geospatial data\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Importing attribute table\nIn the code chunk below, read_csv() of readr is used to import Hunan_GDPPC.csv into R.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#creating-a-time-series-cube",
    "href": "In-class_Exercise/In-class_Ex2/In-class_Ex2a.html#creating-a-time-series-cube",
    "title": "In-class_Ex2A: Emerging Hot Spot Analysis: sfdep methods",
    "section": "4 Creating a Time Series Cube",
    "text": "4 Creating a Time Series Cube\nBefore getting started, students must read this article to learn the basic concept of spatio-temporal cube and its implementation in sfdep package.\nIn the code chunk below, spacetime() of sfdep is used to create an spacetime cube.\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\nNext, is_spacetime_cube() of sfdep package will be used to varify if GDPPC_st is indeed an space-time cube object.\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\nThe TRUE return confirms that GDPPC_st object is indeed an time-space cube.\n\n4.1 Deriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb =include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb,geometry,\n                                  scale = 1,\n                                  alpha=1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\n\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\n\n\n4.2 Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "title": "In-class_Ex4: Preparing Spatial Interaction Modelling Variables",
    "section": "3 Counting number of schools in each URA Planning Subzone",
    "text": "3 Counting number of schools in each URA Planning Subzone\n\n3.1 Downloading General information of schools data from data.gov.sg\nTo get started, you are required to download General information of schools data set of School Directory and Information from data.gov.sg.\n\n\n\n\n\n\nImportant\n\n\n\nWe assume that the downloaded School Directory and Information is placed in a sub-folder called data/aspatial/).\n\n\n\n\n3.2 Geocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth's surface.\nSingapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below will perform geocoding using SLA OneMap API. The input data will be in csv file format. It will be read into R Studio environment using read_csv function of readr package. A collection of http call functions of httr package of R will then be used to pass the individual records to the geocoding server at OneMap.\nTwo tibble data.frames will be created if the geocoding process completed successfully. They are called found and not_found. found contains all records that are geocoded correctly and not_found contains postal that failed to be geocoded.\nLastly, the found data table will joined with the initial csv data table by using a unique identifier (i.e. POSTAL) common to both data tables. The output data table will then save as an csv file called found.\n\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$'postal_code'\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes){\n  query &lt;- list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;-GET(url, query=query)\n  \n  if((content(res)$found)!=0){\n    found &lt;-rbind(found, data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\n\n\n\n\n\n\nNote\n\n\n\n#| eval: false -&gt; run 1 time only\n#| echo: false -&gt; the code wont be shown on html page\n#| message: false -&gt; the message will not come up\n\n\nNext, the code chunk below will be used to combine both found and not_found data.frames into a single tibble data.frame called merged. At the same time, we will write merged and not_found tibble data.frames into two separate csv files called schools and not_found respectively.\n\nmerged = merge(csv, found, by.x='postal_code', by.y='results.POSTAL', all=TRUE)\nwrite.csv (merged, file='data/aspatial/schools.csv')\nwrite.csv (not_found, file ='data/aspatial/not_found.csv')\n\n\n\n\n\n\n\nDo It Yourself!\n\n\n\n\nWith the help of Google Map, located the location information of the ungeocoded school by using it's postcode.\nUpdate the results.LATITUDE and results.LONGITUDE fields of the ungeocoded record in schoolss.csv manually.\n\n\n\n\n\n3.3 Importing and tidying schools data\nIn this sub-section, you will import schools.csv into R environment and at the same time tidying the data by selecting only the necessary fields as well as rename some fields.\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\")%&gt;%\n  rename(latitude='results.LATITUDE', longitude='results.LONGITUDE')%&gt;%\n  select(postal_code, school_name, latitude,longitude)\n\n\n\n3.4 Converting an aspatial data into sf tibble data.frame\nNext, you will convert schools tibble data.frame data into a simple feature tibble data.frame called schools_sf by using values in latitude and longitude fields.\nRefer to st_as_sf() of sf package.\n\nschools_sf &lt;- st_as_sf(schools, \n                       coords=c('longitude', 'latitude'),\n                       crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\n\n3.5 Plotting a point simple feature layer\nIn this section, we will create a point symbol map showing the location of schools.\n\ntmap_mode(\"view\")\ntm_shape(schools_sf)+\n  tm_dots()+\ntm_view(set.zoom.limits =c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n3.6 Performing point-in-polygon count process\nFirst, let us import MPSZ-2019 shapefile into R environment and save it as an sf tibble data.frame called mpsz.\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\")%&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nNext, we will count the number of schools located inside the planning subzones.\n\nmpsz$'SCHOOL_COUNT' &lt;- lengths(st_intersects(mpsz, schools_sf))\n\nIt is always a good practice to examine the summary statistics of the derived variable.\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#counting-number-of-business-in-each-ura-planning-subzone",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4.html#counting-number-of-business-in-each-ura-planning-subzone",
    "title": "In-class_Ex4: Preparing Spatial Interaction Modelling Variables",
    "section": "4 Counting number of business in each URA Planning Subzone",
    "text": "4 Counting number of business in each URA Planning Subzone\nFirst, let us import business shapefile into R environment and save it as an sf tibble data.frame called business_sf.\n\nbusiness_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Business\")\n\nReading layer `Business' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nNext, we will create a point symbol map showing the location of business.\n\ntmap_options(check.and.fix=TRUE)\ntm_shape(mpsz)+\n  tm_polygons()+\ntm_shape(business_sf)+\n  tm_dots()\n\n\n\n\nNext, we will count the number of business located inside the planning subzones.\n\nmpsz$'BUSINESS_COUNT' &lt;- lengths(st_intersects(mpsz, business_sf))\nsummary(mpsz$BUSINESS_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#overview",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#overview",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#getting-started",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFor the purpose of this exercise, five r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for plotting cartographicquality thematic maps.\nperformance for computing model comparison matrices such as rmse.\nggpubr for creating publication quality statistical graphics.\nknitr integrates computing and reporting\n\n\npacman::p_load(tmap, sf, performance, ggpubr, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#the-data",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#the-data",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "3 The Data",
    "text": "3 The Data\nThis exercise is a continuation of Hands-on Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. The following data will be used:\n\nflow_data_tidy.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\n\nflow_data&lt;-read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nNotice that this sf tibble data.frame includes two additional fields namely: SCHOOL_COUNT and BUSINESS_COUNT. Both of them will be used as attractiveness variables when calibrating origin constrained SIM.\nThe code chunk below is used to display the first five columns and rows of flow_data.\n\nkable(head(flow_data[, 1:5], n = 5))\n\n\n\n\n\n\n\n\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nMORNING_PEAK\ndist\nORIGIN_AGE7_12\ngeometry\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n50.0000\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ02\n8289\n810.4491\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ03\n8971\n1360.9294\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ04\n2252\n840.4432\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ05\n6136\n1076.7916\n310\nLINESTRING (29501.77 39419….\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNotice that this data.frame include intra-zonal flow.\n\n\n\n3.1 Preparing inter-zonal flow data\nIn general, we will calibrate separate Spatial Interaction Models for inter- and intra-zonal flows. In this hands-on exercise, we will focus our attention on inter-zonal flow. Hence, we need to exclude the intra-zonal flow from flow_data.\nFirst, two new columns called FlowNoIntra and offset will be created by using the code chunk below.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0, flow_data$MORNING_PEAK)\nflow_data$offset &lt;-ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0.000001,1\n)\n\nAccording to the syntax used to derive values in FlowNoIntra field, all intra-zonal flow will be given a value of 0 or else the original flow values will be inserted.\nNext, inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt;0)\n\n\n\n\n\n\n\nNote\n\n\n\n\nbusiness small scale and middle scale industry; retail mainly for shopping purposes.\nchange morning_peak to TRIPS and dist to DIST (because there is a dist function in R)\n\n\n\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  rename(TRIPS= MORNING_PEAK,\n         DIST=dist)\n\nYou are ready to calibrate the Spatial Interaction Models now."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#calibrating-spatial-interaction-models",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#calibrating-spatial-interaction-models",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "4 Calibrating Spatial Interaction Models",
    "text": "4 Calibrating Spatial Interaction Models\nIn this section, we will focus on calibrating an origin constrained SIM and a doubly constrained by using flow_data prepared. They complement what you have learned in Hands-on Exercise 3.\n\n4.1 Origin(Production) constrained SIM\nFigure below shows the general formula of the origin-constrained model.\n\nCode chunk below shows the calibration of the model by using glm() of R and flow_data.\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                        ORIGIN_SZ +\n                        log(SCHOOL_COUNT)+\n                        log(RETAIL_COUNT)+\n                        log(DIST) -1,\n                      family = poisson (link='log'),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(RETAIL_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\n\nFor origin-constrained model, only explanatory variables representing the attractiveness at the destinations will be used.\nAll the explanatory variables including distance will be log transformed.\nORIGIN_SZ is used to model 𝜇𝑖 . It must be in categorical data type.\nIt is important to note that -1 is added in the equation after the distance variable. The -1 serves the purpose of removing the intercept that by default, glm will insert into the model.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNeed to look at log(SCHOOL_COUNT) , log(RETAIL_COUNT), log(DIST), p-value\n\nlog(SCHOOL_COUNT) , log(RETAIL_COUNT) -&gt; attractiveness, need to be positive but if crime rate need to be negative (people dont want to stay near area with high crime rate)\nlog(DIST) -&gt; need to be negative(inverse distance), meaning that the closer the distance, people are more willing to go\np-value &lt; 0.0.5 -&gt; if not &lt;0.05 need to recalibrate the model, remove the variables\n\n\n\n\n\n4.2 Goodness-of-Fit\nIn statistical modelling, the next question we would like to answer is how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\nIn order to provide answer to this question, R-squared statistics will be used. However, R-squared is not an output of glm(). Hence we will write a function called CalcRSquared by using the code chunk below.\n\nCalcRSquared &lt;- function (observed, estimated){\n  r&lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNow, we can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 44% of the variation of flows in the systems. Not bad, but not brilliant either.\nWe can use the performance to get the Root Mean Square Error with the below chunk code.\n\nperformance_rmse(orcSIM_Poisson, normalized= FALSE)\n\n[1] 2613.236\n\n\n\n\n4.3 Doubly Constrained model\nIn this section, we will fit a doubly constrained SIM by using the general formula shown below:\n\nand the code chunk used is shown below.\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ+\n                        DESTIN_SZ+\n                        log(DIST),\n                      family = poisson(link='log'),\n                      data= inter_zonal_flow,\n                      na.action= na.exclude\n                      )\ndbcSIM_Poisson\n\n\nCall:  glm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n    (Intercept)  ORIGIN_SZAMSZ02  ORIGIN_SZAMSZ03  ORIGIN_SZAMSZ04  \n     21.8312374        0.5263502        0.3139982       -0.2146257  \nORIGIN_SZAMSZ05  ORIGIN_SZAMSZ06  ORIGIN_SZAMSZ07  ORIGIN_SZAMSZ08  \n     -0.1890446        0.1539201       -0.9826565       -0.4488417  \nORIGIN_SZAMSZ09  ORIGIN_SZAMSZ10  ORIGIN_SZAMSZ11  ORIGIN_SZAMSZ12  \n      0.0713474        0.4313742       -1.4712226       -1.7250733  \nORIGIN_SZBDSZ01  ORIGIN_SZBDSZ02  ORIGIN_SZBDSZ03  ORIGIN_SZBDSZ04  \n      0.8810576        0.1100240        0.3606166        1.4624347  \nORIGIN_SZBDSZ05  ORIGIN_SZBDSZ06  ORIGIN_SZBDSZ07  ORIGIN_SZBDSZ08  \n      0.6207557        0.6712973       -1.2338669       -1.0444562  \nORIGIN_SZBKSZ01  ORIGIN_SZBKSZ02  ORIGIN_SZBKSZ03  ORIGIN_SZBKSZ04  \n     -0.2838426        0.5550522        0.7396640       -0.2242451  \nORIGIN_SZBKSZ05  ORIGIN_SZBKSZ06  ORIGIN_SZBKSZ07  ORIGIN_SZBKSZ08  \n     -0.2371614       -0.1413812        0.7089989       -0.0907065  \nORIGIN_SZBKSZ09  ORIGIN_SZBLSZ01  ORIGIN_SZBLSZ02  ORIGIN_SZBLSZ03  \n     -0.1775146       -2.3684539       -2.8078475       -3.3122763  \nORIGIN_SZBLSZ04  ORIGIN_SZBMSZ01  ORIGIN_SZBMSZ02  ORIGIN_SZBMSZ03  \n     -2.6770542        0.0618035       -1.3535767       -0.7569095  \nORIGIN_SZBMSZ04  ORIGIN_SZBMSZ05  ORIGIN_SZBMSZ06  ORIGIN_SZBMSZ07  \n     -0.2949304       -2.6131992       -3.0315024       -0.6962524  \nORIGIN_SZBMSZ08  ORIGIN_SZBMSZ09  ORIGIN_SZBMSZ10  ORIGIN_SZBMSZ11  \n     -0.9310730       -1.2911253       -1.6687004       -1.1152794  \nORIGIN_SZBMSZ12  ORIGIN_SZBMSZ13  ORIGIN_SZBMSZ14  ORIGIN_SZBMSZ15  \n     -1.5323954       -0.6267376       -1.0475467       -0.5049444  \nORIGIN_SZBMSZ16  ORIGIN_SZBMSZ17  ORIGIN_SZBPSZ01  ORIGIN_SZBPSZ02  \n     -1.5282897       -1.5722349        0.5814175        0.0875442  \nORIGIN_SZBPSZ03  ORIGIN_SZBPSZ04  ORIGIN_SZBPSZ05  ORIGIN_SZBPSZ06  \n      0.3358227        0.6507586        0.9502124       -1.0480314  \nORIGIN_SZBPSZ07  ORIGIN_SZBSSZ01  ORIGIN_SZBSSZ02  ORIGIN_SZBSSZ03  \n     -0.5467931        0.2998334        0.2841036       -0.2331505  \nORIGIN_SZBTSZ01  ORIGIN_SZBTSZ02  ORIGIN_SZBTSZ03  ORIGIN_SZBTSZ04  \n      0.0987284       -0.6261229       -0.4326963       -1.4998668  \nORIGIN_SZBTSZ05  ORIGIN_SZBTSZ06  ORIGIN_SZBTSZ07  ORIGIN_SZBTSZ08  \n     -0.9564768       -1.2853131       -2.3870991       -1.3715855  \nORIGIN_SZCBSZ01  ORIGIN_SZCCSZ01  ORIGIN_SZCHSZ01  ORIGIN_SZCHSZ02  \n     -3.5940232       -0.7008220       -0.9109524       -0.8566547  \nORIGIN_SZCHSZ03  ORIGIN_SZCKSZ01  ORIGIN_SZCKSZ02  ORIGIN_SZCKSZ03  \n      1.1153731        0.3001815        0.7185711        1.1389824  \nORIGIN_SZCKSZ04  ORIGIN_SZCKSZ05  ORIGIN_SZCKSZ06  ORIGIN_SZCLSZ01  \n      1.6281772        0.8338470        0.6528993       -0.7174758  \nORIGIN_SZCLSZ02  ORIGIN_SZCLSZ03  ORIGIN_SZCLSZ04  ORIGIN_SZCLSZ05  \n     -1.7513100       -1.0362873        0.6160017       -2.1005122  \nORIGIN_SZCLSZ06  ORIGIN_SZCLSZ07  ORIGIN_SZCLSZ08  ORIGIN_SZCLSZ09  \n      0.7252108       -0.5343482       -0.2153408       -1.8019961  \nORIGIN_SZDTSZ02  ORIGIN_SZDTSZ03  ORIGIN_SZDTSZ13  ORIGIN_SZGLSZ01  \n     -3.9057711       -3.4152419       -3.0183438       -1.7812384  \nORIGIN_SZGLSZ02  ORIGIN_SZGLSZ03  ORIGIN_SZGLSZ04  ORIGIN_SZGLSZ05  \n     -0.1074991       -0.2461106        0.8657186        0.5871393  \nORIGIN_SZHGSZ01  ORIGIN_SZHGSZ02  ORIGIN_SZHGSZ03  ORIGIN_SZHGSZ04  \n      0.3543819        0.4218178        0.2411309        0.8180622  \nORIGIN_SZHGSZ05  ORIGIN_SZHGSZ06  ORIGIN_SZHGSZ07  ORIGIN_SZHGSZ08  \n      1.2173687       -0.1826300        0.3172839       -0.1151369  \nORIGIN_SZHGSZ09  ORIGIN_SZHGSZ10  ORIGIN_SZJESZ01  ORIGIN_SZJESZ02  \n     -1.2873441       -3.3783178        0.4859234        0.1766088  \nORIGIN_SZJESZ03  ORIGIN_SZJESZ04  ORIGIN_SZJESZ05  ORIGIN_SZJESZ06  \n     -0.2177441       -1.5532182       -2.3332926        0.3007382  \nORIGIN_SZJESZ07  ORIGIN_SZJESZ08  ORIGIN_SZJESZ09  ORIGIN_SZJESZ10  \n     -1.9687994       -1.3032070        0.5762635       -1.4423113  \nORIGIN_SZJESZ11  ORIGIN_SZJWSZ01  ORIGIN_SZJWSZ02  ORIGIN_SZJWSZ03  \n     -1.9720897        0.3808627        0.7963999        1.5429636  \nORIGIN_SZJWSZ04  ORIGIN_SZJWSZ05  ORIGIN_SZJWSZ06  ORIGIN_SZJWSZ07  \n      0.6410760       -2.1571049       -1.5174532       -2.7089963  \nORIGIN_SZJWSZ08  ORIGIN_SZJWSZ09  ORIGIN_SZKLSZ01  ORIGIN_SZKLSZ02  \n      1.5343415        1.8837410        0.1081286       -0.8844695  \nORIGIN_SZKLSZ03  ORIGIN_SZKLSZ04  ORIGIN_SZKLSZ05  ORIGIN_SZKLSZ06  \n     -0.6872640       -2.2090319       -1.1728726       -6.1162315  \nORIGIN_SZKLSZ07  ORIGIN_SZKLSZ08  ORIGIN_SZLKSZ01  ORIGIN_SZMDSZ01  \n     -1.4082749       -1.7781551       -2.0531568       -0.8825639  \nORIGIN_SZMDSZ02  ORIGIN_SZMDSZ03  ORIGIN_SZMPSZ01  ORIGIN_SZMPSZ02  \n     -0.6219993       -2.0840156       -0.9659093       -1.0411153  \nORIGIN_SZMPSZ03  ORIGIN_SZMUSZ02  ORIGIN_SZNTSZ01  ORIGIN_SZNTSZ02  \n      0.0001659       -3.7599031       -3.0388366       -3.4230640  \nORIGIN_SZNTSZ03  ORIGIN_SZNTSZ05  ORIGIN_SZNTSZ06  ORIGIN_SZNVSZ01  \n     -0.9094796       -4.0861681       -3.9497128        0.3235636  \nORIGIN_SZNVSZ02  ORIGIN_SZNVSZ03  ORIGIN_SZNVSZ04  ORIGIN_SZNVSZ05  \n     -0.6946748       -1.0540196       -0.9897977       -2.2578432  \nORIGIN_SZPGSZ01  ORIGIN_SZPGSZ02  ORIGIN_SZPGSZ03  ORIGIN_SZPGSZ04  \n      0.2399827       -0.3352342        0.9515148        1.3998952  \nORIGIN_SZPGSZ05  ORIGIN_SZPLSZ01  ORIGIN_SZPLSZ02  ORIGIN_SZPLSZ03  \n      0.4451629       -0.9705918       -1.0670151       -2.1229124  \nORIGIN_SZPLSZ04  ORIGIN_SZPLSZ05  ORIGIN_SZPNSZ01  ORIGIN_SZPNSZ02  \n     -3.0911932       -2.1705708        0.9052637       -0.1720425  \nORIGIN_SZPNSZ03  ORIGIN_SZPNSZ04  ORIGIN_SZPNSZ05  ORIGIN_SZPRSZ01  \n     -2.3973459       -3.4483689       -2.0588530       -0.6399015  \nORIGIN_SZPRSZ02  ORIGIN_SZPRSZ03  ORIGIN_SZPRSZ04  ORIGIN_SZPRSZ05  \n      0.8122270        0.3990960       -0.8485348        0.8008791  \nORIGIN_SZPRSZ06  ORIGIN_SZPRSZ07  ORIGIN_SZPRSZ08  ORIGIN_SZQTSZ01  \n     -1.4498806       -3.2025045       -0.5862269       -0.1859270  \nORIGIN_SZQTSZ02  ORIGIN_SZQTSZ03  ORIGIN_SZQTSZ04  ORIGIN_SZQTSZ05  \n     -0.8715122       -0.1259816       -1.4620032       -0.6675643  \nORIGIN_SZQTSZ06  ORIGIN_SZQTSZ07  ORIGIN_SZQTSZ08  ORIGIN_SZQTSZ09  \n     -0.8190026       -1.5189403       -0.4976238       -0.9006162  \nORIGIN_SZQTSZ10  ORIGIN_SZQTSZ11  ORIGIN_SZQTSZ12  ORIGIN_SZQTSZ13  \n     -0.6690184       -2.5203437       -3.0461675       -0.7501068  \nORIGIN_SZQTSZ14  ORIGIN_SZQTSZ15  ORIGIN_SZRCSZ01  ORIGIN_SZRCSZ06  \n     -1.9321849       -0.9576828       -1.8167951       -0.5560563  \nORIGIN_SZRVSZ01  ORIGIN_SZRVSZ02  ORIGIN_SZRVSZ03  ORIGIN_SZRVSZ04  \n     -2.8862570       -3.1555662       -2.9836089       -3.5520422  \nORIGIN_SZRVSZ05  ORIGIN_SZSBSZ01  ORIGIN_SZSBSZ02  ORIGIN_SZSBSZ03  \n     -2.5866584        0.2867444       -0.9012334        0.8311038  \nORIGIN_SZSBSZ04  ORIGIN_SZSBSZ05  ORIGIN_SZSBSZ06  ORIGIN_SZSBSZ07  \n      0.4044170       -0.2661845       -0.9023075        0.0505870  \nORIGIN_SZSBSZ08  ORIGIN_SZSBSZ09  ORIGIN_SZSESZ02  ORIGIN_SZSESZ03  \n     -1.1158011       -0.9682835        1.1452735        1.2815277  \nORIGIN_SZSESZ04  ORIGIN_SZSESZ05  ORIGIN_SZSESZ06  ORIGIN_SZSESZ07  \n      0.8085857       -0.2329413        1.0576879       -2.3165908  \nORIGIN_SZSGSZ01  ORIGIN_SZSGSZ02  ORIGIN_SZSGSZ03  ORIGIN_SZSGSZ04  \n     -0.6606350       -1.3638984        0.1152591        0.2954067  \nORIGIN_SZSGSZ05  ORIGIN_SZSGSZ06  ORIGIN_SZSGSZ07  ORIGIN_SZSKSZ01  \n     -2.0792678        0.4563227       -0.8955254       -0.3184402  \nORIGIN_SZSKSZ02  ORIGIN_SZSKSZ03  ORIGIN_SZSKSZ04  ORIGIN_SZSKSZ05  \n      1.1160484       -0.2566692       -1.5781827       -0.2724361  \nORIGIN_SZSLSZ01  ORIGIN_SZSLSZ04  ORIGIN_SZSRSZ01  ORIGIN_SZTHSZ01  \n     -2.4458625       -0.0987076       -2.2584977       -2.5878524  \nORIGIN_SZTHSZ03  ORIGIN_SZTHSZ04  ORIGIN_SZTHSZ06  ORIGIN_SZTMSZ01  \n     -0.8101746       -2.4186655       -1.7080541       -0.2193476  \nORIGIN_SZTMSZ02  ORIGIN_SZTMSZ03  ORIGIN_SZTMSZ04  ORIGIN_SZTMSZ05  \n      1.7772464        1.0051343        0.1642370       -1.2878706  \nORIGIN_SZTNSZ01  ORIGIN_SZTNSZ02  ORIGIN_SZTNSZ03  ORIGIN_SZTNSZ04  \n     -1.7163504       -1.6508988       -2.1545577       -0.3949120  \nORIGIN_SZTPSZ01  ORIGIN_SZTPSZ02  ORIGIN_SZTPSZ03  ORIGIN_SZTPSZ04  \n     -0.8058100        0.5369060       -0.7779333       -0.8153581  \nORIGIN_SZTPSZ05  ORIGIN_SZTPSZ06  ORIGIN_SZTPSZ07  ORIGIN_SZTPSZ08  \n     -0.5073676        0.0847301       -0.5839519       -1.0577941  \nORIGIN_SZTPSZ09  ORIGIN_SZTPSZ10  ORIGIN_SZTPSZ11  ORIGIN_SZTPSZ12  \n     -0.9067707       -1.1362091       -0.2374621       -0.8028874  \nORIGIN_SZTSSZ01  ORIGIN_SZTSSZ02  ORIGIN_SZTSSZ03  ORIGIN_SZTSSZ04  \n     -2.7809271        0.0425804        0.1142369       -0.6186261  \nORIGIN_SZTSSZ05  ORIGIN_SZTSSZ06  ORIGIN_SZWCSZ01  ORIGIN_SZWCSZ02  \n     -1.0846732        0.3980173        1.3545143       -2.9863278  \nORIGIN_SZWCSZ03  ORIGIN_SZWDSZ01  ORIGIN_SZWDSZ02  ORIGIN_SZWDSZ03  \n     -5.0504916        1.5238429        0.2832576        1.3702524  \nORIGIN_SZWDSZ04  ORIGIN_SZWDSZ05  ORIGIN_SZWDSZ06  ORIGIN_SZWDSZ07  \n      1.0248225        0.2356778        0.3146925       -1.4971897  \nORIGIN_SZWDSZ08  ORIGIN_SZWDSZ09  ORIGIN_SZYSSZ01  ORIGIN_SZYSSZ02  \n     -0.8894079        1.4437633       -0.2519398        0.8726785  \nORIGIN_SZYSSZ03  ORIGIN_SZYSSZ04  ORIGIN_SZYSSZ05  ORIGIN_SZYSSZ06  \n      1.7868139        0.8418040        0.4292096       -0.7459961  \nORIGIN_SZYSSZ07  ORIGIN_SZYSSZ08  ORIGIN_SZYSSZ09  DESTIN_SZAMSZ02  \n     -0.8422281        0.1829428        1.1159712        0.0694567  \nDESTIN_SZAMSZ03  DESTIN_SZAMSZ04  DESTIN_SZAMSZ05  DESTIN_SZAMSZ06  \n      0.0760100       -1.1306391       -1.0751133       -0.9624298  \nDESTIN_SZAMSZ07  DESTIN_SZAMSZ08  DESTIN_SZAMSZ09  DESTIN_SZAMSZ10  \n     -1.5060319       -0.4813202       -1.0220675        0.1235142  \nDESTIN_SZAMSZ11  DESTIN_SZAMSZ12  DESTIN_SZBDSZ01  DESTIN_SZBDSZ02  \n     -0.8917993        0.0195208        0.9736349       -0.1969470  \nDESTIN_SZBDSZ03  DESTIN_SZBDSZ04  DESTIN_SZBDSZ05  DESTIN_SZBDSZ06  \n      0.1266471        1.1608485        0.9293840        0.4090567  \nDESTIN_SZBDSZ07  DESTIN_SZBDSZ08  DESTIN_SZBKSZ01  DESTIN_SZBKSZ02  \n     -0.8171478       -1.5895287       -1.3793311       -0.5253670  \nDESTIN_SZBKSZ03  DESTIN_SZBKSZ04  DESTIN_SZBKSZ05  DESTIN_SZBKSZ06  \n     -1.0095362       -0.5662858       -0.9406607       -1.3129276  \nDESTIN_SZBKSZ07  DESTIN_SZBKSZ08  DESTIN_SZBKSZ09  DESTIN_SZBLSZ01  \n      0.0120605       -1.3658471       -0.1771310       -0.8175223  \nDESTIN_SZBLSZ02  DESTIN_SZBLSZ03  DESTIN_SZBLSZ04  DESTIN_SZBMSZ01  \n      0.1631280        1.2598494       -0.5642975        0.6921844  \nDESTIN_SZBMSZ02  DESTIN_SZBMSZ03  DESTIN_SZBMSZ04  DESTIN_SZBMSZ05  \n     -0.1209392       -0.2373881       -0.0407117       -0.2363309  \nDESTIN_SZBMSZ06  DESTIN_SZBMSZ07  DESTIN_SZBMSZ08  DESTIN_SZBMSZ09  \n     -1.1930710        0.4625103       -0.8604731       -2.1290239  \nDESTIN_SZBMSZ10  DESTIN_SZBMSZ11  DESTIN_SZBMSZ12  DESTIN_SZBMSZ13  \n     -1.4617153       -1.3234050       -0.8399230        0.1366529  \nDESTIN_SZBMSZ14  DESTIN_SZBMSZ15  DESTIN_SZBMSZ16  DESTIN_SZBMSZ17  \n     -1.0491968       -0.6726684       -1.4011734       -1.5682752  \nDESTIN_SZBPSZ01  DESTIN_SZBPSZ02  DESTIN_SZBPSZ03  DESTIN_SZBPSZ04  \n     -1.1120017       -2.0833466       -1.6937265       -0.7964999  \nDESTIN_SZBPSZ05  DESTIN_SZBPSZ06  DESTIN_SZBPSZ07  DESTIN_SZBSSZ01  \n      0.2109118       -1.1808365       -0.2077428        0.3164175  \nDESTIN_SZBSSZ02  DESTIN_SZBSSZ03  DESTIN_SZBTSZ01  DESTIN_SZBTSZ02  \n     -0.4852688        0.4130432        0.6215095       -0.0145076  \nDESTIN_SZBTSZ03  DESTIN_SZBTSZ04  DESTIN_SZBTSZ05  DESTIN_SZBTSZ06  \n      0.4919981       -0.6957555        0.3329814       -0.1333295  \nDESTIN_SZBTSZ07  DESTIN_SZBTSZ08  DESTIN_SZCBSZ01  DESTIN_SZCCSZ01  \n     -1.4449581       -0.7079056       -5.7344725       -0.0009541  \nDESTIN_SZCHSZ01  DESTIN_SZCHSZ02  DESTIN_SZCHSZ03  DESTIN_SZCKSZ01  \n     -0.2083016        0.5369606        2.5530638       -0.5725975  \nDESTIN_SZCKSZ02  DESTIN_SZCKSZ03  DESTIN_SZCKSZ04  DESTIN_SZCKSZ05  \n     -1.1181852        0.1156680       -0.8647725       -1.1641791  \nDESTIN_SZCKSZ06  DESTIN_SZCLSZ01  DESTIN_SZCLSZ02  DESTIN_SZCLSZ03  \n     -0.4397612        0.1930552       -2.0436501       -0.9338571  \nDESTIN_SZCLSZ04  DESTIN_SZCLSZ05  DESTIN_SZCLSZ06  DESTIN_SZCLSZ07  \n      0.0532041       -1.0782781        0.4068171       -0.3579507  \nDESTIN_SZCLSZ08  DESTIN_SZCLSZ09  DESTIN_SZDTSZ02  DESTIN_SZDTSZ03  \n     -0.2487993        0.1611080       -1.7308348       -0.5994253  \nDESTIN_SZDTSZ13  DESTIN_SZGLSZ01  DESTIN_SZGLSZ02  DESTIN_SZGLSZ03  \n     -1.3685031       -0.0910001       -0.0692224        0.6493421  \nDESTIN_SZGLSZ04  DESTIN_SZGLSZ05  DESTIN_SZHGSZ01  DESTIN_SZHGSZ02  \n      0.9327947        0.8161728        0.0658625       -0.8134329  \nDESTIN_SZHGSZ03  DESTIN_SZHGSZ04  DESTIN_SZHGSZ05  DESTIN_SZHGSZ06  \n     -1.3546132       -0.4500588       -0.5026431       -0.8673686  \nDESTIN_SZHGSZ07  DESTIN_SZHGSZ08  DESTIN_SZHGSZ09  DESTIN_SZHGSZ10  \n      0.0560490       -0.0443189       -0.0126355       -3.5821793  \nDESTIN_SZJESZ01  DESTIN_SZJESZ02  DESTIN_SZJESZ03  DESTIN_SZJESZ04  \n     -0.3704281       -0.7369159       -0.8985484       -1.0511995  \nDESTIN_SZJESZ05  DESTIN_SZJESZ06  DESTIN_SZJESZ07  DESTIN_SZJESZ08  \n     -1.5324974        0.3105267       -1.3234483       -0.6559742  \nDESTIN_SZJESZ09  DESTIN_SZJESZ10  DESTIN_SZJESZ11  DESTIN_SZJWSZ01  \n      0.2663752        0.8529026        0.5559641       -0.9790971  \nDESTIN_SZJWSZ02  DESTIN_SZJWSZ03  DESTIN_SZJWSZ04  DESTIN_SZJWSZ05  \n     -0.8746590        0.5689062        0.4520963       -1.0249671  \nDESTIN_SZJWSZ06  DESTIN_SZJWSZ07  DESTIN_SZJWSZ08  DESTIN_SZJWSZ09  \n     -0.7451483       -2.8453099       -0.3372309        1.0505330  \nDESTIN_SZKLSZ01  DESTIN_SZKLSZ02  DESTIN_SZKLSZ03  DESTIN_SZKLSZ04  \n     -0.2334836       -0.5416148       -0.8026495       -1.2918594  \nDESTIN_SZKLSZ05  DESTIN_SZKLSZ06  DESTIN_SZKLSZ07  DESTIN_SZKLSZ08  \n     -0.4069101       -2.5333101       -0.6623343       -0.1408205  \nDESTIN_SZLKSZ01  DESTIN_SZMDSZ01  DESTIN_SZMDSZ02  DESTIN_SZMDSZ03  \n     -1.2639235       -1.5655800       -0.9767682       -3.3328109  \nDESTIN_SZMPSZ01  DESTIN_SZMPSZ02  DESTIN_SZMPSZ03  DESTIN_SZMUSZ02  \n     -0.4552859       -0.5386560        0.4952000       -1.4434175  \nDESTIN_SZNTSZ01  DESTIN_SZNTSZ02  DESTIN_SZNTSZ03  DESTIN_SZNTSZ05  \n     -2.9194067       -1.3780179       -0.5044699       -2.0017134  \nDESTIN_SZNTSZ06  DESTIN_SZNVSZ01  DESTIN_SZNVSZ02  DESTIN_SZNVSZ03  \n     -3.8120537       -0.1071506       -0.0274710        0.1076352  \nDESTIN_SZNVSZ04  DESTIN_SZNVSZ05  DESTIN_SZPGSZ01  DESTIN_SZPGSZ02  \n     -1.2087250       -1.0058290       -1.2029931       -1.2878671  \nDESTIN_SZPGSZ03  DESTIN_SZPGSZ04  DESTIN_SZPGSZ05  DESTIN_SZPLSZ01  \n     -0.1520894       -0.1985959       -1.5290983       -0.3567934  \nDESTIN_SZPLSZ02  DESTIN_SZPLSZ03  DESTIN_SZPLSZ04  DESTIN_SZPLSZ05  \n     -1.7114351       -0.3241427       -1.7117196       -0.5086379  \nDESTIN_SZPNSZ01  DESTIN_SZPNSZ02  DESTIN_SZPNSZ03  DESTIN_SZPNSZ04  \n      0.2026781        0.8313754       -0.4041254        1.5814539  \nDESTIN_SZPNSZ05  DESTIN_SZPRSZ01  DESTIN_SZPRSZ02  DESTIN_SZPRSZ03  \n      1.1823430       -1.1057553        0.0895099        0.6921925  \nDESTIN_SZPRSZ04  DESTIN_SZPRSZ05  DESTIN_SZPRSZ06  DESTIN_SZPRSZ07  \n     -0.2848336        0.1744480        0.4279206       -1.5123108  \nDESTIN_SZPRSZ08  DESTIN_SZQTSZ01  DESTIN_SZQTSZ02  DESTIN_SZQTSZ03  \n     -0.5650226       -0.5952360       -0.7728170       -0.5066812  \nDESTIN_SZQTSZ04  DESTIN_SZQTSZ05  DESTIN_SZQTSZ06  DESTIN_SZQTSZ07  \n     -0.6398414       -0.4354527       -0.6597391       -0.9392696  \nDESTIN_SZQTSZ08  DESTIN_SZQTSZ09  DESTIN_SZQTSZ10  DESTIN_SZQTSZ11  \n      0.4617774       -0.3174497        0.1993449        0.2551535  \nDESTIN_SZQTSZ12  DESTIN_SZQTSZ13  DESTIN_SZQTSZ14  DESTIN_SZQTSZ15  \n     -0.1662603        0.5500978        0.5364435        1.3611043  \nDESTIN_SZRCSZ01  DESTIN_SZRCSZ06  DESTIN_SZRVSZ01  DESTIN_SZRVSZ02  \n     -0.1034049       -1.0633902       -1.5486221       -2.4092611  \nDESTIN_SZRVSZ03  DESTIN_SZRVSZ04  DESTIN_SZRVSZ05  DESTIN_SZSBSZ01  \n     -1.5172079       -1.1663615       -2.2404292       -1.3783780  \nDESTIN_SZSBSZ02  DESTIN_SZSBSZ03  DESTIN_SZSBSZ04  DESTIN_SZSBSZ05  \n     -1.4445213        0.5149906        0.2389086       -1.2737442  \nDESTIN_SZSBSZ06  DESTIN_SZSBSZ07  DESTIN_SZSBSZ08  DESTIN_SZSBSZ09  \n     -1.8683520       -0.5993154        0.8156302        0.0900611  \nDESTIN_SZSESZ02  DESTIN_SZSESZ03  DESTIN_SZSESZ04  DESTIN_SZSESZ05  \n     -0.6397704        0.1714103       -1.0596175       -0.8071891  \nDESTIN_SZSESZ06  DESTIN_SZSESZ07  DESTIN_SZSGSZ01  DESTIN_SZSGSZ02  \n     -0.5580934       -3.1448863       -0.1795225       -0.2986570  \nDESTIN_SZSGSZ03  DESTIN_SZSGSZ04  DESTIN_SZSGSZ05  DESTIN_SZSGSZ06  \n     -0.4074671       -0.1505164       -1.9908372        0.6715268  \nDESTIN_SZSGSZ07  DESTIN_SZSISZ01  DESTIN_SZSKSZ01  DESTIN_SZSKSZ02  \n     -0.4494757       -0.5517983       -0.4749154        0.9400302  \nDESTIN_SZSKSZ03  DESTIN_SZSKSZ04  DESTIN_SZSKSZ05  DESTIN_SZSLSZ01  \n     -0.2800377       -1.2570212       -0.2600474       -0.7775604  \nDESTIN_SZSLSZ04  DESTIN_SZSRSZ01  DESTIN_SZTHSZ01  DESTIN_SZTHSZ03  \n     -0.8586515       -1.1370887       -4.3259988       -2.6632914  \nDESTIN_SZTHSZ04  DESTIN_SZTHSZ06  DESTIN_SZTMSZ01  DESTIN_SZTMSZ02  \n     -3.1000906       -2.5952642       -0.2092828        1.8238139  \nDESTIN_SZTMSZ03  DESTIN_SZTMSZ04  DESTIN_SZTMSZ05  DESTIN_SZTNSZ01  \n      0.8518259        1.0222812        0.6323777       -0.3336078  \nDESTIN_SZTNSZ02  DESTIN_SZTNSZ03  DESTIN_SZTNSZ04  DESTIN_SZTPSZ01  \n     -1.0820469       -1.4186505       -0.3058199       -0.4872299  \nDESTIN_SZTPSZ02  DESTIN_SZTPSZ03  DESTIN_SZTPSZ04  DESTIN_SZTPSZ05  \n      0.7158441       -0.4314229       -1.5898245       -1.0445550  \nDESTIN_SZTPSZ06  DESTIN_SZTPSZ07  DESTIN_SZTPSZ08  DESTIN_SZTPSZ09  \n     -0.4319582       -2.1602303       -1.1920493       -0.2022481  \nDESTIN_SZTPSZ10  DESTIN_SZTPSZ11  DESTIN_SZTPSZ12  DESTIN_SZTSSZ01  \n     -1.2464793       -0.0808445       -0.6784376       -1.5845062  \nDESTIN_SZTSSZ02  DESTIN_SZTSSZ03  DESTIN_SZTSSZ04  DESTIN_SZTSSZ05  \n     -0.1886010        0.6525526        0.5285464        1.4670106  \nDESTIN_SZTSSZ06  DESTIN_SZWCSZ01  DESTIN_SZWCSZ02  DESTIN_SZWCSZ03  \n      2.5043588        1.9787931       -2.2593108       -3.1897655  \nDESTIN_SZWDSZ01  DESTIN_SZWDSZ02  DESTIN_SZWDSZ03  DESTIN_SZWDSZ04  \n      1.0476108       -1.3176990        0.3432057       -0.7895927  \nDESTIN_SZWDSZ05  DESTIN_SZWDSZ06  DESTIN_SZWDSZ07  DESTIN_SZWDSZ08  \n     -0.8751665       -0.2106221       -1.6050834       -0.5124717  \nDESTIN_SZWDSZ09  DESTIN_SZYSSZ01  DESTIN_SZYSSZ02  DESTIN_SZYSSZ03  \n      0.3813542        0.0853753       -0.3227172       -0.4151283  \nDESTIN_SZYSSZ04  DESTIN_SZYSSZ05  DESTIN_SZYSSZ06  DESTIN_SZYSSZ07  \n     -0.4637327       -1.5888242       -1.4606209       -0.7839065  \nDESTIN_SZYSSZ08  DESTIN_SZYSSZ09        log(DIST)  \n      0.6265412        0.1520067       -1.8468315  \n\nDegrees of Freedom: 14470 Total (i.e. Null);  13912 Residual\nNull Deviance:      47090000 \nResidual Deviance: 10420000     AIC: 10510000\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to note that there is a slight change of the code chunk. I have removed the -1 which means that an intercept will appear in the model again. This is not because I want an intercept as it makes the origin and destination coefficients harder to interpret, rather the -1 cheat for removing the intercept only works with one factor level but in double-constrained model we have two factor levels, namely: origins and destinations.\n\n\n\nCalcRSquared(dbcSIM_Poisson$data$TRIPS,\n             dbcSIM_Poisson$fitted.values)\n\n[1] 0.7001882\n\n\nNotice that there is a relatively greater improvement in the R-Squared value."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#model-comparison",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4a.html#model-comparison",
    "title": "In-class_Ex4: Calibrating Spatial Interaction Models with R",
    "section": "5 Model comparison",
    "text": "5 Model comparison\n\n5.1 Statistical measures\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chunk below.\n\nmodel_list &lt;- list(originConstrained=orcSIM_Poisson, doublyConstrained=dbcSIM_Poisson)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list, metrics=\"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\noriginConstrained |   glm | 2613.236\ndoublyConstrained |   glm | 1906.694\n\n\nThe print above reveals that doubly constrained SIM is the best model among the two SIMs because it has the smallest RMSE value of 1906.694.\n\n\n\n\n\n\nNote\n\n\n\n\nsmaller RMSE -&gt; better model\nif there is an outlier, try to remove and compare with current model.\n\n\n\n\n\n5.2 Visualising fitted values\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from Origin-constrained Model by using the code chunk below.\n\ndf &lt;- as.data.frame(orcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will append the fitted values into inter_zonal_flow data frame by using the code chunk below.\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM_Poisson.fitted.values\")\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that rename() is used to rename the field name and the $ in the original field name has been replaced with an .. This is because R replaced $ with . during the cbind().\n\n\nWe will also do the same step for doubly constrained model\n\ndf &lt;- as.data.frame(dbcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will append the fitted values into inter_zonal_flow data frame by using the code chunk below.\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM_Poisson.fitted.values\")\n\nNext, two scatterplots will be created by using geom_point() and other appropriate functions of ggplot2 package.\n\norc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\ndbc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\nggarrange(orc_p, dbc_p,\n          ncol = 2,\n          nrow = 1)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html",
    "title": "In-class_Ex4: SIMs",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on the following tasks:\n\nperforming geocoding using data downloaded from data.gov.sg\ncalibrating Geographically Weighted Poisson Regression"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#overview",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#overview",
    "title": "In-class_Ex4: SIMs",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on the following tasks:\n\nperforming geocoding using data downloaded from data.gov.sg\ncalibrating Geographically Weighted Poisson Regression"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#getting-started",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#getting-started",
    "title": "In-class_Ex4: SIMs",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\npacman::p_load(tidyverse, sf, httr, tmap)\n\nNotes: httr allows us to work with html (to communicate with web server."
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#geocoding-using-sla-api",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#geocoding-using-sla-api",
    "title": "In-class_Ex4: SIMs",
    "section": "3 Geocoding using SLA API",
    "text": "3 Geocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports online geocoding service called OneMap API.\n\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$'postal_code'\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes){\n  query &lt;- list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;-GET(url, query=query)\n  \n  if((content(res)$found)!=0){\n    found &lt;-rbind(found, data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nNotes:\n#| eval: false -&gt; run 1 time only\n#| echo: false -&gt; the code wont be shown on html page\n#| message: false -&gt; the message will not come up\n\nmerged = merge(csv, found, by.x='postal_code', by.y='results.POSTAL', all=TRUE)\nwrite.csv (merged, file='data/aspatial/schools.csv')\nwrite.csv (not_found, file ='data/aspatial/not_found.csv')"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#converting-an-aspatial-data-into-a-simple-feature-tibble-data.frame",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#converting-an-aspatial-data-into-a-simple-feature-tibble-data.frame",
    "title": "In-class_Ex4: SIMs",
    "section": "4 Converting an aspatial data into a simple feature tibble data.frame",
    "text": "4 Converting an aspatial data into a simple feature tibble data.frame\n\n4.1 Importing and tidying schools data\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\")%&gt;%\n  rename(latitude='results.LATITUDE', longitude='results.LONGITUDE')%&gt;%\n  select(postal_code, school_name, latitude,longitude)\n\n\n\n4.2 Converting an aspatial data into sf tibble data.frame\n\nschools_sf &lt;- st_as_sf(schools, \n                       coords=c('longitude', 'latitude'),\n                       crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\n\n4.3 Plotting a point simple feature layer\n\ntmap_mode(\"view\")\ntm_shape(schools_sf)+\n  tm_dots()+\ntm_view(set.zoom.limits =c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#preparing",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#preparing",
    "title": "In-class_Ex4: SIMs",
    "section": "5 Preparing",
    "text": "5 Preparing\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\")%&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz$'SCHOOL_COUNT' &lt;- lengths(st_intersects(mpsz, schools_sf))\n\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\n\nbusiness_sf &lt;- st_read(dsn=\"data/geospatial\", layer=\"Business\")\n\nReading layer `Business' from data source \n  `W:\\widyayutika\\ISSS624\\In-class_Exercise\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_options(check.and.fix=TRUE)\ntm_shape(mpsz)+\n  tm_polygons()+\ntm_shape(business_sf)+\n  tm_dots()\n\n\n\n\n\nmpsz$'BUSINESS_COUNT' &lt;- lengths(st_intersects(mpsz, business_sf))\nsummary(mpsz$BUSINESS_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\n\n#|eval: false\n#flow_data &lt;- flow_data %&gt;%\n#  left_join(mpsz_tidy,\n#            by =c(\"DESTIN_SZ\"=\"SUBZONE_C\"))\n\nNotes: calibrate journey to home : then change to ORIGIN_SZ"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#checking-for-variables-with-zero-values",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#checking-for-variables-with-zero-values",
    "title": "In-class_Ex4: SIMs",
    "section": "6 Checking for variables with zero values",
    "text": "6 Checking for variables with zero values"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#model-calibration",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#model-calibration",
    "title": "In-class_Ex4: SIMs",
    "section": "7 Model Calibration",
    "text": "7 Model Calibration\n\npacman::p_load(tmap, sf, performance, ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#the-data",
    "href": "In-class_Exercise/In-class_Ex4/In-class_Ex4_ori.html#the-data",
    "title": "In-class_Ex4: SIMs",
    "section": "8 The Data",
    "text": "8 The Data\n\nflow_data&lt;-read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nNotes: business small scale and middle scale industry; retail mainly for shopping purposes.\nNotes: change to morning_peak to TRIPS and dist to DIST (because there is a dist function in R)\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0, flow_data$MORNING_PEAK)\nflow_data$offset &lt;-ifelse(\n  flow_data$ORIGIN_SZ==flow_data$DESTIN_SZ,\n  0.000001,1\n)\n\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt;0)\n\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  rename(TRIPS= MORNING_PEAK,\n         DIST=dist)\n\n\n8.1 Origin(Production) constrained SIM\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                        ORIGIN_SZ +\n                        log(SCHOOL_COUNT)+\n                        log(RETAIL_COUNT)+\n                        log(DIST) -1,\n                      family = poisson (link='log'),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(RETAIL_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\nNotes1: The purpose of -1 on log(DIST) is to remove the intercept.\nNotes2: need to look at log(SCHOOL_COUNT) , log(RETAIL_COUNT), log(DIST), p-value\n\nlog(SCHOOL_COUNT) , log(RETAIL_COUNT) -&gt; attractiveness, need to be positive but if crime rate need to be negative (people dont want to stay near area with high crime rate)\n\n\n\nlog(DIST) -&gt; need to be negative(inverse distance), meaning that the closer the distance, people are more willing to go\np-value &lt; 0.0.5 -&gt; if not &lt;0.05 need to recalibrate the model, remove the variables\n\n\n\n8.2 Goodness-of-Fit\n\nCalcRSquared &lt;- function (observed, estimated){\n  r&lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\n\nperformance_rmse(orcSIM_Poisson, normalized= FALSE)\n\n[1] 2613.236\n\n\n\n\n8.3 Doubly Constrained\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ+\n                        DESTIN_SZ+\n                        log(DIST),\n                      family = poisson(link='log'),\n                      data= inter_zonal_flow,\n                      na.action= na.exclude\n                      )\ndbcSIM_Poisson\n\n\nCall:  glm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n    (Intercept)  ORIGIN_SZAMSZ02  ORIGIN_SZAMSZ03  ORIGIN_SZAMSZ04  \n     21.8312374        0.5263502        0.3139982       -0.2146257  \nORIGIN_SZAMSZ05  ORIGIN_SZAMSZ06  ORIGIN_SZAMSZ07  ORIGIN_SZAMSZ08  \n     -0.1890446        0.1539201       -0.9826565       -0.4488417  \nORIGIN_SZAMSZ09  ORIGIN_SZAMSZ10  ORIGIN_SZAMSZ11  ORIGIN_SZAMSZ12  \n      0.0713474        0.4313742       -1.4712226       -1.7250733  \nORIGIN_SZBDSZ01  ORIGIN_SZBDSZ02  ORIGIN_SZBDSZ03  ORIGIN_SZBDSZ04  \n      0.8810576        0.1100240        0.3606166        1.4624347  \nORIGIN_SZBDSZ05  ORIGIN_SZBDSZ06  ORIGIN_SZBDSZ07  ORIGIN_SZBDSZ08  \n      0.6207557        0.6712973       -1.2338669       -1.0444562  \nORIGIN_SZBKSZ01  ORIGIN_SZBKSZ02  ORIGIN_SZBKSZ03  ORIGIN_SZBKSZ04  \n     -0.2838426        0.5550522        0.7396640       -0.2242451  \nORIGIN_SZBKSZ05  ORIGIN_SZBKSZ06  ORIGIN_SZBKSZ07  ORIGIN_SZBKSZ08  \n     -0.2371614       -0.1413812        0.7089989       -0.0907065  \nORIGIN_SZBKSZ09  ORIGIN_SZBLSZ01  ORIGIN_SZBLSZ02  ORIGIN_SZBLSZ03  \n     -0.1775146       -2.3684539       -2.8078475       -3.3122763  \nORIGIN_SZBLSZ04  ORIGIN_SZBMSZ01  ORIGIN_SZBMSZ02  ORIGIN_SZBMSZ03  \n     -2.6770542        0.0618035       -1.3535767       -0.7569095  \nORIGIN_SZBMSZ04  ORIGIN_SZBMSZ05  ORIGIN_SZBMSZ06  ORIGIN_SZBMSZ07  \n     -0.2949304       -2.6131992       -3.0315024       -0.6962524  \nORIGIN_SZBMSZ08  ORIGIN_SZBMSZ09  ORIGIN_SZBMSZ10  ORIGIN_SZBMSZ11  \n     -0.9310730       -1.2911253       -1.6687004       -1.1152794  \nORIGIN_SZBMSZ12  ORIGIN_SZBMSZ13  ORIGIN_SZBMSZ14  ORIGIN_SZBMSZ15  \n     -1.5323954       -0.6267376       -1.0475467       -0.5049444  \nORIGIN_SZBMSZ16  ORIGIN_SZBMSZ17  ORIGIN_SZBPSZ01  ORIGIN_SZBPSZ02  \n     -1.5282897       -1.5722349        0.5814175        0.0875442  \nORIGIN_SZBPSZ03  ORIGIN_SZBPSZ04  ORIGIN_SZBPSZ05  ORIGIN_SZBPSZ06  \n      0.3358227        0.6507586        0.9502124       -1.0480314  \nORIGIN_SZBPSZ07  ORIGIN_SZBSSZ01  ORIGIN_SZBSSZ02  ORIGIN_SZBSSZ03  \n     -0.5467931        0.2998334        0.2841036       -0.2331505  \nORIGIN_SZBTSZ01  ORIGIN_SZBTSZ02  ORIGIN_SZBTSZ03  ORIGIN_SZBTSZ04  \n      0.0987284       -0.6261229       -0.4326963       -1.4998668  \nORIGIN_SZBTSZ05  ORIGIN_SZBTSZ06  ORIGIN_SZBTSZ07  ORIGIN_SZBTSZ08  \n     -0.9564768       -1.2853131       -2.3870991       -1.3715855  \nORIGIN_SZCBSZ01  ORIGIN_SZCCSZ01  ORIGIN_SZCHSZ01  ORIGIN_SZCHSZ02  \n     -3.5940232       -0.7008220       -0.9109524       -0.8566547  \nORIGIN_SZCHSZ03  ORIGIN_SZCKSZ01  ORIGIN_SZCKSZ02  ORIGIN_SZCKSZ03  \n      1.1153731        0.3001815        0.7185711        1.1389824  \nORIGIN_SZCKSZ04  ORIGIN_SZCKSZ05  ORIGIN_SZCKSZ06  ORIGIN_SZCLSZ01  \n      1.6281772        0.8338470        0.6528993       -0.7174758  \nORIGIN_SZCLSZ02  ORIGIN_SZCLSZ03  ORIGIN_SZCLSZ04  ORIGIN_SZCLSZ05  \n     -1.7513100       -1.0362873        0.6160017       -2.1005122  \nORIGIN_SZCLSZ06  ORIGIN_SZCLSZ07  ORIGIN_SZCLSZ08  ORIGIN_SZCLSZ09  \n      0.7252108       -0.5343482       -0.2153408       -1.8019961  \nORIGIN_SZDTSZ02  ORIGIN_SZDTSZ03  ORIGIN_SZDTSZ13  ORIGIN_SZGLSZ01  \n     -3.9057711       -3.4152419       -3.0183438       -1.7812384  \nORIGIN_SZGLSZ02  ORIGIN_SZGLSZ03  ORIGIN_SZGLSZ04  ORIGIN_SZGLSZ05  \n     -0.1074991       -0.2461106        0.8657186        0.5871393  \nORIGIN_SZHGSZ01  ORIGIN_SZHGSZ02  ORIGIN_SZHGSZ03  ORIGIN_SZHGSZ04  \n      0.3543819        0.4218178        0.2411309        0.8180622  \nORIGIN_SZHGSZ05  ORIGIN_SZHGSZ06  ORIGIN_SZHGSZ07  ORIGIN_SZHGSZ08  \n      1.2173687       -0.1826300        0.3172839       -0.1151369  \nORIGIN_SZHGSZ09  ORIGIN_SZHGSZ10  ORIGIN_SZJESZ01  ORIGIN_SZJESZ02  \n     -1.2873441       -3.3783178        0.4859234        0.1766088  \nORIGIN_SZJESZ03  ORIGIN_SZJESZ04  ORIGIN_SZJESZ05  ORIGIN_SZJESZ06  \n     -0.2177441       -1.5532182       -2.3332926        0.3007382  \nORIGIN_SZJESZ07  ORIGIN_SZJESZ08  ORIGIN_SZJESZ09  ORIGIN_SZJESZ10  \n     -1.9687994       -1.3032070        0.5762635       -1.4423113  \nORIGIN_SZJESZ11  ORIGIN_SZJWSZ01  ORIGIN_SZJWSZ02  ORIGIN_SZJWSZ03  \n     -1.9720897        0.3808627        0.7963999        1.5429636  \nORIGIN_SZJWSZ04  ORIGIN_SZJWSZ05  ORIGIN_SZJWSZ06  ORIGIN_SZJWSZ07  \n      0.6410760       -2.1571049       -1.5174532       -2.7089963  \nORIGIN_SZJWSZ08  ORIGIN_SZJWSZ09  ORIGIN_SZKLSZ01  ORIGIN_SZKLSZ02  \n      1.5343415        1.8837410        0.1081286       -0.8844695  \nORIGIN_SZKLSZ03  ORIGIN_SZKLSZ04  ORIGIN_SZKLSZ05  ORIGIN_SZKLSZ06  \n     -0.6872640       -2.2090319       -1.1728726       -6.1162315  \nORIGIN_SZKLSZ07  ORIGIN_SZKLSZ08  ORIGIN_SZLKSZ01  ORIGIN_SZMDSZ01  \n     -1.4082749       -1.7781551       -2.0531568       -0.8825639  \nORIGIN_SZMDSZ02  ORIGIN_SZMDSZ03  ORIGIN_SZMPSZ01  ORIGIN_SZMPSZ02  \n     -0.6219993       -2.0840156       -0.9659093       -1.0411153  \nORIGIN_SZMPSZ03  ORIGIN_SZMUSZ02  ORIGIN_SZNTSZ01  ORIGIN_SZNTSZ02  \n      0.0001659       -3.7599031       -3.0388366       -3.4230640  \nORIGIN_SZNTSZ03  ORIGIN_SZNTSZ05  ORIGIN_SZNTSZ06  ORIGIN_SZNVSZ01  \n     -0.9094796       -4.0861681       -3.9497128        0.3235636  \nORIGIN_SZNVSZ02  ORIGIN_SZNVSZ03  ORIGIN_SZNVSZ04  ORIGIN_SZNVSZ05  \n     -0.6946748       -1.0540196       -0.9897977       -2.2578432  \nORIGIN_SZPGSZ01  ORIGIN_SZPGSZ02  ORIGIN_SZPGSZ03  ORIGIN_SZPGSZ04  \n      0.2399827       -0.3352342        0.9515148        1.3998952  \nORIGIN_SZPGSZ05  ORIGIN_SZPLSZ01  ORIGIN_SZPLSZ02  ORIGIN_SZPLSZ03  \n      0.4451629       -0.9705918       -1.0670151       -2.1229124  \nORIGIN_SZPLSZ04  ORIGIN_SZPLSZ05  ORIGIN_SZPNSZ01  ORIGIN_SZPNSZ02  \n     -3.0911932       -2.1705708        0.9052637       -0.1720425  \nORIGIN_SZPNSZ03  ORIGIN_SZPNSZ04  ORIGIN_SZPNSZ05  ORIGIN_SZPRSZ01  \n     -2.3973459       -3.4483689       -2.0588530       -0.6399015  \nORIGIN_SZPRSZ02  ORIGIN_SZPRSZ03  ORIGIN_SZPRSZ04  ORIGIN_SZPRSZ05  \n      0.8122270        0.3990960       -0.8485348        0.8008791  \nORIGIN_SZPRSZ06  ORIGIN_SZPRSZ07  ORIGIN_SZPRSZ08  ORIGIN_SZQTSZ01  \n     -1.4498806       -3.2025045       -0.5862269       -0.1859270  \nORIGIN_SZQTSZ02  ORIGIN_SZQTSZ03  ORIGIN_SZQTSZ04  ORIGIN_SZQTSZ05  \n     -0.8715122       -0.1259816       -1.4620032       -0.6675643  \nORIGIN_SZQTSZ06  ORIGIN_SZQTSZ07  ORIGIN_SZQTSZ08  ORIGIN_SZQTSZ09  \n     -0.8190026       -1.5189403       -0.4976238       -0.9006162  \nORIGIN_SZQTSZ10  ORIGIN_SZQTSZ11  ORIGIN_SZQTSZ12  ORIGIN_SZQTSZ13  \n     -0.6690184       -2.5203437       -3.0461675       -0.7501068  \nORIGIN_SZQTSZ14  ORIGIN_SZQTSZ15  ORIGIN_SZRCSZ01  ORIGIN_SZRCSZ06  \n     -1.9321849       -0.9576828       -1.8167951       -0.5560563  \nORIGIN_SZRVSZ01  ORIGIN_SZRVSZ02  ORIGIN_SZRVSZ03  ORIGIN_SZRVSZ04  \n     -2.8862570       -3.1555662       -2.9836089       -3.5520422  \nORIGIN_SZRVSZ05  ORIGIN_SZSBSZ01  ORIGIN_SZSBSZ02  ORIGIN_SZSBSZ03  \n     -2.5866584        0.2867444       -0.9012334        0.8311038  \nORIGIN_SZSBSZ04  ORIGIN_SZSBSZ05  ORIGIN_SZSBSZ06  ORIGIN_SZSBSZ07  \n      0.4044170       -0.2661845       -0.9023075        0.0505870  \nORIGIN_SZSBSZ08  ORIGIN_SZSBSZ09  ORIGIN_SZSESZ02  ORIGIN_SZSESZ03  \n     -1.1158011       -0.9682835        1.1452735        1.2815277  \nORIGIN_SZSESZ04  ORIGIN_SZSESZ05  ORIGIN_SZSESZ06  ORIGIN_SZSESZ07  \n      0.8085857       -0.2329413        1.0576879       -2.3165908  \nORIGIN_SZSGSZ01  ORIGIN_SZSGSZ02  ORIGIN_SZSGSZ03  ORIGIN_SZSGSZ04  \n     -0.6606350       -1.3638984        0.1152591        0.2954067  \nORIGIN_SZSGSZ05  ORIGIN_SZSGSZ06  ORIGIN_SZSGSZ07  ORIGIN_SZSKSZ01  \n     -2.0792678        0.4563227       -0.8955254       -0.3184402  \nORIGIN_SZSKSZ02  ORIGIN_SZSKSZ03  ORIGIN_SZSKSZ04  ORIGIN_SZSKSZ05  \n      1.1160484       -0.2566692       -1.5781827       -0.2724361  \nORIGIN_SZSLSZ01  ORIGIN_SZSLSZ04  ORIGIN_SZSRSZ01  ORIGIN_SZTHSZ01  \n     -2.4458625       -0.0987076       -2.2584977       -2.5878524  \nORIGIN_SZTHSZ03  ORIGIN_SZTHSZ04  ORIGIN_SZTHSZ06  ORIGIN_SZTMSZ01  \n     -0.8101746       -2.4186655       -1.7080541       -0.2193476  \nORIGIN_SZTMSZ02  ORIGIN_SZTMSZ03  ORIGIN_SZTMSZ04  ORIGIN_SZTMSZ05  \n      1.7772464        1.0051343        0.1642370       -1.2878706  \nORIGIN_SZTNSZ01  ORIGIN_SZTNSZ02  ORIGIN_SZTNSZ03  ORIGIN_SZTNSZ04  \n     -1.7163504       -1.6508988       -2.1545577       -0.3949120  \nORIGIN_SZTPSZ01  ORIGIN_SZTPSZ02  ORIGIN_SZTPSZ03  ORIGIN_SZTPSZ04  \n     -0.8058100        0.5369060       -0.7779333       -0.8153581  \nORIGIN_SZTPSZ05  ORIGIN_SZTPSZ06  ORIGIN_SZTPSZ07  ORIGIN_SZTPSZ08  \n     -0.5073676        0.0847301       -0.5839519       -1.0577941  \nORIGIN_SZTPSZ09  ORIGIN_SZTPSZ10  ORIGIN_SZTPSZ11  ORIGIN_SZTPSZ12  \n     -0.9067707       -1.1362091       -0.2374621       -0.8028874  \nORIGIN_SZTSSZ01  ORIGIN_SZTSSZ02  ORIGIN_SZTSSZ03  ORIGIN_SZTSSZ04  \n     -2.7809271        0.0425804        0.1142369       -0.6186261  \nORIGIN_SZTSSZ05  ORIGIN_SZTSSZ06  ORIGIN_SZWCSZ01  ORIGIN_SZWCSZ02  \n     -1.0846732        0.3980173        1.3545143       -2.9863278  \nORIGIN_SZWCSZ03  ORIGIN_SZWDSZ01  ORIGIN_SZWDSZ02  ORIGIN_SZWDSZ03  \n     -5.0504916        1.5238429        0.2832576        1.3702524  \nORIGIN_SZWDSZ04  ORIGIN_SZWDSZ05  ORIGIN_SZWDSZ06  ORIGIN_SZWDSZ07  \n      1.0248225        0.2356778        0.3146925       -1.4971897  \nORIGIN_SZWDSZ08  ORIGIN_SZWDSZ09  ORIGIN_SZYSSZ01  ORIGIN_SZYSSZ02  \n     -0.8894079        1.4437633       -0.2519398        0.8726785  \nORIGIN_SZYSSZ03  ORIGIN_SZYSSZ04  ORIGIN_SZYSSZ05  ORIGIN_SZYSSZ06  \n      1.7868139        0.8418040        0.4292096       -0.7459961  \nORIGIN_SZYSSZ07  ORIGIN_SZYSSZ08  ORIGIN_SZYSSZ09  DESTIN_SZAMSZ02  \n     -0.8422281        0.1829428        1.1159712        0.0694567  \nDESTIN_SZAMSZ03  DESTIN_SZAMSZ04  DESTIN_SZAMSZ05  DESTIN_SZAMSZ06  \n      0.0760100       -1.1306391       -1.0751133       -0.9624298  \nDESTIN_SZAMSZ07  DESTIN_SZAMSZ08  DESTIN_SZAMSZ09  DESTIN_SZAMSZ10  \n     -1.5060319       -0.4813202       -1.0220675        0.1235142  \nDESTIN_SZAMSZ11  DESTIN_SZAMSZ12  DESTIN_SZBDSZ01  DESTIN_SZBDSZ02  \n     -0.8917993        0.0195208        0.9736349       -0.1969470  \nDESTIN_SZBDSZ03  DESTIN_SZBDSZ04  DESTIN_SZBDSZ05  DESTIN_SZBDSZ06  \n      0.1266471        1.1608485        0.9293840        0.4090567  \nDESTIN_SZBDSZ07  DESTIN_SZBDSZ08  DESTIN_SZBKSZ01  DESTIN_SZBKSZ02  \n     -0.8171478       -1.5895287       -1.3793311       -0.5253670  \nDESTIN_SZBKSZ03  DESTIN_SZBKSZ04  DESTIN_SZBKSZ05  DESTIN_SZBKSZ06  \n     -1.0095362       -0.5662858       -0.9406607       -1.3129276  \nDESTIN_SZBKSZ07  DESTIN_SZBKSZ08  DESTIN_SZBKSZ09  DESTIN_SZBLSZ01  \n      0.0120605       -1.3658471       -0.1771310       -0.8175223  \nDESTIN_SZBLSZ02  DESTIN_SZBLSZ03  DESTIN_SZBLSZ04  DESTIN_SZBMSZ01  \n      0.1631280        1.2598494       -0.5642975        0.6921844  \nDESTIN_SZBMSZ02  DESTIN_SZBMSZ03  DESTIN_SZBMSZ04  DESTIN_SZBMSZ05  \n     -0.1209392       -0.2373881       -0.0407117       -0.2363309  \nDESTIN_SZBMSZ06  DESTIN_SZBMSZ07  DESTIN_SZBMSZ08  DESTIN_SZBMSZ09  \n     -1.1930710        0.4625103       -0.8604731       -2.1290239  \nDESTIN_SZBMSZ10  DESTIN_SZBMSZ11  DESTIN_SZBMSZ12  DESTIN_SZBMSZ13  \n     -1.4617153       -1.3234050       -0.8399230        0.1366529  \nDESTIN_SZBMSZ14  DESTIN_SZBMSZ15  DESTIN_SZBMSZ16  DESTIN_SZBMSZ17  \n     -1.0491968       -0.6726684       -1.4011734       -1.5682752  \nDESTIN_SZBPSZ01  DESTIN_SZBPSZ02  DESTIN_SZBPSZ03  DESTIN_SZBPSZ04  \n     -1.1120017       -2.0833466       -1.6937265       -0.7964999  \nDESTIN_SZBPSZ05  DESTIN_SZBPSZ06  DESTIN_SZBPSZ07  DESTIN_SZBSSZ01  \n      0.2109118       -1.1808365       -0.2077428        0.3164175  \nDESTIN_SZBSSZ02  DESTIN_SZBSSZ03  DESTIN_SZBTSZ01  DESTIN_SZBTSZ02  \n     -0.4852688        0.4130432        0.6215095       -0.0145076  \nDESTIN_SZBTSZ03  DESTIN_SZBTSZ04  DESTIN_SZBTSZ05  DESTIN_SZBTSZ06  \n      0.4919981       -0.6957555        0.3329814       -0.1333295  \nDESTIN_SZBTSZ07  DESTIN_SZBTSZ08  DESTIN_SZCBSZ01  DESTIN_SZCCSZ01  \n     -1.4449581       -0.7079056       -5.7344725       -0.0009541  \nDESTIN_SZCHSZ01  DESTIN_SZCHSZ02  DESTIN_SZCHSZ03  DESTIN_SZCKSZ01  \n     -0.2083016        0.5369606        2.5530638       -0.5725975  \nDESTIN_SZCKSZ02  DESTIN_SZCKSZ03  DESTIN_SZCKSZ04  DESTIN_SZCKSZ05  \n     -1.1181852        0.1156680       -0.8647725       -1.1641791  \nDESTIN_SZCKSZ06  DESTIN_SZCLSZ01  DESTIN_SZCLSZ02  DESTIN_SZCLSZ03  \n     -0.4397612        0.1930552       -2.0436501       -0.9338571  \nDESTIN_SZCLSZ04  DESTIN_SZCLSZ05  DESTIN_SZCLSZ06  DESTIN_SZCLSZ07  \n      0.0532041       -1.0782781        0.4068171       -0.3579507  \nDESTIN_SZCLSZ08  DESTIN_SZCLSZ09  DESTIN_SZDTSZ02  DESTIN_SZDTSZ03  \n     -0.2487993        0.1611080       -1.7308348       -0.5994253  \nDESTIN_SZDTSZ13  DESTIN_SZGLSZ01  DESTIN_SZGLSZ02  DESTIN_SZGLSZ03  \n     -1.3685031       -0.0910001       -0.0692224        0.6493421  \nDESTIN_SZGLSZ04  DESTIN_SZGLSZ05  DESTIN_SZHGSZ01  DESTIN_SZHGSZ02  \n      0.9327947        0.8161728        0.0658625       -0.8134329  \nDESTIN_SZHGSZ03  DESTIN_SZHGSZ04  DESTIN_SZHGSZ05  DESTIN_SZHGSZ06  \n     -1.3546132       -0.4500588       -0.5026431       -0.8673686  \nDESTIN_SZHGSZ07  DESTIN_SZHGSZ08  DESTIN_SZHGSZ09  DESTIN_SZHGSZ10  \n      0.0560490       -0.0443189       -0.0126355       -3.5821793  \nDESTIN_SZJESZ01  DESTIN_SZJESZ02  DESTIN_SZJESZ03  DESTIN_SZJESZ04  \n     -0.3704281       -0.7369159       -0.8985484       -1.0511995  \nDESTIN_SZJESZ05  DESTIN_SZJESZ06  DESTIN_SZJESZ07  DESTIN_SZJESZ08  \n     -1.5324974        0.3105267       -1.3234483       -0.6559742  \nDESTIN_SZJESZ09  DESTIN_SZJESZ10  DESTIN_SZJESZ11  DESTIN_SZJWSZ01  \n      0.2663752        0.8529026        0.5559641       -0.9790971  \nDESTIN_SZJWSZ02  DESTIN_SZJWSZ03  DESTIN_SZJWSZ04  DESTIN_SZJWSZ05  \n     -0.8746590        0.5689062        0.4520963       -1.0249671  \nDESTIN_SZJWSZ06  DESTIN_SZJWSZ07  DESTIN_SZJWSZ08  DESTIN_SZJWSZ09  \n     -0.7451483       -2.8453099       -0.3372309        1.0505330  \nDESTIN_SZKLSZ01  DESTIN_SZKLSZ02  DESTIN_SZKLSZ03  DESTIN_SZKLSZ04  \n     -0.2334836       -0.5416148       -0.8026495       -1.2918594  \nDESTIN_SZKLSZ05  DESTIN_SZKLSZ06  DESTIN_SZKLSZ07  DESTIN_SZKLSZ08  \n     -0.4069101       -2.5333101       -0.6623343       -0.1408205  \nDESTIN_SZLKSZ01  DESTIN_SZMDSZ01  DESTIN_SZMDSZ02  DESTIN_SZMDSZ03  \n     -1.2639235       -1.5655800       -0.9767682       -3.3328109  \nDESTIN_SZMPSZ01  DESTIN_SZMPSZ02  DESTIN_SZMPSZ03  DESTIN_SZMUSZ02  \n     -0.4552859       -0.5386560        0.4952000       -1.4434175  \nDESTIN_SZNTSZ01  DESTIN_SZNTSZ02  DESTIN_SZNTSZ03  DESTIN_SZNTSZ05  \n     -2.9194067       -1.3780179       -0.5044699       -2.0017134  \nDESTIN_SZNTSZ06  DESTIN_SZNVSZ01  DESTIN_SZNVSZ02  DESTIN_SZNVSZ03  \n     -3.8120537       -0.1071506       -0.0274710        0.1076352  \nDESTIN_SZNVSZ04  DESTIN_SZNVSZ05  DESTIN_SZPGSZ01  DESTIN_SZPGSZ02  \n     -1.2087250       -1.0058290       -1.2029931       -1.2878671  \nDESTIN_SZPGSZ03  DESTIN_SZPGSZ04  DESTIN_SZPGSZ05  DESTIN_SZPLSZ01  \n     -0.1520894       -0.1985959       -1.5290983       -0.3567934  \nDESTIN_SZPLSZ02  DESTIN_SZPLSZ03  DESTIN_SZPLSZ04  DESTIN_SZPLSZ05  \n     -1.7114351       -0.3241427       -1.7117196       -0.5086379  \nDESTIN_SZPNSZ01  DESTIN_SZPNSZ02  DESTIN_SZPNSZ03  DESTIN_SZPNSZ04  \n      0.2026781        0.8313754       -0.4041254        1.5814539  \nDESTIN_SZPNSZ05  DESTIN_SZPRSZ01  DESTIN_SZPRSZ02  DESTIN_SZPRSZ03  \n      1.1823430       -1.1057553        0.0895099        0.6921925  \nDESTIN_SZPRSZ04  DESTIN_SZPRSZ05  DESTIN_SZPRSZ06  DESTIN_SZPRSZ07  \n     -0.2848336        0.1744480        0.4279206       -1.5123108  \nDESTIN_SZPRSZ08  DESTIN_SZQTSZ01  DESTIN_SZQTSZ02  DESTIN_SZQTSZ03  \n     -0.5650226       -0.5952360       -0.7728170       -0.5066812  \nDESTIN_SZQTSZ04  DESTIN_SZQTSZ05  DESTIN_SZQTSZ06  DESTIN_SZQTSZ07  \n     -0.6398414       -0.4354527       -0.6597391       -0.9392696  \nDESTIN_SZQTSZ08  DESTIN_SZQTSZ09  DESTIN_SZQTSZ10  DESTIN_SZQTSZ11  \n      0.4617774       -0.3174497        0.1993449        0.2551535  \nDESTIN_SZQTSZ12  DESTIN_SZQTSZ13  DESTIN_SZQTSZ14  DESTIN_SZQTSZ15  \n     -0.1662603        0.5500978        0.5364435        1.3611043  \nDESTIN_SZRCSZ01  DESTIN_SZRCSZ06  DESTIN_SZRVSZ01  DESTIN_SZRVSZ02  \n     -0.1034049       -1.0633902       -1.5486221       -2.4092611  \nDESTIN_SZRVSZ03  DESTIN_SZRVSZ04  DESTIN_SZRVSZ05  DESTIN_SZSBSZ01  \n     -1.5172079       -1.1663615       -2.2404292       -1.3783780  \nDESTIN_SZSBSZ02  DESTIN_SZSBSZ03  DESTIN_SZSBSZ04  DESTIN_SZSBSZ05  \n     -1.4445213        0.5149906        0.2389086       -1.2737442  \nDESTIN_SZSBSZ06  DESTIN_SZSBSZ07  DESTIN_SZSBSZ08  DESTIN_SZSBSZ09  \n     -1.8683520       -0.5993154        0.8156302        0.0900611  \nDESTIN_SZSESZ02  DESTIN_SZSESZ03  DESTIN_SZSESZ04  DESTIN_SZSESZ05  \n     -0.6397704        0.1714103       -1.0596175       -0.8071891  \nDESTIN_SZSESZ06  DESTIN_SZSESZ07  DESTIN_SZSGSZ01  DESTIN_SZSGSZ02  \n     -0.5580934       -3.1448863       -0.1795225       -0.2986570  \nDESTIN_SZSGSZ03  DESTIN_SZSGSZ04  DESTIN_SZSGSZ05  DESTIN_SZSGSZ06  \n     -0.4074671       -0.1505164       -1.9908372        0.6715268  \nDESTIN_SZSGSZ07  DESTIN_SZSISZ01  DESTIN_SZSKSZ01  DESTIN_SZSKSZ02  \n     -0.4494757       -0.5517983       -0.4749154        0.9400302  \nDESTIN_SZSKSZ03  DESTIN_SZSKSZ04  DESTIN_SZSKSZ05  DESTIN_SZSLSZ01  \n     -0.2800377       -1.2570212       -0.2600474       -0.7775604  \nDESTIN_SZSLSZ04  DESTIN_SZSRSZ01  DESTIN_SZTHSZ01  DESTIN_SZTHSZ03  \n     -0.8586515       -1.1370887       -4.3259988       -2.6632914  \nDESTIN_SZTHSZ04  DESTIN_SZTHSZ06  DESTIN_SZTMSZ01  DESTIN_SZTMSZ02  \n     -3.1000906       -2.5952642       -0.2092828        1.8238139  \nDESTIN_SZTMSZ03  DESTIN_SZTMSZ04  DESTIN_SZTMSZ05  DESTIN_SZTNSZ01  \n      0.8518259        1.0222812        0.6323777       -0.3336078  \nDESTIN_SZTNSZ02  DESTIN_SZTNSZ03  DESTIN_SZTNSZ04  DESTIN_SZTPSZ01  \n     -1.0820469       -1.4186505       -0.3058199       -0.4872299  \nDESTIN_SZTPSZ02  DESTIN_SZTPSZ03  DESTIN_SZTPSZ04  DESTIN_SZTPSZ05  \n      0.7158441       -0.4314229       -1.5898245       -1.0445550  \nDESTIN_SZTPSZ06  DESTIN_SZTPSZ07  DESTIN_SZTPSZ08  DESTIN_SZTPSZ09  \n     -0.4319582       -2.1602303       -1.1920493       -0.2022481  \nDESTIN_SZTPSZ10  DESTIN_SZTPSZ11  DESTIN_SZTPSZ12  DESTIN_SZTSSZ01  \n     -1.2464793       -0.0808445       -0.6784376       -1.5845062  \nDESTIN_SZTSSZ02  DESTIN_SZTSSZ03  DESTIN_SZTSSZ04  DESTIN_SZTSSZ05  \n     -0.1886010        0.6525526        0.5285464        1.4670106  \nDESTIN_SZTSSZ06  DESTIN_SZWCSZ01  DESTIN_SZWCSZ02  DESTIN_SZWCSZ03  \n      2.5043588        1.9787931       -2.2593108       -3.1897655  \nDESTIN_SZWDSZ01  DESTIN_SZWDSZ02  DESTIN_SZWDSZ03  DESTIN_SZWDSZ04  \n      1.0476108       -1.3176990        0.3432057       -0.7895927  \nDESTIN_SZWDSZ05  DESTIN_SZWDSZ06  DESTIN_SZWDSZ07  DESTIN_SZWDSZ08  \n     -0.8751665       -0.2106221       -1.6050834       -0.5124717  \nDESTIN_SZWDSZ09  DESTIN_SZYSSZ01  DESTIN_SZYSSZ02  DESTIN_SZYSSZ03  \n      0.3813542        0.0853753       -0.3227172       -0.4151283  \nDESTIN_SZYSSZ04  DESTIN_SZYSSZ05  DESTIN_SZYSSZ06  DESTIN_SZYSSZ07  \n     -0.4637327       -1.5888242       -1.4606209       -0.7839065  \nDESTIN_SZYSSZ08  DESTIN_SZYSSZ09        log(DIST)  \n      0.6265412        0.1520067       -1.8468315  \n\nDegrees of Freedom: 14470 Total (i.e. Null);  13912 Residual\nNull Deviance:      47090000 \nResidual Deviance: 10420000     AIC: 10510000\n\n\n\nmodel_list &lt;- list(originConstrained=orcSIM_Poisson, doublyConstrained=dbcSIM_Poisson)\n\n\ncompare_performance(model_list, metrics=\"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\noriginConstrained |   glm | 2613.236\ndoublyConstrained |   glm | 1906.694\n\n\nNotes: smaller RMSE -&gt; better model\nNotes: if there is an outlier, try to remove and compare with current model."
  }
]