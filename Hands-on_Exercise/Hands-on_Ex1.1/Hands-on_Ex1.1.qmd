---
title: "Hands-on Exercise 1.1: Geospatial Data Wrangling with R"
author: "Widya Tantiya Yutika"
date: "17 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://tidyverse.tidyverse.org/) packages into R environment (p_load from [pacman](https://github.com/trinker/pacman))

-   **sf** is for importing, managing and processing geospatial data

-   **tidyverse** is for importing, wrangling and visualising data

```{r}
pacman:: p_load(sf, tidyverse)

```

## Importing Geospatial Data

In this section, using [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) of sf function, we will import several datasets:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

Note: st_read() is used to read simple features from file/database

### Importing polygon feature data in shapefile format

```{r}
mpsz <- st_read(dsn="data/geospatial", layer="MP14_SUBZONE_WEB_PL")
```

Note: **dsn** is used to define data path while **layer** is used to provide the shapefile name.

### Importing polyline feature data in shapefile format

```{r}
cyclingpath <- st_read(dsn="data/geospatial", layer="CyclingPathGazette")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## Checking the Content of A Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

Note: st_geometry is used to display basic information of feature class such as type of geometry , the geographic extend of the features and the coordinate system of the data.

### Working with glimpse()

```{r}
glimpse(mpsz)
```

Note: glimpse() report from [dplyr](https://dplyr.tidyverse.org/) is used to display the data type of each fields.

### Working with head()

```{r}
head(mpsz, n=5)
```

Note: head() is to display the first n records.

## Plotting the Geospatial Data

```{r}
plot(mpsz)
```

Note: plot() is used to plot the geospatial object for a quick look. By default, all the attributes of an sf object will be plotted up to reasonable maximum as shown above.

```{r}
plot(st_geometry(mpsz))
```

Note: plot(st_geometry()) is used to plot only the geometry

```{r}
plot(mpsz["PLN_AREA_N"])
```

Note: plot(mpsz\["attribute"\]) is used to plot specific attribute

## Working with Projection

In this section, we will learn how to project a simple feature data frame from one coordinate system to another coordinate system a.k.a. projection transformation.

### Assigning EPSG code to a simple feature data frame

Common issue in importing geospatial data into R: coordinate system of the source data was either missing (due to missing .proj for ESRI shapefile, etc.) or wrongly assigned.

Coordinate system of mpsz is shown as below:

```{r}
st_crs(mpsz)
```

Note: [st_crs()](https://www.rdocumentation.org/packages/sf/versions/0.2-8/topics/st_crs) is used to retrieve coordinate reference system from object.

mpsz is projected in svy21 as shown from the second line, but at the last line, it is mentioned that the EPSG is 9001. This is wrongly assigned because the correct EPSG code for svy21 is [3414](https://epsg.io/3414).

Then, we will assign the correct EPSG code to mpsz dataframe using st_set_crs().

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Then, let us recheck the CSR again.

```{r}
st_crs(mpsz3414)
```

Note: There is a warning mentioning replacing crs does not reproject the data, and if we want to reproject the data, we can use st_tranform().

### Transforming the projection of preschool from wgs84 to svy21

The reason why it is essential to transform the original data from geographic coordinate system to projected coordinated system is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

```{r}
st_geometry(preschool)
```

From the print above, we notice the we need to reproject preschool from one coordinate system to another coordinate system mathematically using st_tranform().

```{r}
preschool3414 <- st_transform(preschool, crs=3414)
```

Note: In practice, we need to find out appropriate project coordinate system to use, but in the case about we want to project to svy21 with EPSG code 3414.

```{r}
st_geometry(preschool3414)
```

Note: The bounding box values are greater than 0-360 range of decimal degree which is commonly used by most geogrpahic coordinate system.

## Importing and Converting An Aspatial Data

Aspatial Data contains no geospatial data but there exists 2 field which capture the x- and y-coordinates of the data points.

In this section, we will learn how to import an aspatial data (i.e. listings data from Airbnb) into R environment and save it as [tibble](https://tibble.tidyverse.org/) dataframe.

### Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

To check whether the data files are imported correctly, we check using below code

```{r}
list(listings)
```

Two useful fields are latitute and longitude in decimal format.

### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude","latitude"),
                        crs=4326) %>%
  st_transform(crs=3414)
```

Notes:

-   *coords* requires you to provide column name of the x- and y-coordinates respectively.

-   *crs* requires you to provide the coordinate system in [espg](https://epsg.io/) format.

    -   EPSG: 4326 is wgs84

    -   EPSG: 3414 is svy21

-   %\>% is used to nest st_transform() to transform the newly created sumple feature data frame into svy21 projected coordinates sytem.

Let us examine the content of the newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Note: new column geometry is created and "longitude" and "latitude" columns are dropped.

## Geoprocessing with sf package

In this section, we will learn how to perform geoprocessing (a.k.a. GIS analysis) functions [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

```{r}
buffer_cycling <-st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

Note: *st_buffer() of* **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Note: the code above calculates the ares of the buffers

```{r}
sum(buffer_cycling$AREA)
```

Note: sum() is used to derive the total land involved.

### Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Note: the above code is to identify preschool located inside each Planning Subzone using st_intersect () and to calculate numbers of preschools that fall in each Planning Subzone using length()

```{r}
summary(mpsz3414$`PreSch Count`)
```

Note: summary() is used to check the summary statistics.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Note: [top_n](https://dplyr.tidyverse.org/reference/top_n.html) is used to list the top n numbers of planning subzone with the most number of preschools.

Next, we want to calculate the density of preschools by planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Note: st_area() is used to derive the area of each planning subzone.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

Note: mutate() is used to compute the density.

## Exploratory Data Analysis (EDA)

### Histrogram

```{r}
hist(mpsz3414$`PreSch Density`)
```

The graph above is the basic, to obtain a higher quality plot, we can use [ggplot()](https://ggplot2.tidyverse.org/).

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

```

### Scatterplot

Below are the relationship between preschool density and preschool count with scatterplot.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
